// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: validator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_validator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_validator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_validator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_validator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_validator_2eproto;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class MessageList;
class MessageListDefaultTypeInternal;
extern MessageListDefaultTypeInternal _MessageList_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Message* Arena::CreateMaybeMessage<::Message>(Arena*);
template<> ::MessageList* Arena::CreateMaybeMessage<::MessageList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Message_MessageType : int {
  Message_MessageType_DEFAULT = 0,
  Message_MessageType_TP_REGISTER_REQUEST = 1,
  Message_MessageType_TP_REGISTER_RESPONSE = 2,
  Message_MessageType_TP_UNREGISTER_REQUEST = 3,
  Message_MessageType_TP_UNREGISTER_RESPONSE = 4,
  Message_MessageType_TP_PROCESS_REQUEST = 5,
  Message_MessageType_TP_PROCESS_RESPONSE = 6,
  Message_MessageType_TP_STATE_GET_REQUEST = 7,
  Message_MessageType_TP_STATE_GET_RESPONSE = 8,
  Message_MessageType_TP_STATE_SET_REQUEST = 9,
  Message_MessageType_TP_STATE_SET_RESPONSE = 10,
  Message_MessageType_TP_STATE_DELETE_REQUEST = 11,
  Message_MessageType_TP_STATE_DELETE_RESPONSE = 12,
  Message_MessageType_TP_RECEIPT_ADD_DATA_REQUEST = 13,
  Message_MessageType_TP_RECEIPT_ADD_DATA_RESPONSE = 14,
  Message_MessageType_TP_EVENT_ADD_REQUEST = 15,
  Message_MessageType_TP_EVENT_ADD_RESPONSE = 16,
  Message_MessageType_CLIENT_BATCH_SUBMIT_REQUEST = 100,
  Message_MessageType_CLIENT_BATCH_SUBMIT_RESPONSE = 101,
  Message_MessageType_CLIENT_BLOCK_LIST_REQUEST = 102,
  Message_MessageType_CLIENT_BLOCK_LIST_RESPONSE = 103,
  Message_MessageType_CLIENT_BLOCK_GET_BY_ID_REQUEST = 104,
  Message_MessageType_CLIENT_BLOCK_GET_RESPONSE = 105,
  Message_MessageType_CLIENT_BATCH_LIST_REQUEST = 106,
  Message_MessageType_CLIENT_BATCH_LIST_RESPONSE = 107,
  Message_MessageType_CLIENT_BATCH_GET_REQUEST = 108,
  Message_MessageType_CLIENT_BATCH_GET_RESPONSE = 109,
  Message_MessageType_CLIENT_TRANSACTION_LIST_REQUEST = 110,
  Message_MessageType_CLIENT_TRANSACTION_LIST_RESPONSE = 111,
  Message_MessageType_CLIENT_TRANSACTION_GET_REQUEST = 112,
  Message_MessageType_CLIENT_TRANSACTION_GET_RESPONSE = 113,
  Message_MessageType_CLIENT_STATE_CURRENT_REQUEST = 114,
  Message_MessageType_CLIENT_STATE_CURRENT_RESPONSE = 115,
  Message_MessageType_CLIENT_STATE_LIST_REQUEST = 116,
  Message_MessageType_CLIENT_STATE_LIST_RESPONSE = 117,
  Message_MessageType_CLIENT_STATE_GET_REQUEST = 118,
  Message_MessageType_CLIENT_STATE_GET_RESPONSE = 119,
  Message_MessageType_CLIENT_BATCH_STATUS_REQUEST = 120,
  Message_MessageType_CLIENT_BATCH_STATUS_RESPONSE = 121,
  Message_MessageType_CLIENT_RECEIPT_GET_REQUEST = 122,
  Message_MessageType_CLIENT_RECEIPT_GET_RESPONSE = 123,
  Message_MessageType_CLIENT_BLOCK_GET_BY_NUM_REQUEST = 124,
  Message_MessageType_CLIENT_PEERS_GET_REQUEST = 125,
  Message_MessageType_CLIENT_PEERS_GET_RESPONSE = 126,
  Message_MessageType_CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST = 127,
  Message_MessageType_CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST = 128,
  Message_MessageType_CLIENT_STATUS_GET_REQUEST = 129,
  Message_MessageType_CLIENT_STATUS_GET_RESPONSE = 130,
  Message_MessageType_CLIENT_EVENTS_SUBSCRIBE_REQUEST = 500,
  Message_MessageType_CLIENT_EVENTS_SUBSCRIBE_RESPONSE = 501,
  Message_MessageType_CLIENT_EVENTS_UNSUBSCRIBE_REQUEST = 502,
  Message_MessageType_CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE = 503,
  Message_MessageType_CLIENT_EVENTS = 504,
  Message_MessageType_CLIENT_EVENTS_GET_REQUEST = 505,
  Message_MessageType_CLIENT_EVENTS_GET_RESPONSE = 506,
  Message_MessageType_GOSSIP_MESSAGE = 200,
  Message_MessageType_GOSSIP_REGISTER = 201,
  Message_MessageType_GOSSIP_UNREGISTER = 202,
  Message_MessageType_GOSSIP_BLOCK_REQUEST = 205,
  Message_MessageType_GOSSIP_BLOCK_RESPONSE = 206,
  Message_MessageType_GOSSIP_BATCH_BY_BATCH_ID_REQUEST = 207,
  Message_MessageType_GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST = 208,
  Message_MessageType_GOSSIP_BATCH_RESPONSE = 209,
  Message_MessageType_GOSSIP_GET_PEERS_REQUEST = 210,
  Message_MessageType_GOSSIP_GET_PEERS_RESPONSE = 211,
  Message_MessageType_GOSSIP_CONSENSUS_MESSAGE = 212,
  Message_MessageType_NETWORK_ACK = 300,
  Message_MessageType_NETWORK_CONNECT = 301,
  Message_MessageType_NETWORK_DISCONNECT = 302,
  Message_MessageType_AUTHORIZATION_CONNECTION_RESPONSE = 600,
  Message_MessageType_AUTHORIZATION_VIOLATION = 601,
  Message_MessageType_AUTHORIZATION_TRUST_REQUEST = 602,
  Message_MessageType_AUTHORIZATION_TRUST_RESPONSE = 603,
  Message_MessageType_AUTHORIZATION_CHALLENGE_REQUEST = 604,
  Message_MessageType_AUTHORIZATION_CHALLENGE_RESPONSE = 605,
  Message_MessageType_AUTHORIZATION_CHALLENGE_SUBMIT = 606,
  Message_MessageType_AUTHORIZATION_CHALLENGE_RESULT = 607,
  Message_MessageType_PING_REQUEST = 700,
  Message_MessageType_PING_RESPONSE = 701,
  Message_MessageType_CONSENSUS_REGISTER_REQUEST = 800,
  Message_MessageType_CONSENSUS_REGISTER_RESPONSE = 801,
  Message_MessageType_CONSENSUS_SEND_TO_REQUEST = 802,
  Message_MessageType_CONSENSUS_SEND_TO_RESPONSE = 803,
  Message_MessageType_CONSENSUS_BROADCAST_REQUEST = 804,
  Message_MessageType_CONSENSUS_BROADCAST_RESPONSE = 805,
  Message_MessageType_CONSENSUS_INITIALIZE_BLOCK_REQUEST = 806,
  Message_MessageType_CONSENSUS_INITIALIZE_BLOCK_RESPONSE = 807,
  Message_MessageType_CONSENSUS_FINALIZE_BLOCK_REQUEST = 808,
  Message_MessageType_CONSENSUS_FINALIZE_BLOCK_RESPONSE = 809,
  Message_MessageType_CONSENSUS_SUMMARIZE_BLOCK_REQUEST = 828,
  Message_MessageType_CONSENSUS_SUMMARIZE_BLOCK_RESPONSE = 829,
  Message_MessageType_CONSENSUS_CANCEL_BLOCK_REQUEST = 810,
  Message_MessageType_CONSENSUS_CANCEL_BLOCK_RESPONSE = 811,
  Message_MessageType_CONSENSUS_CHECK_BLOCKS_REQUEST = 812,
  Message_MessageType_CONSENSUS_CHECK_BLOCKS_RESPONSE = 813,
  Message_MessageType_CONSENSUS_COMMIT_BLOCK_REQUEST = 814,
  Message_MessageType_CONSENSUS_COMMIT_BLOCK_RESPONSE = 815,
  Message_MessageType_CONSENSUS_IGNORE_BLOCK_REQUEST = 816,
  Message_MessageType_CONSENSUS_IGNORE_BLOCK_RESPONSE = 817,
  Message_MessageType_CONSENSUS_FAIL_BLOCK_REQUEST = 818,
  Message_MessageType_CONSENSUS_FAIL_BLOCK_RESPONSE = 819,
  Message_MessageType_CONSENSUS_SETTINGS_GET_REQUEST = 820,
  Message_MessageType_CONSENSUS_SETTINGS_GET_RESPONSE = 821,
  Message_MessageType_CONSENSUS_STATE_GET_REQUEST = 822,
  Message_MessageType_CONSENSUS_STATE_GET_RESPONSE = 823,
  Message_MessageType_CONSENSUS_BLOCKS_GET_REQUEST = 824,
  Message_MessageType_CONSENSUS_BLOCKS_GET_RESPONSE = 825,
  Message_MessageType_CONSENSUS_CHAIN_HEAD_GET_REQUEST = 826,
  Message_MessageType_CONSENSUS_CHAIN_HEAD_GET_RESPONSE = 827,
  Message_MessageType_CONSENSUS_NOTIFY_PEER_CONNECTED = 900,
  Message_MessageType_CONSENSUS_NOTIFY_PEER_DISCONNECTED = 901,
  Message_MessageType_CONSENSUS_NOTIFY_PEER_MESSAGE = 902,
  Message_MessageType_CONSENSUS_NOTIFY_BLOCK_NEW = 903,
  Message_MessageType_CONSENSUS_NOTIFY_BLOCK_VALID = 904,
  Message_MessageType_CONSENSUS_NOTIFY_BLOCK_INVALID = 905,
  Message_MessageType_CONSENSUS_NOTIFY_BLOCK_COMMIT = 906,
  Message_MessageType_CONSENSUS_NOTIFY_ACK = 999,
  Message_MessageType_Message_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Message_MessageType_Message_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Message_MessageType_IsValid(int value);
constexpr Message_MessageType Message_MessageType_MessageType_MIN = Message_MessageType_DEFAULT;
constexpr Message_MessageType Message_MessageType_MessageType_MAX = Message_MessageType_CONSENSUS_NOTIFY_ACK;
constexpr int Message_MessageType_MessageType_ARRAYSIZE = Message_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_MessageType_descriptor();
template<typename T>
inline const std::string& Message_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_MessageType_descriptor(), enum_t_value);
}
inline bool Message_MessageType_Parse(
    const std::string& name, Message_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_MessageType>(
    Message_MessageType_descriptor(), name, value);
}
// ===================================================================

class MessageList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageList) */ {
 public:
  MessageList();
  virtual ~MessageList();

  MessageList(const MessageList& from);
  MessageList(MessageList&& from) noexcept
    : MessageList() {
    *this = ::std::move(from);
  }

  inline MessageList& operator=(const MessageList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageList& operator=(MessageList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageList* internal_default_instance() {
    return reinterpret_cast<const MessageList*>(
               &_MessageList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MessageList* other);
  friend void swap(MessageList& a, MessageList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageList* New() const final {
    return CreateMaybeMessage<MessageList>(nullptr);
  }

  MessageList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageList& from);
  void MergeFrom(const MessageList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_validator_2eproto);
    return ::descriptor_table_validator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Message messages = 1;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  ::Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message >*
      mutable_messages();
  const ::Message& messages(int index) const;
  ::Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message >&
      messages() const;

  // @@protoc_insertion_point(class_scope:MessageList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_validator_2eproto;
};
// -------------------------------------------------------------------

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_validator_2eproto);
    return ::descriptor_table_validator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_MessageType MessageType;
  static constexpr MessageType DEFAULT =
    Message_MessageType_DEFAULT;
  static constexpr MessageType TP_REGISTER_REQUEST =
    Message_MessageType_TP_REGISTER_REQUEST;
  static constexpr MessageType TP_REGISTER_RESPONSE =
    Message_MessageType_TP_REGISTER_RESPONSE;
  static constexpr MessageType TP_UNREGISTER_REQUEST =
    Message_MessageType_TP_UNREGISTER_REQUEST;
  static constexpr MessageType TP_UNREGISTER_RESPONSE =
    Message_MessageType_TP_UNREGISTER_RESPONSE;
  static constexpr MessageType TP_PROCESS_REQUEST =
    Message_MessageType_TP_PROCESS_REQUEST;
  static constexpr MessageType TP_PROCESS_RESPONSE =
    Message_MessageType_TP_PROCESS_RESPONSE;
  static constexpr MessageType TP_STATE_GET_REQUEST =
    Message_MessageType_TP_STATE_GET_REQUEST;
  static constexpr MessageType TP_STATE_GET_RESPONSE =
    Message_MessageType_TP_STATE_GET_RESPONSE;
  static constexpr MessageType TP_STATE_SET_REQUEST =
    Message_MessageType_TP_STATE_SET_REQUEST;
  static constexpr MessageType TP_STATE_SET_RESPONSE =
    Message_MessageType_TP_STATE_SET_RESPONSE;
  static constexpr MessageType TP_STATE_DELETE_REQUEST =
    Message_MessageType_TP_STATE_DELETE_REQUEST;
  static constexpr MessageType TP_STATE_DELETE_RESPONSE =
    Message_MessageType_TP_STATE_DELETE_RESPONSE;
  static constexpr MessageType TP_RECEIPT_ADD_DATA_REQUEST =
    Message_MessageType_TP_RECEIPT_ADD_DATA_REQUEST;
  static constexpr MessageType TP_RECEIPT_ADD_DATA_RESPONSE =
    Message_MessageType_TP_RECEIPT_ADD_DATA_RESPONSE;
  static constexpr MessageType TP_EVENT_ADD_REQUEST =
    Message_MessageType_TP_EVENT_ADD_REQUEST;
  static constexpr MessageType TP_EVENT_ADD_RESPONSE =
    Message_MessageType_TP_EVENT_ADD_RESPONSE;
  static constexpr MessageType CLIENT_BATCH_SUBMIT_REQUEST =
    Message_MessageType_CLIENT_BATCH_SUBMIT_REQUEST;
  static constexpr MessageType CLIENT_BATCH_SUBMIT_RESPONSE =
    Message_MessageType_CLIENT_BATCH_SUBMIT_RESPONSE;
  static constexpr MessageType CLIENT_BLOCK_LIST_REQUEST =
    Message_MessageType_CLIENT_BLOCK_LIST_REQUEST;
  static constexpr MessageType CLIENT_BLOCK_LIST_RESPONSE =
    Message_MessageType_CLIENT_BLOCK_LIST_RESPONSE;
  static constexpr MessageType CLIENT_BLOCK_GET_BY_ID_REQUEST =
    Message_MessageType_CLIENT_BLOCK_GET_BY_ID_REQUEST;
  static constexpr MessageType CLIENT_BLOCK_GET_RESPONSE =
    Message_MessageType_CLIENT_BLOCK_GET_RESPONSE;
  static constexpr MessageType CLIENT_BATCH_LIST_REQUEST =
    Message_MessageType_CLIENT_BATCH_LIST_REQUEST;
  static constexpr MessageType CLIENT_BATCH_LIST_RESPONSE =
    Message_MessageType_CLIENT_BATCH_LIST_RESPONSE;
  static constexpr MessageType CLIENT_BATCH_GET_REQUEST =
    Message_MessageType_CLIENT_BATCH_GET_REQUEST;
  static constexpr MessageType CLIENT_BATCH_GET_RESPONSE =
    Message_MessageType_CLIENT_BATCH_GET_RESPONSE;
  static constexpr MessageType CLIENT_TRANSACTION_LIST_REQUEST =
    Message_MessageType_CLIENT_TRANSACTION_LIST_REQUEST;
  static constexpr MessageType CLIENT_TRANSACTION_LIST_RESPONSE =
    Message_MessageType_CLIENT_TRANSACTION_LIST_RESPONSE;
  static constexpr MessageType CLIENT_TRANSACTION_GET_REQUEST =
    Message_MessageType_CLIENT_TRANSACTION_GET_REQUEST;
  static constexpr MessageType CLIENT_TRANSACTION_GET_RESPONSE =
    Message_MessageType_CLIENT_TRANSACTION_GET_RESPONSE;
  static constexpr MessageType CLIENT_STATE_CURRENT_REQUEST =
    Message_MessageType_CLIENT_STATE_CURRENT_REQUEST;
  static constexpr MessageType CLIENT_STATE_CURRENT_RESPONSE =
    Message_MessageType_CLIENT_STATE_CURRENT_RESPONSE;
  static constexpr MessageType CLIENT_STATE_LIST_REQUEST =
    Message_MessageType_CLIENT_STATE_LIST_REQUEST;
  static constexpr MessageType CLIENT_STATE_LIST_RESPONSE =
    Message_MessageType_CLIENT_STATE_LIST_RESPONSE;
  static constexpr MessageType CLIENT_STATE_GET_REQUEST =
    Message_MessageType_CLIENT_STATE_GET_REQUEST;
  static constexpr MessageType CLIENT_STATE_GET_RESPONSE =
    Message_MessageType_CLIENT_STATE_GET_RESPONSE;
  static constexpr MessageType CLIENT_BATCH_STATUS_REQUEST =
    Message_MessageType_CLIENT_BATCH_STATUS_REQUEST;
  static constexpr MessageType CLIENT_BATCH_STATUS_RESPONSE =
    Message_MessageType_CLIENT_BATCH_STATUS_RESPONSE;
  static constexpr MessageType CLIENT_RECEIPT_GET_REQUEST =
    Message_MessageType_CLIENT_RECEIPT_GET_REQUEST;
  static constexpr MessageType CLIENT_RECEIPT_GET_RESPONSE =
    Message_MessageType_CLIENT_RECEIPT_GET_RESPONSE;
  static constexpr MessageType CLIENT_BLOCK_GET_BY_NUM_REQUEST =
    Message_MessageType_CLIENT_BLOCK_GET_BY_NUM_REQUEST;
  static constexpr MessageType CLIENT_PEERS_GET_REQUEST =
    Message_MessageType_CLIENT_PEERS_GET_REQUEST;
  static constexpr MessageType CLIENT_PEERS_GET_RESPONSE =
    Message_MessageType_CLIENT_PEERS_GET_RESPONSE;
  static constexpr MessageType CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST =
    Message_MessageType_CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST;
  static constexpr MessageType CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST =
    Message_MessageType_CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST;
  static constexpr MessageType CLIENT_STATUS_GET_REQUEST =
    Message_MessageType_CLIENT_STATUS_GET_REQUEST;
  static constexpr MessageType CLIENT_STATUS_GET_RESPONSE =
    Message_MessageType_CLIENT_STATUS_GET_RESPONSE;
  static constexpr MessageType CLIENT_EVENTS_SUBSCRIBE_REQUEST =
    Message_MessageType_CLIENT_EVENTS_SUBSCRIBE_REQUEST;
  static constexpr MessageType CLIENT_EVENTS_SUBSCRIBE_RESPONSE =
    Message_MessageType_CLIENT_EVENTS_SUBSCRIBE_RESPONSE;
  static constexpr MessageType CLIENT_EVENTS_UNSUBSCRIBE_REQUEST =
    Message_MessageType_CLIENT_EVENTS_UNSUBSCRIBE_REQUEST;
  static constexpr MessageType CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE =
    Message_MessageType_CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE;
  static constexpr MessageType CLIENT_EVENTS =
    Message_MessageType_CLIENT_EVENTS;
  static constexpr MessageType CLIENT_EVENTS_GET_REQUEST =
    Message_MessageType_CLIENT_EVENTS_GET_REQUEST;
  static constexpr MessageType CLIENT_EVENTS_GET_RESPONSE =
    Message_MessageType_CLIENT_EVENTS_GET_RESPONSE;
  static constexpr MessageType GOSSIP_MESSAGE =
    Message_MessageType_GOSSIP_MESSAGE;
  static constexpr MessageType GOSSIP_REGISTER =
    Message_MessageType_GOSSIP_REGISTER;
  static constexpr MessageType GOSSIP_UNREGISTER =
    Message_MessageType_GOSSIP_UNREGISTER;
  static constexpr MessageType GOSSIP_BLOCK_REQUEST =
    Message_MessageType_GOSSIP_BLOCK_REQUEST;
  static constexpr MessageType GOSSIP_BLOCK_RESPONSE =
    Message_MessageType_GOSSIP_BLOCK_RESPONSE;
  static constexpr MessageType GOSSIP_BATCH_BY_BATCH_ID_REQUEST =
    Message_MessageType_GOSSIP_BATCH_BY_BATCH_ID_REQUEST;
  static constexpr MessageType GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST =
    Message_MessageType_GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST;
  static constexpr MessageType GOSSIP_BATCH_RESPONSE =
    Message_MessageType_GOSSIP_BATCH_RESPONSE;
  static constexpr MessageType GOSSIP_GET_PEERS_REQUEST =
    Message_MessageType_GOSSIP_GET_PEERS_REQUEST;
  static constexpr MessageType GOSSIP_GET_PEERS_RESPONSE =
    Message_MessageType_GOSSIP_GET_PEERS_RESPONSE;
  static constexpr MessageType GOSSIP_CONSENSUS_MESSAGE =
    Message_MessageType_GOSSIP_CONSENSUS_MESSAGE;
  static constexpr MessageType NETWORK_ACK =
    Message_MessageType_NETWORK_ACK;
  static constexpr MessageType NETWORK_CONNECT =
    Message_MessageType_NETWORK_CONNECT;
  static constexpr MessageType NETWORK_DISCONNECT =
    Message_MessageType_NETWORK_DISCONNECT;
  static constexpr MessageType AUTHORIZATION_CONNECTION_RESPONSE =
    Message_MessageType_AUTHORIZATION_CONNECTION_RESPONSE;
  static constexpr MessageType AUTHORIZATION_VIOLATION =
    Message_MessageType_AUTHORIZATION_VIOLATION;
  static constexpr MessageType AUTHORIZATION_TRUST_REQUEST =
    Message_MessageType_AUTHORIZATION_TRUST_REQUEST;
  static constexpr MessageType AUTHORIZATION_TRUST_RESPONSE =
    Message_MessageType_AUTHORIZATION_TRUST_RESPONSE;
  static constexpr MessageType AUTHORIZATION_CHALLENGE_REQUEST =
    Message_MessageType_AUTHORIZATION_CHALLENGE_REQUEST;
  static constexpr MessageType AUTHORIZATION_CHALLENGE_RESPONSE =
    Message_MessageType_AUTHORIZATION_CHALLENGE_RESPONSE;
  static constexpr MessageType AUTHORIZATION_CHALLENGE_SUBMIT =
    Message_MessageType_AUTHORIZATION_CHALLENGE_SUBMIT;
  static constexpr MessageType AUTHORIZATION_CHALLENGE_RESULT =
    Message_MessageType_AUTHORIZATION_CHALLENGE_RESULT;
  static constexpr MessageType PING_REQUEST =
    Message_MessageType_PING_REQUEST;
  static constexpr MessageType PING_RESPONSE =
    Message_MessageType_PING_RESPONSE;
  static constexpr MessageType CONSENSUS_REGISTER_REQUEST =
    Message_MessageType_CONSENSUS_REGISTER_REQUEST;
  static constexpr MessageType CONSENSUS_REGISTER_RESPONSE =
    Message_MessageType_CONSENSUS_REGISTER_RESPONSE;
  static constexpr MessageType CONSENSUS_SEND_TO_REQUEST =
    Message_MessageType_CONSENSUS_SEND_TO_REQUEST;
  static constexpr MessageType CONSENSUS_SEND_TO_RESPONSE =
    Message_MessageType_CONSENSUS_SEND_TO_RESPONSE;
  static constexpr MessageType CONSENSUS_BROADCAST_REQUEST =
    Message_MessageType_CONSENSUS_BROADCAST_REQUEST;
  static constexpr MessageType CONSENSUS_BROADCAST_RESPONSE =
    Message_MessageType_CONSENSUS_BROADCAST_RESPONSE;
  static constexpr MessageType CONSENSUS_INITIALIZE_BLOCK_REQUEST =
    Message_MessageType_CONSENSUS_INITIALIZE_BLOCK_REQUEST;
  static constexpr MessageType CONSENSUS_INITIALIZE_BLOCK_RESPONSE =
    Message_MessageType_CONSENSUS_INITIALIZE_BLOCK_RESPONSE;
  static constexpr MessageType CONSENSUS_FINALIZE_BLOCK_REQUEST =
    Message_MessageType_CONSENSUS_FINALIZE_BLOCK_REQUEST;
  static constexpr MessageType CONSENSUS_FINALIZE_BLOCK_RESPONSE =
    Message_MessageType_CONSENSUS_FINALIZE_BLOCK_RESPONSE;
  static constexpr MessageType CONSENSUS_SUMMARIZE_BLOCK_REQUEST =
    Message_MessageType_CONSENSUS_SUMMARIZE_BLOCK_REQUEST;
  static constexpr MessageType CONSENSUS_SUMMARIZE_BLOCK_RESPONSE =
    Message_MessageType_CONSENSUS_SUMMARIZE_BLOCK_RESPONSE;
  static constexpr MessageType CONSENSUS_CANCEL_BLOCK_REQUEST =
    Message_MessageType_CONSENSUS_CANCEL_BLOCK_REQUEST;
  static constexpr MessageType CONSENSUS_CANCEL_BLOCK_RESPONSE =
    Message_MessageType_CONSENSUS_CANCEL_BLOCK_RESPONSE;
  static constexpr MessageType CONSENSUS_CHECK_BLOCKS_REQUEST =
    Message_MessageType_CONSENSUS_CHECK_BLOCKS_REQUEST;
  static constexpr MessageType CONSENSUS_CHECK_BLOCKS_RESPONSE =
    Message_MessageType_CONSENSUS_CHECK_BLOCKS_RESPONSE;
  static constexpr MessageType CONSENSUS_COMMIT_BLOCK_REQUEST =
    Message_MessageType_CONSENSUS_COMMIT_BLOCK_REQUEST;
  static constexpr MessageType CONSENSUS_COMMIT_BLOCK_RESPONSE =
    Message_MessageType_CONSENSUS_COMMIT_BLOCK_RESPONSE;
  static constexpr MessageType CONSENSUS_IGNORE_BLOCK_REQUEST =
    Message_MessageType_CONSENSUS_IGNORE_BLOCK_REQUEST;
  static constexpr MessageType CONSENSUS_IGNORE_BLOCK_RESPONSE =
    Message_MessageType_CONSENSUS_IGNORE_BLOCK_RESPONSE;
  static constexpr MessageType CONSENSUS_FAIL_BLOCK_REQUEST =
    Message_MessageType_CONSENSUS_FAIL_BLOCK_REQUEST;
  static constexpr MessageType CONSENSUS_FAIL_BLOCK_RESPONSE =
    Message_MessageType_CONSENSUS_FAIL_BLOCK_RESPONSE;
  static constexpr MessageType CONSENSUS_SETTINGS_GET_REQUEST =
    Message_MessageType_CONSENSUS_SETTINGS_GET_REQUEST;
  static constexpr MessageType CONSENSUS_SETTINGS_GET_RESPONSE =
    Message_MessageType_CONSENSUS_SETTINGS_GET_RESPONSE;
  static constexpr MessageType CONSENSUS_STATE_GET_REQUEST =
    Message_MessageType_CONSENSUS_STATE_GET_REQUEST;
  static constexpr MessageType CONSENSUS_STATE_GET_RESPONSE =
    Message_MessageType_CONSENSUS_STATE_GET_RESPONSE;
  static constexpr MessageType CONSENSUS_BLOCKS_GET_REQUEST =
    Message_MessageType_CONSENSUS_BLOCKS_GET_REQUEST;
  static constexpr MessageType CONSENSUS_BLOCKS_GET_RESPONSE =
    Message_MessageType_CONSENSUS_BLOCKS_GET_RESPONSE;
  static constexpr MessageType CONSENSUS_CHAIN_HEAD_GET_REQUEST =
    Message_MessageType_CONSENSUS_CHAIN_HEAD_GET_REQUEST;
  static constexpr MessageType CONSENSUS_CHAIN_HEAD_GET_RESPONSE =
    Message_MessageType_CONSENSUS_CHAIN_HEAD_GET_RESPONSE;
  static constexpr MessageType CONSENSUS_NOTIFY_PEER_CONNECTED =
    Message_MessageType_CONSENSUS_NOTIFY_PEER_CONNECTED;
  static constexpr MessageType CONSENSUS_NOTIFY_PEER_DISCONNECTED =
    Message_MessageType_CONSENSUS_NOTIFY_PEER_DISCONNECTED;
  static constexpr MessageType CONSENSUS_NOTIFY_PEER_MESSAGE =
    Message_MessageType_CONSENSUS_NOTIFY_PEER_MESSAGE;
  static constexpr MessageType CONSENSUS_NOTIFY_BLOCK_NEW =
    Message_MessageType_CONSENSUS_NOTIFY_BLOCK_NEW;
  static constexpr MessageType CONSENSUS_NOTIFY_BLOCK_VALID =
    Message_MessageType_CONSENSUS_NOTIFY_BLOCK_VALID;
  static constexpr MessageType CONSENSUS_NOTIFY_BLOCK_INVALID =
    Message_MessageType_CONSENSUS_NOTIFY_BLOCK_INVALID;
  static constexpr MessageType CONSENSUS_NOTIFY_BLOCK_COMMIT =
    Message_MessageType_CONSENSUS_NOTIFY_BLOCK_COMMIT;
  static constexpr MessageType CONSENSUS_NOTIFY_ACK =
    Message_MessageType_CONSENSUS_NOTIFY_ACK;
  static inline bool MessageType_IsValid(int value) {
    return Message_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    Message_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    Message_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    Message_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return Message_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return Message_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return Message_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string correlation_id = 2;
  void clear_correlation_id();
  static const int kCorrelationIdFieldNumber = 2;
  const std::string& correlation_id() const;
  void set_correlation_id(const std::string& value);
  void set_correlation_id(std::string&& value);
  void set_correlation_id(const char* value);
  void set_correlation_id(const char* value, size_t size);
  std::string* mutable_correlation_id();
  std::string* release_correlation_id();
  void set_allocated_correlation_id(std::string* correlation_id);

  // bytes content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // .Message.MessageType message_type = 1;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  ::Message_MessageType message_type() const;
  void set_message_type(::Message_MessageType value);

  // @@protoc_insertion_point(class_scope:Message)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correlation_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int message_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_validator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageList

// repeated .Message messages = 1;
inline int MessageList::messages_size() const {
  return messages_.size();
}
inline void MessageList::clear_messages() {
  messages_.Clear();
}
inline ::Message* MessageList::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:MessageList.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message >*
MessageList::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:MessageList.messages)
  return &messages_;
}
inline const ::Message& MessageList::messages(int index) const {
  // @@protoc_insertion_point(field_get:MessageList.messages)
  return messages_.Get(index);
}
inline ::Message* MessageList::add_messages() {
  // @@protoc_insertion_point(field_add:MessageList.messages)
  return messages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message >&
MessageList::messages() const {
  // @@protoc_insertion_point(field_list:MessageList.messages)
  return messages_;
}

// -------------------------------------------------------------------

// Message

// .Message.MessageType message_type = 1;
inline void Message::clear_message_type() {
  message_type_ = 0;
}
inline ::Message_MessageType Message::message_type() const {
  // @@protoc_insertion_point(field_get:Message.message_type)
  return static_cast< ::Message_MessageType >(message_type_);
}
inline void Message::set_message_type(::Message_MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:Message.message_type)
}

// string correlation_id = 2;
inline void Message::clear_correlation_id() {
  correlation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Message::correlation_id() const {
  // @@protoc_insertion_point(field_get:Message.correlation_id)
  return correlation_id_.GetNoArena();
}
inline void Message::set_correlation_id(const std::string& value) {
  
  correlation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.correlation_id)
}
inline void Message::set_correlation_id(std::string&& value) {
  
  correlation_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.correlation_id)
}
inline void Message::set_correlation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  correlation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.correlation_id)
}
inline void Message::set_correlation_id(const char* value, size_t size) {
  
  correlation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.correlation_id)
}
inline std::string* Message::mutable_correlation_id() {
  
  // @@protoc_insertion_point(field_mutable:Message.correlation_id)
  return correlation_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_correlation_id() {
  // @@protoc_insertion_point(field_release:Message.correlation_id)
  
  return correlation_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_correlation_id(std::string* correlation_id) {
  if (correlation_id != nullptr) {
    
  } else {
    
  }
  correlation_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), correlation_id);
  // @@protoc_insertion_point(field_set_allocated:Message.correlation_id)
}

// bytes content = 3;
inline void Message::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Message::content() const {
  // @@protoc_insertion_point(field_get:Message.content)
  return content_.GetNoArena();
}
inline void Message::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.content)
}
inline void Message::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.content)
}
inline void Message::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.content)
}
inline void Message::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.content)
}
inline std::string* Message::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Message.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_content() {
  // @@protoc_insertion_point(field_release:Message.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Message.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Message_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Message_MessageType>() {
  return ::Message_MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_validator_2eproto
