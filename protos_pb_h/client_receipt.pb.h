// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_receipt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5freceipt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5freceipt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "transaction_receipt.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5freceipt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5freceipt_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5freceipt_2eproto;
class ClientReceiptGetRequest;
class ClientReceiptGetRequestDefaultTypeInternal;
extern ClientReceiptGetRequestDefaultTypeInternal _ClientReceiptGetRequest_default_instance_;
class ClientReceiptGetResponse;
class ClientReceiptGetResponseDefaultTypeInternal;
extern ClientReceiptGetResponseDefaultTypeInternal _ClientReceiptGetResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientReceiptGetRequest* Arena::CreateMaybeMessage<::ClientReceiptGetRequest>(Arena*);
template<> ::ClientReceiptGetResponse* Arena::CreateMaybeMessage<::ClientReceiptGetResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ClientReceiptGetResponse_Status : int {
  ClientReceiptGetResponse_Status_STATUS_UNSET = 0,
  ClientReceiptGetResponse_Status_OK = 1,
  ClientReceiptGetResponse_Status_INTERNAL_ERROR = 2,
  ClientReceiptGetResponse_Status_NO_RESOURCE = 5,
  ClientReceiptGetResponse_Status_INVALID_ID = 8,
  ClientReceiptGetResponse_Status_ClientReceiptGetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientReceiptGetResponse_Status_ClientReceiptGetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientReceiptGetResponse_Status_IsValid(int value);
constexpr ClientReceiptGetResponse_Status ClientReceiptGetResponse_Status_Status_MIN = ClientReceiptGetResponse_Status_STATUS_UNSET;
constexpr ClientReceiptGetResponse_Status ClientReceiptGetResponse_Status_Status_MAX = ClientReceiptGetResponse_Status_INVALID_ID;
constexpr int ClientReceiptGetResponse_Status_Status_ARRAYSIZE = ClientReceiptGetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientReceiptGetResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientReceiptGetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientReceiptGetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientReceiptGetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientReceiptGetResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientReceiptGetResponse_Status_Parse(
    const std::string& name, ClientReceiptGetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientReceiptGetResponse_Status>(
    ClientReceiptGetResponse_Status_descriptor(), name, value);
}
// ===================================================================

class ClientReceiptGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientReceiptGetRequest) */ {
 public:
  ClientReceiptGetRequest();
  virtual ~ClientReceiptGetRequest();

  ClientReceiptGetRequest(const ClientReceiptGetRequest& from);
  ClientReceiptGetRequest(ClientReceiptGetRequest&& from) noexcept
    : ClientReceiptGetRequest() {
    *this = ::std::move(from);
  }

  inline ClientReceiptGetRequest& operator=(const ClientReceiptGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientReceiptGetRequest& operator=(ClientReceiptGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientReceiptGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientReceiptGetRequest* internal_default_instance() {
    return reinterpret_cast<const ClientReceiptGetRequest*>(
               &_ClientReceiptGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientReceiptGetRequest* other);
  friend void swap(ClientReceiptGetRequest& a, ClientReceiptGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientReceiptGetRequest* New() const final {
    return CreateMaybeMessage<ClientReceiptGetRequest>(nullptr);
  }

  ClientReceiptGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientReceiptGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientReceiptGetRequest& from);
  void MergeFrom(const ClientReceiptGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientReceiptGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientReceiptGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5freceipt_2eproto);
    return ::descriptor_table_client_5freceipt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string transaction_ids = 1;
  int transaction_ids_size() const;
  void clear_transaction_ids();
  static const int kTransactionIdsFieldNumber = 1;
  const std::string& transaction_ids(int index) const;
  std::string* mutable_transaction_ids(int index);
  void set_transaction_ids(int index, const std::string& value);
  void set_transaction_ids(int index, std::string&& value);
  void set_transaction_ids(int index, const char* value);
  void set_transaction_ids(int index, const char* value, size_t size);
  std::string* add_transaction_ids();
  void add_transaction_ids(const std::string& value);
  void add_transaction_ids(std::string&& value);
  void add_transaction_ids(const char* value);
  void add_transaction_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transaction_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transaction_ids();

  // @@protoc_insertion_point(class_scope:ClientReceiptGetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transaction_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5freceipt_2eproto;
};
// -------------------------------------------------------------------

class ClientReceiptGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientReceiptGetResponse) */ {
 public:
  ClientReceiptGetResponse();
  virtual ~ClientReceiptGetResponse();

  ClientReceiptGetResponse(const ClientReceiptGetResponse& from);
  ClientReceiptGetResponse(ClientReceiptGetResponse&& from) noexcept
    : ClientReceiptGetResponse() {
    *this = ::std::move(from);
  }

  inline ClientReceiptGetResponse& operator=(const ClientReceiptGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientReceiptGetResponse& operator=(ClientReceiptGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientReceiptGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientReceiptGetResponse* internal_default_instance() {
    return reinterpret_cast<const ClientReceiptGetResponse*>(
               &_ClientReceiptGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientReceiptGetResponse* other);
  friend void swap(ClientReceiptGetResponse& a, ClientReceiptGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientReceiptGetResponse* New() const final {
    return CreateMaybeMessage<ClientReceiptGetResponse>(nullptr);
  }

  ClientReceiptGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientReceiptGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientReceiptGetResponse& from);
  void MergeFrom(const ClientReceiptGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientReceiptGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientReceiptGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5freceipt_2eproto);
    return ::descriptor_table_client_5freceipt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientReceiptGetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientReceiptGetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientReceiptGetResponse_Status_OK;
  static constexpr Status INTERNAL_ERROR =
    ClientReceiptGetResponse_Status_INTERNAL_ERROR;
  static constexpr Status NO_RESOURCE =
    ClientReceiptGetResponse_Status_NO_RESOURCE;
  static constexpr Status INVALID_ID =
    ClientReceiptGetResponse_Status_INVALID_ID;
  static inline bool Status_IsValid(int value) {
    return ClientReceiptGetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientReceiptGetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientReceiptGetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientReceiptGetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientReceiptGetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientReceiptGetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientReceiptGetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .TransactionReceipt receipts = 2;
  int receipts_size() const;
  void clear_receipts();
  static const int kReceiptsFieldNumber = 2;
  ::TransactionReceipt* mutable_receipts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransactionReceipt >*
      mutable_receipts();
  const ::TransactionReceipt& receipts(int index) const;
  ::TransactionReceipt* add_receipts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransactionReceipt >&
      receipts() const;

  // .ClientReceiptGetResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientReceiptGetResponse_Status status() const;
  void set_status(::ClientReceiptGetResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientReceiptGetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransactionReceipt > receipts_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5freceipt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientReceiptGetRequest

// repeated string transaction_ids = 1;
inline int ClientReceiptGetRequest::transaction_ids_size() const {
  return transaction_ids_.size();
}
inline void ClientReceiptGetRequest::clear_transaction_ids() {
  transaction_ids_.Clear();
}
inline const std::string& ClientReceiptGetRequest::transaction_ids(int index) const {
  // @@protoc_insertion_point(field_get:ClientReceiptGetRequest.transaction_ids)
  return transaction_ids_.Get(index);
}
inline std::string* ClientReceiptGetRequest::mutable_transaction_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ClientReceiptGetRequest.transaction_ids)
  return transaction_ids_.Mutable(index);
}
inline void ClientReceiptGetRequest::set_transaction_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientReceiptGetRequest.transaction_ids)
  transaction_ids_.Mutable(index)->assign(value);
}
inline void ClientReceiptGetRequest::set_transaction_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientReceiptGetRequest.transaction_ids)
  transaction_ids_.Mutable(index)->assign(std::move(value));
}
inline void ClientReceiptGetRequest::set_transaction_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientReceiptGetRequest.transaction_ids)
}
inline void ClientReceiptGetRequest::set_transaction_ids(int index, const char* value, size_t size) {
  transaction_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientReceiptGetRequest.transaction_ids)
}
inline std::string* ClientReceiptGetRequest::add_transaction_ids() {
  // @@protoc_insertion_point(field_add_mutable:ClientReceiptGetRequest.transaction_ids)
  return transaction_ids_.Add();
}
inline void ClientReceiptGetRequest::add_transaction_ids(const std::string& value) {
  transaction_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientReceiptGetRequest.transaction_ids)
}
inline void ClientReceiptGetRequest::add_transaction_ids(std::string&& value) {
  transaction_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientReceiptGetRequest.transaction_ids)
}
inline void ClientReceiptGetRequest::add_transaction_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientReceiptGetRequest.transaction_ids)
}
inline void ClientReceiptGetRequest::add_transaction_ids(const char* value, size_t size) {
  transaction_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientReceiptGetRequest.transaction_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientReceiptGetRequest::transaction_ids() const {
  // @@protoc_insertion_point(field_list:ClientReceiptGetRequest.transaction_ids)
  return transaction_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientReceiptGetRequest::mutable_transaction_ids() {
  // @@protoc_insertion_point(field_mutable_list:ClientReceiptGetRequest.transaction_ids)
  return &transaction_ids_;
}

// -------------------------------------------------------------------

// ClientReceiptGetResponse

// .ClientReceiptGetResponse.Status status = 1;
inline void ClientReceiptGetResponse::clear_status() {
  status_ = 0;
}
inline ::ClientReceiptGetResponse_Status ClientReceiptGetResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientReceiptGetResponse.status)
  return static_cast< ::ClientReceiptGetResponse_Status >(status_);
}
inline void ClientReceiptGetResponse::set_status(::ClientReceiptGetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientReceiptGetResponse.status)
}

// repeated .TransactionReceipt receipts = 2;
inline int ClientReceiptGetResponse::receipts_size() const {
  return receipts_.size();
}
inline ::TransactionReceipt* ClientReceiptGetResponse::mutable_receipts(int index) {
  // @@protoc_insertion_point(field_mutable:ClientReceiptGetResponse.receipts)
  return receipts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransactionReceipt >*
ClientReceiptGetResponse::mutable_receipts() {
  // @@protoc_insertion_point(field_mutable_list:ClientReceiptGetResponse.receipts)
  return &receipts_;
}
inline const ::TransactionReceipt& ClientReceiptGetResponse::receipts(int index) const {
  // @@protoc_insertion_point(field_get:ClientReceiptGetResponse.receipts)
  return receipts_.Get(index);
}
inline ::TransactionReceipt* ClientReceiptGetResponse::add_receipts() {
  // @@protoc_insertion_point(field_add:ClientReceiptGetResponse.receipts)
  return receipts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransactionReceipt >&
ClientReceiptGetResponse::receipts() const {
  // @@protoc_insertion_point(field_list:ClientReceiptGetResponse.receipts)
  return receipts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClientReceiptGetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientReceiptGetResponse_Status>() {
  return ::ClientReceiptGetResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5freceipt_2eproto
