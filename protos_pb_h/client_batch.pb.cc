// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_batch.proto

#include "client_batch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_batch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Batch_batch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5flist_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientPagingControls_client_5flist_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5flist_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientPagingResponse_client_5flist_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5flist_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientSortControls_client_5flist_5fcontrol_2eproto;
class ClientBatchListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBatchListRequest> _instance;
} _ClientBatchListRequest_default_instance_;
class ClientBatchListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBatchListResponse> _instance;
} _ClientBatchListResponse_default_instance_;
class ClientBatchGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBatchGetRequest> _instance;
} _ClientBatchGetRequest_default_instance_;
class ClientBatchGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBatchGetResponse> _instance;
} _ClientBatchGetResponse_default_instance_;
static void InitDefaultsscc_info_ClientBatchGetRequest_client_5fbatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBatchGetRequest_default_instance_;
    new (ptr) ::ClientBatchGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBatchGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientBatchGetRequest_client_5fbatch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientBatchGetRequest_client_5fbatch_2eproto}, {}};

static void InitDefaultsscc_info_ClientBatchGetResponse_client_5fbatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBatchGetResponse_default_instance_;
    new (ptr) ::ClientBatchGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBatchGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientBatchGetResponse_client_5fbatch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClientBatchGetResponse_client_5fbatch_2eproto}, {
      &scc_info_Batch_batch_2eproto.base,}};

static void InitDefaultsscc_info_ClientBatchListRequest_client_5fbatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBatchListRequest_default_instance_;
    new (ptr) ::ClientBatchListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBatchListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClientBatchListRequest_client_5fbatch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ClientBatchListRequest_client_5fbatch_2eproto}, {
      &scc_info_ClientPagingControls_client_5flist_5fcontrol_2eproto.base,
      &scc_info_ClientSortControls_client_5flist_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_ClientBatchListResponse_client_5fbatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBatchListResponse_default_instance_;
    new (ptr) ::ClientBatchListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBatchListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClientBatchListResponse_client_5fbatch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ClientBatchListResponse_client_5fbatch_2eproto}, {
      &scc_info_Batch_batch_2eproto.base,
      &scc_info_ClientPagingResponse_client_5flist_5fcontrol_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_5fbatch_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_5fbatch_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_5fbatch_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_client_5fbatch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBatchListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBatchListRequest, head_id_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchListRequest, batch_ids_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchListRequest, paging_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchListRequest, sorting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBatchListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBatchListResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchListResponse, batches_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchListResponse, head_id_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchListResponse, paging_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBatchGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBatchGetRequest, batch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBatchGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBatchGetResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchGetResponse, batch_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ClientBatchListRequest)},
  { 9, -1, sizeof(::ClientBatchListResponse)},
  { 18, -1, sizeof(::ClientBatchGetRequest)},
  { 24, -1, sizeof(::ClientBatchGetResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBatchListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBatchListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBatchGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBatchGetResponse_default_instance_),
};

const char descriptor_table_protodef_client_5fbatch_2eproto[] =
  "\n\022client_batch.proto\032\013batch.proto\032\031clien"
  "t_list_control.proto\"\211\001\n\026ClientBatchList"
  "Request\022\017\n\007head_id\030\001 \001(\t\022\021\n\tbatch_ids\030\002 "
  "\003(\t\022%\n\006paging\030\003 \001(\0132\025.ClientPagingContro"
  "ls\022$\n\007sorting\030\004 \003(\0132\023.ClientSortControls"
  "\"\267\002\n\027ClientBatchListResponse\022/\n\006status\030\001"
  " \001(\0162\037.ClientBatchListResponse.Status\022\027\n"
  "\007batches\030\002 \003(\0132\006.Batch\022\017\n\007head_id\030\003 \001(\t\022"
  "%\n\006paging\030\004 \001(\0132\025.ClientPagingResponse\"\231"
  "\001\n\006Status\022\020\n\014STATUS_UNSET\020\000\022\006\n\002OK\020\001\022\022\n\016I"
  "NTERNAL_ERROR\020\002\022\r\n\tNOT_READY\020\003\022\013\n\007NO_ROO"
  "T\020\004\022\017\n\013NO_RESOURCE\020\005\022\022\n\016INVALID_PAGING\020\006"
  "\022\020\n\014INVALID_SORT\020\007\022\016\n\nINVALID_ID\020\010\")\n\025Cl"
  "ientBatchGetRequest\022\020\n\010batch_id\030\001 \001(\t\"\270\001"
  "\n\026ClientBatchGetResponse\022.\n\006status\030\001 \001(\016"
  "2\036.ClientBatchGetResponse.Status\022\025\n\005batc"
  "h\030\002 \001(\0132\006.Batch\"W\n\006Status\022\020\n\014STATUS_UNSE"
  "T\020\000\022\006\n\002OK\020\001\022\022\n\016INTERNAL_ERROR\020\002\022\017\n\013NO_RE"
  "SOURCE\020\005\022\016\n\nINVALID_ID\020\010B+\n\025sawtooth.sdk"
  ".protobufP\001Z\020client_batch_pb2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_client_5fbatch_2eproto_deps[2] = {
  &::descriptor_table_batch_2eproto,
  &::descriptor_table_client_5flist_5fcontrol_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_client_5fbatch_2eproto_sccs[4] = {
  &scc_info_ClientBatchGetRequest_client_5fbatch_2eproto.base,
  &scc_info_ClientBatchGetResponse_client_5fbatch_2eproto.base,
  &scc_info_ClientBatchListRequest_client_5fbatch_2eproto.base,
  &scc_info_ClientBatchListResponse_client_5fbatch_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_5fbatch_2eproto_once;
static bool descriptor_table_client_5fbatch_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fbatch_2eproto = {
  &descriptor_table_client_5fbatch_2eproto_initialized, descriptor_table_protodef_client_5fbatch_2eproto, "client_batch.proto", 797,
  &descriptor_table_client_5fbatch_2eproto_once, descriptor_table_client_5fbatch_2eproto_sccs, descriptor_table_client_5fbatch_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_client_5fbatch_2eproto::offsets,
  file_level_metadata_client_5fbatch_2eproto, 4, file_level_enum_descriptors_client_5fbatch_2eproto, file_level_service_descriptors_client_5fbatch_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_client_5fbatch_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_client_5fbatch_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBatchListResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fbatch_2eproto);
  return file_level_enum_descriptors_client_5fbatch_2eproto[0];
}
bool ClientBatchListResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientBatchListResponse_Status ClientBatchListResponse::STATUS_UNSET;
constexpr ClientBatchListResponse_Status ClientBatchListResponse::OK;
constexpr ClientBatchListResponse_Status ClientBatchListResponse::INTERNAL_ERROR;
constexpr ClientBatchListResponse_Status ClientBatchListResponse::NOT_READY;
constexpr ClientBatchListResponse_Status ClientBatchListResponse::NO_ROOT;
constexpr ClientBatchListResponse_Status ClientBatchListResponse::NO_RESOURCE;
constexpr ClientBatchListResponse_Status ClientBatchListResponse::INVALID_PAGING;
constexpr ClientBatchListResponse_Status ClientBatchListResponse::INVALID_SORT;
constexpr ClientBatchListResponse_Status ClientBatchListResponse::INVALID_ID;
constexpr ClientBatchListResponse_Status ClientBatchListResponse::Status_MIN;
constexpr ClientBatchListResponse_Status ClientBatchListResponse::Status_MAX;
constexpr int ClientBatchListResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBatchGetResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fbatch_2eproto);
  return file_level_enum_descriptors_client_5fbatch_2eproto[1];
}
bool ClientBatchGetResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 5:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientBatchGetResponse_Status ClientBatchGetResponse::STATUS_UNSET;
constexpr ClientBatchGetResponse_Status ClientBatchGetResponse::OK;
constexpr ClientBatchGetResponse_Status ClientBatchGetResponse::INTERNAL_ERROR;
constexpr ClientBatchGetResponse_Status ClientBatchGetResponse::NO_RESOURCE;
constexpr ClientBatchGetResponse_Status ClientBatchGetResponse::INVALID_ID;
constexpr ClientBatchGetResponse_Status ClientBatchGetResponse::Status_MIN;
constexpr ClientBatchGetResponse_Status ClientBatchGetResponse::Status_MAX;
constexpr int ClientBatchGetResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ClientBatchListRequest::InitAsDefaultInstance() {
  ::_ClientBatchListRequest_default_instance_._instance.get_mutable()->paging_ = const_cast< ::ClientPagingControls*>(
      ::ClientPagingControls::internal_default_instance());
}
class ClientBatchListRequest::HasBitSetters {
 public:
  static const ::ClientPagingControls& paging(const ClientBatchListRequest* msg);
};

const ::ClientPagingControls&
ClientBatchListRequest::HasBitSetters::paging(const ClientBatchListRequest* msg) {
  return *msg->paging_;
}
void ClientBatchListRequest::clear_paging() {
  if (GetArenaNoVirtual() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
}
void ClientBatchListRequest::clear_sorting() {
  sorting_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBatchListRequest::kHeadIdFieldNumber;
const int ClientBatchListRequest::kBatchIdsFieldNumber;
const int ClientBatchListRequest::kPagingFieldNumber;
const int ClientBatchListRequest::kSortingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBatchListRequest::ClientBatchListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBatchListRequest)
}
ClientBatchListRequest::ClientBatchListRequest(const ClientBatchListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      batch_ids_(from.batch_ids_),
      sorting_(from.sorting_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  head_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.head_id().size() > 0) {
    head_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_id_);
  }
  if (from.has_paging()) {
    paging_ = new ::ClientPagingControls(*from.paging_);
  } else {
    paging_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ClientBatchListRequest)
}

void ClientBatchListRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBatchListRequest_client_5fbatch_2eproto.base);
  head_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paging_ = nullptr;
}

ClientBatchListRequest::~ClientBatchListRequest() {
  // @@protoc_insertion_point(destructor:ClientBatchListRequest)
  SharedDtor();
}

void ClientBatchListRequest::SharedDtor() {
  head_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete paging_;
}

void ClientBatchListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBatchListRequest& ClientBatchListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBatchListRequest_client_5fbatch_2eproto.base);
  return *internal_default_instance();
}


void ClientBatchListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBatchListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batch_ids_.Clear();
  sorting_.Clear();
  head_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBatchListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string head_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_head_id(), ptr, ctx, "ClientBatchListRequest.head_id");
        CHK_(ptr);
        break;
      }
      // repeated string batch_ids = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_batch_ids(), ptr, ctx, "ClientBatchListRequest.batch_ids");
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      // .ClientPagingControls paging = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_paging(), ptr);
        CHK_(ptr);
        break;
      }
      // repeated .ClientSortControls sorting = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_sorting(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 34) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBatchListRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBatchListRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string head_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_head_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->head_id().data(), static_cast<int>(this->head_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBatchListRequest.head_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string batch_ids = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_batch_ids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->batch_ids(this->batch_ids_size() - 1).data(),
            static_cast<int>(this->batch_ids(this->batch_ids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBatchListRequest.batch_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ClientPagingControls paging = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_paging()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ClientSortControls sorting = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sorting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBatchListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBatchListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBatchListRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBatchListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string head_id = 1;
  if (this->head_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->head_id().data(), static_cast<int>(this->head_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchListRequest.head_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->head_id(), output);
  }

  // repeated string batch_ids = 2;
  for (int i = 0, n = this->batch_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->batch_ids(i).data(), static_cast<int>(this->batch_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchListRequest.batch_ids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->batch_ids(i), output);
  }

  // .ClientPagingControls paging = 3;
  if (this->has_paging()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::paging(this), output);
  }

  // repeated .ClientSortControls sorting = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sorting_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->sorting(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBatchListRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBatchListRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBatchListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string head_id = 1;
  if (this->head_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->head_id().data(), static_cast<int>(this->head_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchListRequest.head_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->head_id(), target);
  }

  // repeated string batch_ids = 2;
  for (int i = 0, n = this->batch_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->batch_ids(i).data(), static_cast<int>(this->batch_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchListRequest.batch_ids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->batch_ids(i), target);
  }

  // .ClientPagingControls paging = 3;
  if (this->has_paging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::paging(this), target);
  }

  // repeated .ClientSortControls sorting = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sorting_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->sorting(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBatchListRequest)
  return target;
}

size_t ClientBatchListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBatchListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string batch_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->batch_ids_size());
  for (int i = 0, n = this->batch_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->batch_ids(i));
  }

  // repeated .ClientSortControls sorting = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->sorting_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sorting(static_cast<int>(i)));
    }
  }

  // string head_id = 1;
  if (this->head_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->head_id());
  }

  // .ClientPagingControls paging = 3;
  if (this->has_paging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paging_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBatchListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBatchListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBatchListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBatchListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBatchListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBatchListRequest)
    MergeFrom(*source);
  }
}

void ClientBatchListRequest::MergeFrom(const ClientBatchListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBatchListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  batch_ids_.MergeFrom(from.batch_ids_);
  sorting_.MergeFrom(from.sorting_);
  if (from.head_id().size() > 0) {

    head_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_id_);
  }
  if (from.has_paging()) {
    mutable_paging()->::ClientPagingControls::MergeFrom(from.paging());
  }
}

void ClientBatchListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBatchListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBatchListRequest::CopyFrom(const ClientBatchListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBatchListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBatchListRequest::IsInitialized() const {
  return true;
}

void ClientBatchListRequest::Swap(ClientBatchListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBatchListRequest::InternalSwap(ClientBatchListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  batch_ids_.InternalSwap(CastToBase(&other->batch_ids_));
  CastToBase(&sorting_)->InternalSwap(CastToBase(&other->sorting_));
  head_id_.Swap(&other->head_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(paging_, other->paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBatchListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBatchListResponse::InitAsDefaultInstance() {
  ::_ClientBatchListResponse_default_instance_._instance.get_mutable()->paging_ = const_cast< ::ClientPagingResponse*>(
      ::ClientPagingResponse::internal_default_instance());
}
class ClientBatchListResponse::HasBitSetters {
 public:
  static const ::ClientPagingResponse& paging(const ClientBatchListResponse* msg);
};

const ::ClientPagingResponse&
ClientBatchListResponse::HasBitSetters::paging(const ClientBatchListResponse* msg) {
  return *msg->paging_;
}
void ClientBatchListResponse::clear_batches() {
  batches_.Clear();
}
void ClientBatchListResponse::clear_paging() {
  if (GetArenaNoVirtual() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBatchListResponse::kStatusFieldNumber;
const int ClientBatchListResponse::kBatchesFieldNumber;
const int ClientBatchListResponse::kHeadIdFieldNumber;
const int ClientBatchListResponse::kPagingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBatchListResponse::ClientBatchListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBatchListResponse)
}
ClientBatchListResponse::ClientBatchListResponse(const ClientBatchListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      batches_(from.batches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  head_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.head_id().size() > 0) {
    head_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_id_);
  }
  if (from.has_paging()) {
    paging_ = new ::ClientPagingResponse(*from.paging_);
  } else {
    paging_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ClientBatchListResponse)
}

void ClientBatchListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBatchListResponse_client_5fbatch_2eproto.base);
  head_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&paging_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&paging_)) + sizeof(status_));
}

ClientBatchListResponse::~ClientBatchListResponse() {
  // @@protoc_insertion_point(destructor:ClientBatchListResponse)
  SharedDtor();
}

void ClientBatchListResponse::SharedDtor() {
  head_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete paging_;
}

void ClientBatchListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBatchListResponse& ClientBatchListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBatchListResponse_client_5fbatch_2eproto.base);
  return *internal_default_instance();
}


void ClientBatchListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBatchListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batches_.Clear();
  head_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBatchListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientBatchListResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ClientBatchListResponse_Status>(val));
        break;
      }
      // repeated .Batch batches = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_batches(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      // string head_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_head_id(), ptr, ctx, "ClientBatchListResponse.head_id");
        CHK_(ptr);
        break;
      }
      // .ClientPagingResponse paging = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_paging(), ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBatchListResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBatchListResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ClientBatchListResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ClientBatchListResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Batch batches = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_batches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string head_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_head_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->head_id().data(), static_cast<int>(this->head_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBatchListResponse.head_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ClientPagingResponse paging = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_paging()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBatchListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBatchListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBatchListResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBatchListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientBatchListResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .Batch batches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->batches_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->batches(static_cast<int>(i)),
      output);
  }

  // string head_id = 3;
  if (this->head_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->head_id().data(), static_cast<int>(this->head_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchListResponse.head_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->head_id(), output);
  }

  // .ClientPagingResponse paging = 4;
  if (this->has_paging()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::paging(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBatchListResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBatchListResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBatchListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientBatchListResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .Batch batches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->batches_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->batches(static_cast<int>(i)), target);
  }

  // string head_id = 3;
  if (this->head_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->head_id().data(), static_cast<int>(this->head_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchListResponse.head_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->head_id(), target);
  }

  // .ClientPagingResponse paging = 4;
  if (this->has_paging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::paging(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBatchListResponse)
  return target;
}

size_t ClientBatchListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBatchListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Batch batches = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->batches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->batches(static_cast<int>(i)));
    }
  }

  // string head_id = 3;
  if (this->head_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->head_id());
  }

  // .ClientPagingResponse paging = 4;
  if (this->has_paging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paging_);
  }

  // .ClientBatchListResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBatchListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBatchListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBatchListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBatchListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBatchListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBatchListResponse)
    MergeFrom(*source);
  }
}

void ClientBatchListResponse::MergeFrom(const ClientBatchListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBatchListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  batches_.MergeFrom(from.batches_);
  if (from.head_id().size() > 0) {

    head_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_id_);
  }
  if (from.has_paging()) {
    mutable_paging()->::ClientPagingResponse::MergeFrom(from.paging());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ClientBatchListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBatchListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBatchListResponse::CopyFrom(const ClientBatchListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBatchListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBatchListResponse::IsInitialized() const {
  return true;
}

void ClientBatchListResponse::Swap(ClientBatchListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBatchListResponse::InternalSwap(ClientBatchListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&batches_)->InternalSwap(CastToBase(&other->batches_));
  head_id_.Swap(&other->head_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(paging_, other->paging_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBatchListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBatchGetRequest::InitAsDefaultInstance() {
}
class ClientBatchGetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBatchGetRequest::kBatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBatchGetRequest::ClientBatchGetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBatchGetRequest)
}
ClientBatchGetRequest::ClientBatchGetRequest(const ClientBatchGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  batch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.batch_id().size() > 0) {
    batch_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.batch_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientBatchGetRequest)
}

void ClientBatchGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBatchGetRequest_client_5fbatch_2eproto.base);
  batch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientBatchGetRequest::~ClientBatchGetRequest() {
  // @@protoc_insertion_point(destructor:ClientBatchGetRequest)
  SharedDtor();
}

void ClientBatchGetRequest::SharedDtor() {
  batch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientBatchGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBatchGetRequest& ClientBatchGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBatchGetRequest_client_5fbatch_2eproto.base);
  return *internal_default_instance();
}


void ClientBatchGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBatchGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batch_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBatchGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string batch_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_batch_id(), ptr, ctx, "ClientBatchGetRequest.batch_id");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBatchGetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBatchGetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string batch_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_batch_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->batch_id().data(), static_cast<int>(this->batch_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBatchGetRequest.batch_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBatchGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBatchGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBatchGetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBatchGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string batch_id = 1;
  if (this->batch_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->batch_id().data(), static_cast<int>(this->batch_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchGetRequest.batch_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->batch_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBatchGetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBatchGetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBatchGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string batch_id = 1;
  if (this->batch_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->batch_id().data(), static_cast<int>(this->batch_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchGetRequest.batch_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->batch_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBatchGetRequest)
  return target;
}

size_t ClientBatchGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBatchGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string batch_id = 1;
  if (this->batch_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->batch_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBatchGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBatchGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBatchGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBatchGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBatchGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBatchGetRequest)
    MergeFrom(*source);
  }
}

void ClientBatchGetRequest::MergeFrom(const ClientBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBatchGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.batch_id().size() > 0) {

    batch_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.batch_id_);
  }
}

void ClientBatchGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBatchGetRequest::CopyFrom(const ClientBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBatchGetRequest::IsInitialized() const {
  return true;
}

void ClientBatchGetRequest::Swap(ClientBatchGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBatchGetRequest::InternalSwap(ClientBatchGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  batch_id_.Swap(&other->batch_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBatchGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBatchGetResponse::InitAsDefaultInstance() {
  ::_ClientBatchGetResponse_default_instance_._instance.get_mutable()->batch_ = const_cast< ::Batch*>(
      ::Batch::internal_default_instance());
}
class ClientBatchGetResponse::HasBitSetters {
 public:
  static const ::Batch& batch(const ClientBatchGetResponse* msg);
};

const ::Batch&
ClientBatchGetResponse::HasBitSetters::batch(const ClientBatchGetResponse* msg) {
  return *msg->batch_;
}
void ClientBatchGetResponse::clear_batch() {
  if (GetArenaNoVirtual() == nullptr && batch_ != nullptr) {
    delete batch_;
  }
  batch_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBatchGetResponse::kStatusFieldNumber;
const int ClientBatchGetResponse::kBatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBatchGetResponse::ClientBatchGetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBatchGetResponse)
}
ClientBatchGetResponse::ClientBatchGetResponse(const ClientBatchGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_batch()) {
    batch_ = new ::Batch(*from.batch_);
  } else {
    batch_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ClientBatchGetResponse)
}

void ClientBatchGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBatchGetResponse_client_5fbatch_2eproto.base);
  ::memset(&batch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&batch_)) + sizeof(status_));
}

ClientBatchGetResponse::~ClientBatchGetResponse() {
  // @@protoc_insertion_point(destructor:ClientBatchGetResponse)
  SharedDtor();
}

void ClientBatchGetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete batch_;
}

void ClientBatchGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBatchGetResponse& ClientBatchGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBatchGetResponse_client_5fbatch_2eproto.base);
  return *internal_default_instance();
}


void ClientBatchGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBatchGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && batch_ != nullptr) {
    delete batch_;
  }
  batch_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBatchGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientBatchGetResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ClientBatchGetResponse_Status>(val));
        break;
      }
      // .Batch batch = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_batch(), ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBatchGetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBatchGetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ClientBatchGetResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ClientBatchGetResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Batch batch = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_batch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBatchGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBatchGetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBatchGetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBatchGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientBatchGetResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // .Batch batch = 2;
  if (this->has_batch()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::batch(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBatchGetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBatchGetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBatchGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientBatchGetResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // .Batch batch = 2;
  if (this->has_batch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::batch(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBatchGetResponse)
  return target;
}

size_t ClientBatchGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBatchGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Batch batch = 2;
  if (this->has_batch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *batch_);
  }

  // .ClientBatchGetResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBatchGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBatchGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBatchGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBatchGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBatchGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBatchGetResponse)
    MergeFrom(*source);
  }
}

void ClientBatchGetResponse::MergeFrom(const ClientBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBatchGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_batch()) {
    mutable_batch()->::Batch::MergeFrom(from.batch());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ClientBatchGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBatchGetResponse::CopyFrom(const ClientBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBatchGetResponse::IsInitialized() const {
  return true;
}

void ClientBatchGetResponse::Swap(ClientBatchGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBatchGetResponse::InternalSwap(ClientBatchGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(batch_, other->batch_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBatchGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ClientBatchListRequest* Arena::CreateMaybeMessage< ::ClientBatchListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBatchListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBatchListResponse* Arena::CreateMaybeMessage< ::ClientBatchListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBatchListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBatchGetRequest* Arena::CreateMaybeMessage< ::ClientBatchGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBatchGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBatchGetResponse* Arena::CreateMaybeMessage< ::ClientBatchGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBatchGetResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
