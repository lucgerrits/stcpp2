// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_block.proto

#include "client_block.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_block_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Block_block_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5flist_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientPagingControls_client_5flist_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5flist_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientPagingResponse_client_5flist_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5flist_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientSortControls_client_5flist_5fcontrol_2eproto;
class ClientBlockListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBlockListRequest> _instance;
} _ClientBlockListRequest_default_instance_;
class ClientBlockListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBlockListResponse> _instance;
} _ClientBlockListResponse_default_instance_;
class ClientBlockGetByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBlockGetByIdRequest> _instance;
} _ClientBlockGetByIdRequest_default_instance_;
class ClientBlockGetByNumRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBlockGetByNumRequest> _instance;
} _ClientBlockGetByNumRequest_default_instance_;
class ClientBlockGetByTransactionIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBlockGetByTransactionIdRequest> _instance;
} _ClientBlockGetByTransactionIdRequest_default_instance_;
class ClientBlockGetByBatchIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBlockGetByBatchIdRequest> _instance;
} _ClientBlockGetByBatchIdRequest_default_instance_;
class ClientBlockGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBlockGetResponse> _instance;
} _ClientBlockGetResponse_default_instance_;
static void InitDefaultsscc_info_ClientBlockGetByBatchIdRequest_client_5fblock_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBlockGetByBatchIdRequest_default_instance_;
    new (ptr) ::ClientBlockGetByBatchIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBlockGetByBatchIdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientBlockGetByBatchIdRequest_client_5fblock_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientBlockGetByBatchIdRequest_client_5fblock_2eproto}, {}};

static void InitDefaultsscc_info_ClientBlockGetByIdRequest_client_5fblock_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBlockGetByIdRequest_default_instance_;
    new (ptr) ::ClientBlockGetByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBlockGetByIdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientBlockGetByIdRequest_client_5fblock_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientBlockGetByIdRequest_client_5fblock_2eproto}, {}};

static void InitDefaultsscc_info_ClientBlockGetByNumRequest_client_5fblock_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBlockGetByNumRequest_default_instance_;
    new (ptr) ::ClientBlockGetByNumRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBlockGetByNumRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientBlockGetByNumRequest_client_5fblock_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientBlockGetByNumRequest_client_5fblock_2eproto}, {}};

static void InitDefaultsscc_info_ClientBlockGetByTransactionIdRequest_client_5fblock_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBlockGetByTransactionIdRequest_default_instance_;
    new (ptr) ::ClientBlockGetByTransactionIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBlockGetByTransactionIdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientBlockGetByTransactionIdRequest_client_5fblock_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientBlockGetByTransactionIdRequest_client_5fblock_2eproto}, {}};

static void InitDefaultsscc_info_ClientBlockGetResponse_client_5fblock_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBlockGetResponse_default_instance_;
    new (ptr) ::ClientBlockGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBlockGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientBlockGetResponse_client_5fblock_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClientBlockGetResponse_client_5fblock_2eproto}, {
      &scc_info_Block_block_2eproto.base,}};

static void InitDefaultsscc_info_ClientBlockListRequest_client_5fblock_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBlockListRequest_default_instance_;
    new (ptr) ::ClientBlockListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBlockListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClientBlockListRequest_client_5fblock_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ClientBlockListRequest_client_5fblock_2eproto}, {
      &scc_info_ClientPagingControls_client_5flist_5fcontrol_2eproto.base,
      &scc_info_ClientSortControls_client_5flist_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_ClientBlockListResponse_client_5fblock_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBlockListResponse_default_instance_;
    new (ptr) ::ClientBlockListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBlockListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClientBlockListResponse_client_5fblock_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ClientBlockListResponse_client_5fblock_2eproto}, {
      &scc_info_Block_block_2eproto.base,
      &scc_info_ClientPagingResponse_client_5flist_5fcontrol_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_5fblock_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_5fblock_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_5fblock_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_client_5fblock_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBlockListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBlockListRequest, head_id_),
  PROTOBUF_FIELD_OFFSET(::ClientBlockListRequest, block_ids_),
  PROTOBUF_FIELD_OFFSET(::ClientBlockListRequest, paging_),
  PROTOBUF_FIELD_OFFSET(::ClientBlockListRequest, sorting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBlockListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBlockListResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ClientBlockListResponse, blocks_),
  PROTOBUF_FIELD_OFFSET(::ClientBlockListResponse, head_id_),
  PROTOBUF_FIELD_OFFSET(::ClientBlockListResponse, paging_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBlockGetByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBlockGetByIdRequest, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBlockGetByNumRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBlockGetByNumRequest, block_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBlockGetByTransactionIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBlockGetByTransactionIdRequest, transaction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBlockGetByBatchIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBlockGetByBatchIdRequest, batch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBlockGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBlockGetResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ClientBlockGetResponse, block_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ClientBlockListRequest)},
  { 9, -1, sizeof(::ClientBlockListResponse)},
  { 18, -1, sizeof(::ClientBlockGetByIdRequest)},
  { 24, -1, sizeof(::ClientBlockGetByNumRequest)},
  { 30, -1, sizeof(::ClientBlockGetByTransactionIdRequest)},
  { 36, -1, sizeof(::ClientBlockGetByBatchIdRequest)},
  { 42, -1, sizeof(::ClientBlockGetResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBlockListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBlockListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBlockGetByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBlockGetByNumRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBlockGetByTransactionIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBlockGetByBatchIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBlockGetResponse_default_instance_),
};

const char descriptor_table_protodef_client_5fblock_2eproto[] =
  "\n\022client_block.proto\032\013block.proto\032\031clien"
  "t_list_control.proto\"\211\001\n\026ClientBlockList"
  "Request\022\017\n\007head_id\030\001 \001(\t\022\021\n\tblock_ids\030\002 "
  "\003(\t\022%\n\006paging\030\003 \001(\0132\025.ClientPagingContro"
  "ls\022$\n\007sorting\030\004 \003(\0132\023.ClientSortControls"
  "\"\266\002\n\027ClientBlockListResponse\022/\n\006status\030\001"
  " \001(\0162\037.ClientBlockListResponse.Status\022\026\n"
  "\006blocks\030\002 \003(\0132\006.Block\022\017\n\007head_id\030\003 \001(\t\022%"
  "\n\006paging\030\004 \001(\0132\025.ClientPagingResponse\"\231\001"
  "\n\006Status\022\020\n\014STATUS_UNSET\020\000\022\006\n\002OK\020\001\022\022\n\016IN"
  "TERNAL_ERROR\020\002\022\r\n\tNOT_READY\020\003\022\013\n\007NO_ROOT"
  "\020\004\022\017\n\013NO_RESOURCE\020\005\022\022\n\016INVALID_PAGING\020\006\022"
  "\020\n\014INVALID_SORT\020\007\022\016\n\nINVALID_ID\020\010\"-\n\031Cli"
  "entBlockGetByIdRequest\022\020\n\010block_id\030\001 \001(\t"
  "\"/\n\032ClientBlockGetByNumRequest\022\021\n\tblock_"
  "num\030\001 \001(\004\">\n$ClientBlockGetByTransaction"
  "IdRequest\022\026\n\016transaction_id\030\001 \001(\t\"2\n\036Cli"
  "entBlockGetByBatchIdRequest\022\020\n\010batch_id\030"
  "\001 \001(\t\"\270\001\n\026ClientBlockGetResponse\022.\n\006stat"
  "us\030\001 \001(\0162\036.ClientBlockGetResponse.Status"
  "\022\025\n\005block\030\002 \001(\0132\006.Block\"W\n\006Status\022\020\n\014STA"
  "TUS_UNSET\020\000\022\006\n\002OK\020\001\022\022\n\016INTERNAL_ERROR\020\002\022"
  "\017\n\013NO_RESOURCE\020\005\022\016\n\nINVALID_ID\020\010B+\n\025sawt"
  "ooth.sdk.protobufP\001Z\020client_block_pb2b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_client_5fblock_2eproto_deps[2] = {
  &::descriptor_table_block_2eproto,
  &::descriptor_table_client_5flist_5fcontrol_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_client_5fblock_2eproto_sccs[7] = {
  &scc_info_ClientBlockGetByBatchIdRequest_client_5fblock_2eproto.base,
  &scc_info_ClientBlockGetByIdRequest_client_5fblock_2eproto.base,
  &scc_info_ClientBlockGetByNumRequest_client_5fblock_2eproto.base,
  &scc_info_ClientBlockGetByTransactionIdRequest_client_5fblock_2eproto.base,
  &scc_info_ClientBlockGetResponse_client_5fblock_2eproto.base,
  &scc_info_ClientBlockListRequest_client_5fblock_2eproto.base,
  &scc_info_ClientBlockListResponse_client_5fblock_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_5fblock_2eproto_once;
static bool descriptor_table_client_5fblock_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fblock_2eproto = {
  &descriptor_table_client_5fblock_2eproto_initialized, descriptor_table_protodef_client_5fblock_2eproto, "client_block.proto", 965,
  &descriptor_table_client_5fblock_2eproto_once, descriptor_table_client_5fblock_2eproto_sccs, descriptor_table_client_5fblock_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_client_5fblock_2eproto::offsets,
  file_level_metadata_client_5fblock_2eproto, 7, file_level_enum_descriptors_client_5fblock_2eproto, file_level_service_descriptors_client_5fblock_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_client_5fblock_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_client_5fblock_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBlockListResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fblock_2eproto);
  return file_level_enum_descriptors_client_5fblock_2eproto[0];
}
bool ClientBlockListResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientBlockListResponse_Status ClientBlockListResponse::STATUS_UNSET;
constexpr ClientBlockListResponse_Status ClientBlockListResponse::OK;
constexpr ClientBlockListResponse_Status ClientBlockListResponse::INTERNAL_ERROR;
constexpr ClientBlockListResponse_Status ClientBlockListResponse::NOT_READY;
constexpr ClientBlockListResponse_Status ClientBlockListResponse::NO_ROOT;
constexpr ClientBlockListResponse_Status ClientBlockListResponse::NO_RESOURCE;
constexpr ClientBlockListResponse_Status ClientBlockListResponse::INVALID_PAGING;
constexpr ClientBlockListResponse_Status ClientBlockListResponse::INVALID_SORT;
constexpr ClientBlockListResponse_Status ClientBlockListResponse::INVALID_ID;
constexpr ClientBlockListResponse_Status ClientBlockListResponse::Status_MIN;
constexpr ClientBlockListResponse_Status ClientBlockListResponse::Status_MAX;
constexpr int ClientBlockListResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBlockGetResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fblock_2eproto);
  return file_level_enum_descriptors_client_5fblock_2eproto[1];
}
bool ClientBlockGetResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 5:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientBlockGetResponse_Status ClientBlockGetResponse::STATUS_UNSET;
constexpr ClientBlockGetResponse_Status ClientBlockGetResponse::OK;
constexpr ClientBlockGetResponse_Status ClientBlockGetResponse::INTERNAL_ERROR;
constexpr ClientBlockGetResponse_Status ClientBlockGetResponse::NO_RESOURCE;
constexpr ClientBlockGetResponse_Status ClientBlockGetResponse::INVALID_ID;
constexpr ClientBlockGetResponse_Status ClientBlockGetResponse::Status_MIN;
constexpr ClientBlockGetResponse_Status ClientBlockGetResponse::Status_MAX;
constexpr int ClientBlockGetResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ClientBlockListRequest::InitAsDefaultInstance() {
  ::_ClientBlockListRequest_default_instance_._instance.get_mutable()->paging_ = const_cast< ::ClientPagingControls*>(
      ::ClientPagingControls::internal_default_instance());
}
class ClientBlockListRequest::HasBitSetters {
 public:
  static const ::ClientPagingControls& paging(const ClientBlockListRequest* msg);
};

const ::ClientPagingControls&
ClientBlockListRequest::HasBitSetters::paging(const ClientBlockListRequest* msg) {
  return *msg->paging_;
}
void ClientBlockListRequest::clear_paging() {
  if (GetArenaNoVirtual() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
}
void ClientBlockListRequest::clear_sorting() {
  sorting_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBlockListRequest::kHeadIdFieldNumber;
const int ClientBlockListRequest::kBlockIdsFieldNumber;
const int ClientBlockListRequest::kPagingFieldNumber;
const int ClientBlockListRequest::kSortingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBlockListRequest::ClientBlockListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBlockListRequest)
}
ClientBlockListRequest::ClientBlockListRequest(const ClientBlockListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      block_ids_(from.block_ids_),
      sorting_(from.sorting_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  head_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.head_id().size() > 0) {
    head_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_id_);
  }
  if (from.has_paging()) {
    paging_ = new ::ClientPagingControls(*from.paging_);
  } else {
    paging_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ClientBlockListRequest)
}

void ClientBlockListRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBlockListRequest_client_5fblock_2eproto.base);
  head_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paging_ = nullptr;
}

ClientBlockListRequest::~ClientBlockListRequest() {
  // @@protoc_insertion_point(destructor:ClientBlockListRequest)
  SharedDtor();
}

void ClientBlockListRequest::SharedDtor() {
  head_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete paging_;
}

void ClientBlockListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBlockListRequest& ClientBlockListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBlockListRequest_client_5fblock_2eproto.base);
  return *internal_default_instance();
}


void ClientBlockListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBlockListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_ids_.Clear();
  sorting_.Clear();
  head_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBlockListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string head_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_head_id(), ptr, ctx, "ClientBlockListRequest.head_id");
        CHK_(ptr);
        break;
      }
      // repeated string block_ids = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_block_ids(), ptr, ctx, "ClientBlockListRequest.block_ids");
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      // .ClientPagingControls paging = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_paging(), ptr);
        CHK_(ptr);
        break;
      }
      // repeated .ClientSortControls sorting = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_sorting(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 34) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBlockListRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBlockListRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string head_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_head_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->head_id().data(), static_cast<int>(this->head_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBlockListRequest.head_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string block_ids = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_block_ids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->block_ids(this->block_ids_size() - 1).data(),
            static_cast<int>(this->block_ids(this->block_ids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBlockListRequest.block_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ClientPagingControls paging = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_paging()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ClientSortControls sorting = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sorting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBlockListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBlockListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBlockListRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBlockListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string head_id = 1;
  if (this->head_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->head_id().data(), static_cast<int>(this->head_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBlockListRequest.head_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->head_id(), output);
  }

  // repeated string block_ids = 2;
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->block_ids(i).data(), static_cast<int>(this->block_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBlockListRequest.block_ids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->block_ids(i), output);
  }

  // .ClientPagingControls paging = 3;
  if (this->has_paging()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::paging(this), output);
  }

  // repeated .ClientSortControls sorting = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sorting_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->sorting(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBlockListRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBlockListRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBlockListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string head_id = 1;
  if (this->head_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->head_id().data(), static_cast<int>(this->head_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBlockListRequest.head_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->head_id(), target);
  }

  // repeated string block_ids = 2;
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->block_ids(i).data(), static_cast<int>(this->block_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBlockListRequest.block_ids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->block_ids(i), target);
  }

  // .ClientPagingControls paging = 3;
  if (this->has_paging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::paging(this), target);
  }

  // repeated .ClientSortControls sorting = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sorting_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->sorting(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBlockListRequest)
  return target;
}

size_t ClientBlockListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBlockListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string block_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->block_ids_size());
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->block_ids(i));
  }

  // repeated .ClientSortControls sorting = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->sorting_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sorting(static_cast<int>(i)));
    }
  }

  // string head_id = 1;
  if (this->head_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->head_id());
  }

  // .ClientPagingControls paging = 3;
  if (this->has_paging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paging_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBlockListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBlockListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBlockListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBlockListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBlockListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBlockListRequest)
    MergeFrom(*source);
  }
}

void ClientBlockListRequest::MergeFrom(const ClientBlockListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBlockListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_ids_.MergeFrom(from.block_ids_);
  sorting_.MergeFrom(from.sorting_);
  if (from.head_id().size() > 0) {

    head_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_id_);
  }
  if (from.has_paging()) {
    mutable_paging()->::ClientPagingControls::MergeFrom(from.paging());
  }
}

void ClientBlockListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBlockListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBlockListRequest::CopyFrom(const ClientBlockListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBlockListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBlockListRequest::IsInitialized() const {
  return true;
}

void ClientBlockListRequest::Swap(ClientBlockListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBlockListRequest::InternalSwap(ClientBlockListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_ids_.InternalSwap(CastToBase(&other->block_ids_));
  CastToBase(&sorting_)->InternalSwap(CastToBase(&other->sorting_));
  head_id_.Swap(&other->head_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(paging_, other->paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBlockListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBlockListResponse::InitAsDefaultInstance() {
  ::_ClientBlockListResponse_default_instance_._instance.get_mutable()->paging_ = const_cast< ::ClientPagingResponse*>(
      ::ClientPagingResponse::internal_default_instance());
}
class ClientBlockListResponse::HasBitSetters {
 public:
  static const ::ClientPagingResponse& paging(const ClientBlockListResponse* msg);
};

const ::ClientPagingResponse&
ClientBlockListResponse::HasBitSetters::paging(const ClientBlockListResponse* msg) {
  return *msg->paging_;
}
void ClientBlockListResponse::clear_blocks() {
  blocks_.Clear();
}
void ClientBlockListResponse::clear_paging() {
  if (GetArenaNoVirtual() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBlockListResponse::kStatusFieldNumber;
const int ClientBlockListResponse::kBlocksFieldNumber;
const int ClientBlockListResponse::kHeadIdFieldNumber;
const int ClientBlockListResponse::kPagingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBlockListResponse::ClientBlockListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBlockListResponse)
}
ClientBlockListResponse::ClientBlockListResponse(const ClientBlockListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  head_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.head_id().size() > 0) {
    head_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_id_);
  }
  if (from.has_paging()) {
    paging_ = new ::ClientPagingResponse(*from.paging_);
  } else {
    paging_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ClientBlockListResponse)
}

void ClientBlockListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBlockListResponse_client_5fblock_2eproto.base);
  head_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&paging_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&paging_)) + sizeof(status_));
}

ClientBlockListResponse::~ClientBlockListResponse() {
  // @@protoc_insertion_point(destructor:ClientBlockListResponse)
  SharedDtor();
}

void ClientBlockListResponse::SharedDtor() {
  head_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete paging_;
}

void ClientBlockListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBlockListResponse& ClientBlockListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBlockListResponse_client_5fblock_2eproto.base);
  return *internal_default_instance();
}


void ClientBlockListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBlockListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  head_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBlockListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientBlockListResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ClientBlockListResponse_Status>(val));
        break;
      }
      // repeated .Block blocks = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_blocks(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      // string head_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_head_id(), ptr, ctx, "ClientBlockListResponse.head_id");
        CHK_(ptr);
        break;
      }
      // .ClientPagingResponse paging = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_paging(), ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBlockListResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBlockListResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ClientBlockListResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ClientBlockListResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Block blocks = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string head_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_head_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->head_id().data(), static_cast<int>(this->head_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBlockListResponse.head_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ClientPagingResponse paging = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_paging()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBlockListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBlockListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBlockListResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBlockListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientBlockListResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .Block blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->blocks(static_cast<int>(i)),
      output);
  }

  // string head_id = 3;
  if (this->head_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->head_id().data(), static_cast<int>(this->head_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBlockListResponse.head_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->head_id(), output);
  }

  // .ClientPagingResponse paging = 4;
  if (this->has_paging()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::paging(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBlockListResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBlockListResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBlockListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientBlockListResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .Block blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->blocks(static_cast<int>(i)), target);
  }

  // string head_id = 3;
  if (this->head_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->head_id().data(), static_cast<int>(this->head_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBlockListResponse.head_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->head_id(), target);
  }

  // .ClientPagingResponse paging = 4;
  if (this->has_paging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::paging(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBlockListResponse)
  return target;
}

size_t ClientBlockListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBlockListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Block blocks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->blocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->blocks(static_cast<int>(i)));
    }
  }

  // string head_id = 3;
  if (this->head_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->head_id());
  }

  // .ClientPagingResponse paging = 4;
  if (this->has_paging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paging_);
  }

  // .ClientBlockListResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBlockListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBlockListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBlockListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBlockListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBlockListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBlockListResponse)
    MergeFrom(*source);
  }
}

void ClientBlockListResponse::MergeFrom(const ClientBlockListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBlockListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  if (from.head_id().size() > 0) {

    head_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_id_);
  }
  if (from.has_paging()) {
    mutable_paging()->::ClientPagingResponse::MergeFrom(from.paging());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ClientBlockListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBlockListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBlockListResponse::CopyFrom(const ClientBlockListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBlockListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBlockListResponse::IsInitialized() const {
  return true;
}

void ClientBlockListResponse::Swap(ClientBlockListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBlockListResponse::InternalSwap(ClientBlockListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&blocks_)->InternalSwap(CastToBase(&other->blocks_));
  head_id_.Swap(&other->head_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(paging_, other->paging_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBlockListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBlockGetByIdRequest::InitAsDefaultInstance() {
}
class ClientBlockGetByIdRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBlockGetByIdRequest::kBlockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBlockGetByIdRequest::ClientBlockGetByIdRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBlockGetByIdRequest)
}
ClientBlockGetByIdRequest::ClientBlockGetByIdRequest(const ClientBlockGetByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.block_id().size() > 0) {
    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientBlockGetByIdRequest)
}

void ClientBlockGetByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBlockGetByIdRequest_client_5fblock_2eproto.base);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientBlockGetByIdRequest::~ClientBlockGetByIdRequest() {
  // @@protoc_insertion_point(destructor:ClientBlockGetByIdRequest)
  SharedDtor();
}

void ClientBlockGetByIdRequest::SharedDtor() {
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientBlockGetByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBlockGetByIdRequest& ClientBlockGetByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBlockGetByIdRequest_client_5fblock_2eproto.base);
  return *internal_default_instance();
}


void ClientBlockGetByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBlockGetByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBlockGetByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string block_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_block_id(), ptr, ctx, "ClientBlockGetByIdRequest.block_id");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBlockGetByIdRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBlockGetByIdRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_block_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->block_id().data(), static_cast<int>(this->block_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBlockGetByIdRequest.block_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBlockGetByIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBlockGetByIdRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBlockGetByIdRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBlockGetByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string block_id = 1;
  if (this->block_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->block_id().data(), static_cast<int>(this->block_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBlockGetByIdRequest.block_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->block_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBlockGetByIdRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBlockGetByIdRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBlockGetByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string block_id = 1;
  if (this->block_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->block_id().data(), static_cast<int>(this->block_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBlockGetByIdRequest.block_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->block_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBlockGetByIdRequest)
  return target;
}

size_t ClientBlockGetByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBlockGetByIdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->block_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBlockGetByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBlockGetByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBlockGetByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBlockGetByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBlockGetByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBlockGetByIdRequest)
    MergeFrom(*source);
  }
}

void ClientBlockGetByIdRequest::MergeFrom(const ClientBlockGetByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBlockGetByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id().size() > 0) {

    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
}

void ClientBlockGetByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBlockGetByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBlockGetByIdRequest::CopyFrom(const ClientBlockGetByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBlockGetByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBlockGetByIdRequest::IsInitialized() const {
  return true;
}

void ClientBlockGetByIdRequest::Swap(ClientBlockGetByIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBlockGetByIdRequest::InternalSwap(ClientBlockGetByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBlockGetByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBlockGetByNumRequest::InitAsDefaultInstance() {
}
class ClientBlockGetByNumRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBlockGetByNumRequest::kBlockNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBlockGetByNumRequest::ClientBlockGetByNumRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBlockGetByNumRequest)
}
ClientBlockGetByNumRequest::ClientBlockGetByNumRequest(const ClientBlockGetByNumRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_num_ = from.block_num_;
  // @@protoc_insertion_point(copy_constructor:ClientBlockGetByNumRequest)
}

void ClientBlockGetByNumRequest::SharedCtor() {
  block_num_ = PROTOBUF_ULONGLONG(0);
}

ClientBlockGetByNumRequest::~ClientBlockGetByNumRequest() {
  // @@protoc_insertion_point(destructor:ClientBlockGetByNumRequest)
  SharedDtor();
}

void ClientBlockGetByNumRequest::SharedDtor() {
}

void ClientBlockGetByNumRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBlockGetByNumRequest& ClientBlockGetByNumRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBlockGetByNumRequest_client_5fblock_2eproto.base);
  return *internal_default_instance();
}


void ClientBlockGetByNumRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBlockGetByNumRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_num_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBlockGetByNumRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 block_num = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBlockGetByNumRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBlockGetByNumRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 block_num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBlockGetByNumRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBlockGetByNumRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBlockGetByNumRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBlockGetByNumRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_num = 1;
  if (this->block_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->block_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBlockGetByNumRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBlockGetByNumRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBlockGetByNumRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_num = 1;
  if (this->block_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->block_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBlockGetByNumRequest)
  return target;
}

size_t ClientBlockGetByNumRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBlockGetByNumRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_num = 1;
  if (this->block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->block_num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBlockGetByNumRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBlockGetByNumRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBlockGetByNumRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBlockGetByNumRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBlockGetByNumRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBlockGetByNumRequest)
    MergeFrom(*source);
  }
}

void ClientBlockGetByNumRequest::MergeFrom(const ClientBlockGetByNumRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBlockGetByNumRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_num() != 0) {
    set_block_num(from.block_num());
  }
}

void ClientBlockGetByNumRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBlockGetByNumRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBlockGetByNumRequest::CopyFrom(const ClientBlockGetByNumRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBlockGetByNumRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBlockGetByNumRequest::IsInitialized() const {
  return true;
}

void ClientBlockGetByNumRequest::Swap(ClientBlockGetByNumRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBlockGetByNumRequest::InternalSwap(ClientBlockGetByNumRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(block_num_, other->block_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBlockGetByNumRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBlockGetByTransactionIdRequest::InitAsDefaultInstance() {
}
class ClientBlockGetByTransactionIdRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBlockGetByTransactionIdRequest::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBlockGetByTransactionIdRequest::ClientBlockGetByTransactionIdRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBlockGetByTransactionIdRequest)
}
ClientBlockGetByTransactionIdRequest::ClientBlockGetByTransactionIdRequest(const ClientBlockGetByTransactionIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.transaction_id().size() > 0) {
    transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientBlockGetByTransactionIdRequest)
}

void ClientBlockGetByTransactionIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBlockGetByTransactionIdRequest_client_5fblock_2eproto.base);
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientBlockGetByTransactionIdRequest::~ClientBlockGetByTransactionIdRequest() {
  // @@protoc_insertion_point(destructor:ClientBlockGetByTransactionIdRequest)
  SharedDtor();
}

void ClientBlockGetByTransactionIdRequest::SharedDtor() {
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientBlockGetByTransactionIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBlockGetByTransactionIdRequest& ClientBlockGetByTransactionIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBlockGetByTransactionIdRequest_client_5fblock_2eproto.base);
  return *internal_default_instance();
}


void ClientBlockGetByTransactionIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBlockGetByTransactionIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBlockGetByTransactionIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transaction_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_transaction_id(), ptr, ctx, "ClientBlockGetByTransactionIdRequest.transaction_id");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBlockGetByTransactionIdRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBlockGetByTransactionIdRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string transaction_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->transaction_id().data(), static_cast<int>(this->transaction_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBlockGetByTransactionIdRequest.transaction_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBlockGetByTransactionIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBlockGetByTransactionIdRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBlockGetByTransactionIdRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBlockGetByTransactionIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transaction_id = 1;
  if (this->transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transaction_id().data(), static_cast<int>(this->transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBlockGetByTransactionIdRequest.transaction_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBlockGetByTransactionIdRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBlockGetByTransactionIdRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBlockGetByTransactionIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transaction_id = 1;
  if (this->transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transaction_id().data(), static_cast<int>(this->transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBlockGetByTransactionIdRequest.transaction_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBlockGetByTransactionIdRequest)
  return target;
}

size_t ClientBlockGetByTransactionIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBlockGetByTransactionIdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transaction_id = 1;
  if (this->transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->transaction_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBlockGetByTransactionIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBlockGetByTransactionIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBlockGetByTransactionIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBlockGetByTransactionIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBlockGetByTransactionIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBlockGetByTransactionIdRequest)
    MergeFrom(*source);
  }
}

void ClientBlockGetByTransactionIdRequest::MergeFrom(const ClientBlockGetByTransactionIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBlockGetByTransactionIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction_id().size() > 0) {

    transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
}

void ClientBlockGetByTransactionIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBlockGetByTransactionIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBlockGetByTransactionIdRequest::CopyFrom(const ClientBlockGetByTransactionIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBlockGetByTransactionIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBlockGetByTransactionIdRequest::IsInitialized() const {
  return true;
}

void ClientBlockGetByTransactionIdRequest::Swap(ClientBlockGetByTransactionIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBlockGetByTransactionIdRequest::InternalSwap(ClientBlockGetByTransactionIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transaction_id_.Swap(&other->transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBlockGetByTransactionIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBlockGetByBatchIdRequest::InitAsDefaultInstance() {
}
class ClientBlockGetByBatchIdRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBlockGetByBatchIdRequest::kBatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBlockGetByBatchIdRequest::ClientBlockGetByBatchIdRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBlockGetByBatchIdRequest)
}
ClientBlockGetByBatchIdRequest::ClientBlockGetByBatchIdRequest(const ClientBlockGetByBatchIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  batch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.batch_id().size() > 0) {
    batch_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.batch_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientBlockGetByBatchIdRequest)
}

void ClientBlockGetByBatchIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBlockGetByBatchIdRequest_client_5fblock_2eproto.base);
  batch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientBlockGetByBatchIdRequest::~ClientBlockGetByBatchIdRequest() {
  // @@protoc_insertion_point(destructor:ClientBlockGetByBatchIdRequest)
  SharedDtor();
}

void ClientBlockGetByBatchIdRequest::SharedDtor() {
  batch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientBlockGetByBatchIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBlockGetByBatchIdRequest& ClientBlockGetByBatchIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBlockGetByBatchIdRequest_client_5fblock_2eproto.base);
  return *internal_default_instance();
}


void ClientBlockGetByBatchIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBlockGetByBatchIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batch_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBlockGetByBatchIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string batch_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_batch_id(), ptr, ctx, "ClientBlockGetByBatchIdRequest.batch_id");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBlockGetByBatchIdRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBlockGetByBatchIdRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string batch_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_batch_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->batch_id().data(), static_cast<int>(this->batch_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBlockGetByBatchIdRequest.batch_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBlockGetByBatchIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBlockGetByBatchIdRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBlockGetByBatchIdRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBlockGetByBatchIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string batch_id = 1;
  if (this->batch_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->batch_id().data(), static_cast<int>(this->batch_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBlockGetByBatchIdRequest.batch_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->batch_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBlockGetByBatchIdRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBlockGetByBatchIdRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBlockGetByBatchIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string batch_id = 1;
  if (this->batch_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->batch_id().data(), static_cast<int>(this->batch_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBlockGetByBatchIdRequest.batch_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->batch_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBlockGetByBatchIdRequest)
  return target;
}

size_t ClientBlockGetByBatchIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBlockGetByBatchIdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string batch_id = 1;
  if (this->batch_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->batch_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBlockGetByBatchIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBlockGetByBatchIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBlockGetByBatchIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBlockGetByBatchIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBlockGetByBatchIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBlockGetByBatchIdRequest)
    MergeFrom(*source);
  }
}

void ClientBlockGetByBatchIdRequest::MergeFrom(const ClientBlockGetByBatchIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBlockGetByBatchIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.batch_id().size() > 0) {

    batch_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.batch_id_);
  }
}

void ClientBlockGetByBatchIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBlockGetByBatchIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBlockGetByBatchIdRequest::CopyFrom(const ClientBlockGetByBatchIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBlockGetByBatchIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBlockGetByBatchIdRequest::IsInitialized() const {
  return true;
}

void ClientBlockGetByBatchIdRequest::Swap(ClientBlockGetByBatchIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBlockGetByBatchIdRequest::InternalSwap(ClientBlockGetByBatchIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  batch_id_.Swap(&other->batch_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBlockGetByBatchIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBlockGetResponse::InitAsDefaultInstance() {
  ::_ClientBlockGetResponse_default_instance_._instance.get_mutable()->block_ = const_cast< ::Block*>(
      ::Block::internal_default_instance());
}
class ClientBlockGetResponse::HasBitSetters {
 public:
  static const ::Block& block(const ClientBlockGetResponse* msg);
};

const ::Block&
ClientBlockGetResponse::HasBitSetters::block(const ClientBlockGetResponse* msg) {
  return *msg->block_;
}
void ClientBlockGetResponse::clear_block() {
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBlockGetResponse::kStatusFieldNumber;
const int ClientBlockGetResponse::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBlockGetResponse::ClientBlockGetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBlockGetResponse)
}
ClientBlockGetResponse::ClientBlockGetResponse(const ClientBlockGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block()) {
    block_ = new ::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ClientBlockGetResponse)
}

void ClientBlockGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBlockGetResponse_client_5fblock_2eproto.base);
  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&block_)) + sizeof(status_));
}

ClientBlockGetResponse::~ClientBlockGetResponse() {
  // @@protoc_insertion_point(destructor:ClientBlockGetResponse)
  SharedDtor();
}

void ClientBlockGetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void ClientBlockGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBlockGetResponse& ClientBlockGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBlockGetResponse_client_5fblock_2eproto.base);
  return *internal_default_instance();
}


void ClientBlockGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBlockGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBlockGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientBlockGetResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ClientBlockGetResponse_Status>(val));
        break;
      }
      // .Block block = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_block(), ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBlockGetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBlockGetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ClientBlockGetResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ClientBlockGetResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Block block = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBlockGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBlockGetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBlockGetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBlockGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientBlockGetResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // .Block block = 2;
  if (this->has_block()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::block(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBlockGetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBlockGetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBlockGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientBlockGetResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // .Block block = 2;
  if (this->has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::block(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBlockGetResponse)
  return target;
}

size_t ClientBlockGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBlockGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Block block = 2;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .ClientBlockGetResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBlockGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBlockGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBlockGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBlockGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBlockGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBlockGetResponse)
    MergeFrom(*source);
  }
}

void ClientBlockGetResponse::MergeFrom(const ClientBlockGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBlockGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    mutable_block()->::Block::MergeFrom(from.block());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ClientBlockGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBlockGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBlockGetResponse::CopyFrom(const ClientBlockGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBlockGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBlockGetResponse::IsInitialized() const {
  return true;
}

void ClientBlockGetResponse::Swap(ClientBlockGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBlockGetResponse::InternalSwap(ClientBlockGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(block_, other->block_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBlockGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ClientBlockListRequest* Arena::CreateMaybeMessage< ::ClientBlockListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBlockListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBlockListResponse* Arena::CreateMaybeMessage< ::ClientBlockListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBlockListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBlockGetByIdRequest* Arena::CreateMaybeMessage< ::ClientBlockGetByIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBlockGetByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBlockGetByNumRequest* Arena::CreateMaybeMessage< ::ClientBlockGetByNumRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBlockGetByNumRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBlockGetByTransactionIdRequest* Arena::CreateMaybeMessage< ::ClientBlockGetByTransactionIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBlockGetByTransactionIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBlockGetByBatchIdRequest* Arena::CreateMaybeMessage< ::ClientBlockGetByBatchIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBlockGetByBatchIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBlockGetResponse* Arena::CreateMaybeMessage< ::ClientBlockGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBlockGetResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
