// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fstatus_2eproto;
class ClientStatusGetRequest;
class ClientStatusGetRequestDefaultTypeInternal;
extern ClientStatusGetRequestDefaultTypeInternal _ClientStatusGetRequest_default_instance_;
class ClientStatusGetResponse;
class ClientStatusGetResponseDefaultTypeInternal;
extern ClientStatusGetResponseDefaultTypeInternal _ClientStatusGetResponse_default_instance_;
class ClientStatusGetResponse_Peer;
class ClientStatusGetResponse_PeerDefaultTypeInternal;
extern ClientStatusGetResponse_PeerDefaultTypeInternal _ClientStatusGetResponse_Peer_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientStatusGetRequest* Arena::CreateMaybeMessage<::ClientStatusGetRequest>(Arena*);
template<> ::ClientStatusGetResponse* Arena::CreateMaybeMessage<::ClientStatusGetResponse>(Arena*);
template<> ::ClientStatusGetResponse_Peer* Arena::CreateMaybeMessage<::ClientStatusGetResponse_Peer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ClientStatusGetResponse_Status : int {
  ClientStatusGetResponse_Status_STATUS_UNSET = 0,
  ClientStatusGetResponse_Status_OK = 1,
  ClientStatusGetResponse_Status_ERROR = 2,
  ClientStatusGetResponse_Status_ClientStatusGetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientStatusGetResponse_Status_ClientStatusGetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientStatusGetResponse_Status_IsValid(int value);
constexpr ClientStatusGetResponse_Status ClientStatusGetResponse_Status_Status_MIN = ClientStatusGetResponse_Status_STATUS_UNSET;
constexpr ClientStatusGetResponse_Status ClientStatusGetResponse_Status_Status_MAX = ClientStatusGetResponse_Status_ERROR;
constexpr int ClientStatusGetResponse_Status_Status_ARRAYSIZE = ClientStatusGetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientStatusGetResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientStatusGetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientStatusGetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientStatusGetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientStatusGetResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientStatusGetResponse_Status_Parse(
    const std::string& name, ClientStatusGetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientStatusGetResponse_Status>(
    ClientStatusGetResponse_Status_descriptor(), name, value);
}
// ===================================================================

class ClientStatusGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientStatusGetRequest) */ {
 public:
  ClientStatusGetRequest();
  virtual ~ClientStatusGetRequest();

  ClientStatusGetRequest(const ClientStatusGetRequest& from);
  ClientStatusGetRequest(ClientStatusGetRequest&& from) noexcept
    : ClientStatusGetRequest() {
    *this = ::std::move(from);
  }

  inline ClientStatusGetRequest& operator=(const ClientStatusGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStatusGetRequest& operator=(ClientStatusGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientStatusGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStatusGetRequest* internal_default_instance() {
    return reinterpret_cast<const ClientStatusGetRequest*>(
               &_ClientStatusGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientStatusGetRequest* other);
  friend void swap(ClientStatusGetRequest& a, ClientStatusGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientStatusGetRequest* New() const final {
    return CreateMaybeMessage<ClientStatusGetRequest>(nullptr);
  }

  ClientStatusGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientStatusGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientStatusGetRequest& from);
  void MergeFrom(const ClientStatusGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStatusGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientStatusGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fstatus_2eproto);
    return ::descriptor_table_client_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientStatusGetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class ClientStatusGetResponse_Peer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientStatusGetResponse.Peer) */ {
 public:
  ClientStatusGetResponse_Peer();
  virtual ~ClientStatusGetResponse_Peer();

  ClientStatusGetResponse_Peer(const ClientStatusGetResponse_Peer& from);
  ClientStatusGetResponse_Peer(ClientStatusGetResponse_Peer&& from) noexcept
    : ClientStatusGetResponse_Peer() {
    *this = ::std::move(from);
  }

  inline ClientStatusGetResponse_Peer& operator=(const ClientStatusGetResponse_Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStatusGetResponse_Peer& operator=(ClientStatusGetResponse_Peer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientStatusGetResponse_Peer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStatusGetResponse_Peer* internal_default_instance() {
    return reinterpret_cast<const ClientStatusGetResponse_Peer*>(
               &_ClientStatusGetResponse_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientStatusGetResponse_Peer* other);
  friend void swap(ClientStatusGetResponse_Peer& a, ClientStatusGetResponse_Peer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientStatusGetResponse_Peer* New() const final {
    return CreateMaybeMessage<ClientStatusGetResponse_Peer>(nullptr);
  }

  ClientStatusGetResponse_Peer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientStatusGetResponse_Peer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientStatusGetResponse_Peer& from);
  void MergeFrom(const ClientStatusGetResponse_Peer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStatusGetResponse_Peer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientStatusGetResponse.Peer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fstatus_2eproto);
    return ::descriptor_table_client_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string endpoint = 1;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);

  // @@protoc_insertion_point(class_scope:ClientStatusGetResponse.Peer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class ClientStatusGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientStatusGetResponse) */ {
 public:
  ClientStatusGetResponse();
  virtual ~ClientStatusGetResponse();

  ClientStatusGetResponse(const ClientStatusGetResponse& from);
  ClientStatusGetResponse(ClientStatusGetResponse&& from) noexcept
    : ClientStatusGetResponse() {
    *this = ::std::move(from);
  }

  inline ClientStatusGetResponse& operator=(const ClientStatusGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStatusGetResponse& operator=(ClientStatusGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientStatusGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStatusGetResponse* internal_default_instance() {
    return reinterpret_cast<const ClientStatusGetResponse*>(
               &_ClientStatusGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClientStatusGetResponse* other);
  friend void swap(ClientStatusGetResponse& a, ClientStatusGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientStatusGetResponse* New() const final {
    return CreateMaybeMessage<ClientStatusGetResponse>(nullptr);
  }

  ClientStatusGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientStatusGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientStatusGetResponse& from);
  void MergeFrom(const ClientStatusGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStatusGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientStatusGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fstatus_2eproto);
    return ::descriptor_table_client_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientStatusGetResponse_Peer Peer;

  typedef ClientStatusGetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientStatusGetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientStatusGetResponse_Status_OK;
  static constexpr Status ERROR =
    ClientStatusGetResponse_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return ClientStatusGetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientStatusGetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientStatusGetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientStatusGetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientStatusGetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientStatusGetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientStatusGetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ClientStatusGetResponse.Peer peers = 2;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 2;
  ::ClientStatusGetResponse_Peer* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientStatusGetResponse_Peer >*
      mutable_peers();
  const ::ClientStatusGetResponse_Peer& peers(int index) const;
  ::ClientStatusGetResponse_Peer* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientStatusGetResponse_Peer >&
      peers() const;

  // string endpoint = 3;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 3;
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);

  // .ClientStatusGetResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientStatusGetResponse_Status status() const;
  void set_status(::ClientStatusGetResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientStatusGetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientStatusGetResponse_Peer > peers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientStatusGetRequest

// -------------------------------------------------------------------

// ClientStatusGetResponse_Peer

// string endpoint = 1;
inline void ClientStatusGetResponse_Peer::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientStatusGetResponse_Peer::endpoint() const {
  // @@protoc_insertion_point(field_get:ClientStatusGetResponse.Peer.endpoint)
  return endpoint_.GetNoArena();
}
inline void ClientStatusGetResponse_Peer::set_endpoint(const std::string& value) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientStatusGetResponse.Peer.endpoint)
}
inline void ClientStatusGetResponse_Peer::set_endpoint(std::string&& value) {
  
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientStatusGetResponse.Peer.endpoint)
}
inline void ClientStatusGetResponse_Peer::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientStatusGetResponse.Peer.endpoint)
}
inline void ClientStatusGetResponse_Peer::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientStatusGetResponse.Peer.endpoint)
}
inline std::string* ClientStatusGetResponse_Peer::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:ClientStatusGetResponse.Peer.endpoint)
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientStatusGetResponse_Peer::release_endpoint() {
  // @@protoc_insertion_point(field_release:ClientStatusGetResponse.Peer.endpoint)
  
  return endpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStatusGetResponse_Peer::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:ClientStatusGetResponse.Peer.endpoint)
}

// -------------------------------------------------------------------

// ClientStatusGetResponse

// .ClientStatusGetResponse.Status status = 1;
inline void ClientStatusGetResponse::clear_status() {
  status_ = 0;
}
inline ::ClientStatusGetResponse_Status ClientStatusGetResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientStatusGetResponse.status)
  return static_cast< ::ClientStatusGetResponse_Status >(status_);
}
inline void ClientStatusGetResponse::set_status(::ClientStatusGetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientStatusGetResponse.status)
}

// repeated .ClientStatusGetResponse.Peer peers = 2;
inline int ClientStatusGetResponse::peers_size() const {
  return peers_.size();
}
inline void ClientStatusGetResponse::clear_peers() {
  peers_.Clear();
}
inline ::ClientStatusGetResponse_Peer* ClientStatusGetResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:ClientStatusGetResponse.peers)
  return peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientStatusGetResponse_Peer >*
ClientStatusGetResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:ClientStatusGetResponse.peers)
  return &peers_;
}
inline const ::ClientStatusGetResponse_Peer& ClientStatusGetResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:ClientStatusGetResponse.peers)
  return peers_.Get(index);
}
inline ::ClientStatusGetResponse_Peer* ClientStatusGetResponse::add_peers() {
  // @@protoc_insertion_point(field_add:ClientStatusGetResponse.peers)
  return peers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientStatusGetResponse_Peer >&
ClientStatusGetResponse::peers() const {
  // @@protoc_insertion_point(field_list:ClientStatusGetResponse.peers)
  return peers_;
}

// string endpoint = 3;
inline void ClientStatusGetResponse::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientStatusGetResponse::endpoint() const {
  // @@protoc_insertion_point(field_get:ClientStatusGetResponse.endpoint)
  return endpoint_.GetNoArena();
}
inline void ClientStatusGetResponse::set_endpoint(const std::string& value) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientStatusGetResponse.endpoint)
}
inline void ClientStatusGetResponse::set_endpoint(std::string&& value) {
  
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientStatusGetResponse.endpoint)
}
inline void ClientStatusGetResponse::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientStatusGetResponse.endpoint)
}
inline void ClientStatusGetResponse::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientStatusGetResponse.endpoint)
}
inline std::string* ClientStatusGetResponse::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:ClientStatusGetResponse.endpoint)
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientStatusGetResponse::release_endpoint() {
  // @@protoc_insertion_point(field_release:ClientStatusGetResponse.endpoint)
  
  return endpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStatusGetResponse::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:ClientStatusGetResponse.endpoint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClientStatusGetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientStatusGetResponse_Status>() {
  return ::ClientStatusGetResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fstatus_2eproto
