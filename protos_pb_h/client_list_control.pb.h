// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_list_control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5flist_5fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5flist_5fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5flist_5fcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5flist_5fcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5flist_5fcontrol_2eproto;
class ClientPagingControls;
class ClientPagingControlsDefaultTypeInternal;
extern ClientPagingControlsDefaultTypeInternal _ClientPagingControls_default_instance_;
class ClientPagingResponse;
class ClientPagingResponseDefaultTypeInternal;
extern ClientPagingResponseDefaultTypeInternal _ClientPagingResponse_default_instance_;
class ClientSortControls;
class ClientSortControlsDefaultTypeInternal;
extern ClientSortControlsDefaultTypeInternal _ClientSortControls_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientPagingControls* Arena::CreateMaybeMessage<::ClientPagingControls>(Arena*);
template<> ::ClientPagingResponse* Arena::CreateMaybeMessage<::ClientPagingResponse>(Arena*);
template<> ::ClientSortControls* Arena::CreateMaybeMessage<::ClientSortControls>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ClientPagingControls :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientPagingControls) */ {
 public:
  ClientPagingControls();
  virtual ~ClientPagingControls();

  ClientPagingControls(const ClientPagingControls& from);
  ClientPagingControls(ClientPagingControls&& from) noexcept
    : ClientPagingControls() {
    *this = ::std::move(from);
  }

  inline ClientPagingControls& operator=(const ClientPagingControls& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPagingControls& operator=(ClientPagingControls&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientPagingControls& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientPagingControls* internal_default_instance() {
    return reinterpret_cast<const ClientPagingControls*>(
               &_ClientPagingControls_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientPagingControls* other);
  friend void swap(ClientPagingControls& a, ClientPagingControls& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientPagingControls* New() const final {
    return CreateMaybeMessage<ClientPagingControls>(nullptr);
  }

  ClientPagingControls* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientPagingControls>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientPagingControls& from);
  void MergeFrom(const ClientPagingControls& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPagingControls* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientPagingControls";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flist_5fcontrol_2eproto);
    return ::descriptor_table_client_5flist_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const std::string& start() const;
  void set_start(const std::string& value);
  void set_start(std::string&& value);
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  std::string* mutable_start();
  std::string* release_start();
  void set_allocated_start(std::string* start);

  // int32 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ClientPagingControls)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flist_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class ClientPagingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientPagingResponse) */ {
 public:
  ClientPagingResponse();
  virtual ~ClientPagingResponse();

  ClientPagingResponse(const ClientPagingResponse& from);
  ClientPagingResponse(ClientPagingResponse&& from) noexcept
    : ClientPagingResponse() {
    *this = ::std::move(from);
  }

  inline ClientPagingResponse& operator=(const ClientPagingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPagingResponse& operator=(ClientPagingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientPagingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientPagingResponse* internal_default_instance() {
    return reinterpret_cast<const ClientPagingResponse*>(
               &_ClientPagingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientPagingResponse* other);
  friend void swap(ClientPagingResponse& a, ClientPagingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientPagingResponse* New() const final {
    return CreateMaybeMessage<ClientPagingResponse>(nullptr);
  }

  ClientPagingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientPagingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientPagingResponse& from);
  void MergeFrom(const ClientPagingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPagingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientPagingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flist_5fcontrol_2eproto);
    return ::descriptor_table_client_5flist_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string next = 1;
  void clear_next();
  static const int kNextFieldNumber = 1;
  const std::string& next() const;
  void set_next(const std::string& value);
  void set_next(std::string&& value);
  void set_next(const char* value);
  void set_next(const char* value, size_t size);
  std::string* mutable_next();
  std::string* release_next();
  void set_allocated_next(std::string* next);

  // string start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  const std::string& start() const;
  void set_start(const std::string& value);
  void set_start(std::string&& value);
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  std::string* mutable_start();
  std::string* release_start();
  void set_allocated_start(std::string* start);

  // int32 limit = 3;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ClientPagingResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flist_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class ClientSortControls :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientSortControls) */ {
 public:
  ClientSortControls();
  virtual ~ClientSortControls();

  ClientSortControls(const ClientSortControls& from);
  ClientSortControls(ClientSortControls&& from) noexcept
    : ClientSortControls() {
    *this = ::std::move(from);
  }

  inline ClientSortControls& operator=(const ClientSortControls& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSortControls& operator=(ClientSortControls&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientSortControls& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientSortControls* internal_default_instance() {
    return reinterpret_cast<const ClientSortControls*>(
               &_ClientSortControls_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClientSortControls* other);
  friend void swap(ClientSortControls& a, ClientSortControls& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientSortControls* New() const final {
    return CreateMaybeMessage<ClientSortControls>(nullptr);
  }

  ClientSortControls* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientSortControls>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientSortControls& from);
  void MergeFrom(const ClientSortControls& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientSortControls* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientSortControls";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flist_5fcontrol_2eproto);
    return ::descriptor_table_client_5flist_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();

  // bool reverse = 2;
  void clear_reverse();
  static const int kReverseFieldNumber = 2;
  bool reverse() const;
  void set_reverse(bool value);

  // @@protoc_insertion_point(class_scope:ClientSortControls)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  bool reverse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flist_5fcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientPagingControls

// string start = 1;
inline void ClientPagingControls::clear_start() {
  start_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientPagingControls::start() const {
  // @@protoc_insertion_point(field_get:ClientPagingControls.start)
  return start_.GetNoArena();
}
inline void ClientPagingControls::set_start(const std::string& value) {
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientPagingControls.start)
}
inline void ClientPagingControls::set_start(std::string&& value) {
  
  start_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientPagingControls.start)
}
inline void ClientPagingControls::set_start(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientPagingControls.start)
}
inline void ClientPagingControls::set_start(const char* value, size_t size) {
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientPagingControls.start)
}
inline std::string* ClientPagingControls::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:ClientPagingControls.start)
  return start_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientPagingControls::release_start() {
  // @@protoc_insertion_point(field_release:ClientPagingControls.start)
  
  return start_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientPagingControls::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:ClientPagingControls.start)
}

// int32 limit = 2;
inline void ClientPagingControls::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientPagingControls::limit() const {
  // @@protoc_insertion_point(field_get:ClientPagingControls.limit)
  return limit_;
}
inline void ClientPagingControls::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:ClientPagingControls.limit)
}

// -------------------------------------------------------------------

// ClientPagingResponse

// string next = 1;
inline void ClientPagingResponse::clear_next() {
  next_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientPagingResponse::next() const {
  // @@protoc_insertion_point(field_get:ClientPagingResponse.next)
  return next_.GetNoArena();
}
inline void ClientPagingResponse::set_next(const std::string& value) {
  
  next_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientPagingResponse.next)
}
inline void ClientPagingResponse::set_next(std::string&& value) {
  
  next_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientPagingResponse.next)
}
inline void ClientPagingResponse::set_next(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientPagingResponse.next)
}
inline void ClientPagingResponse::set_next(const char* value, size_t size) {
  
  next_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientPagingResponse.next)
}
inline std::string* ClientPagingResponse::mutable_next() {
  
  // @@protoc_insertion_point(field_mutable:ClientPagingResponse.next)
  return next_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientPagingResponse::release_next() {
  // @@protoc_insertion_point(field_release:ClientPagingResponse.next)
  
  return next_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientPagingResponse::set_allocated_next(std::string* next) {
  if (next != nullptr) {
    
  } else {
    
  }
  next_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:ClientPagingResponse.next)
}

// string start = 2;
inline void ClientPagingResponse::clear_start() {
  start_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientPagingResponse::start() const {
  // @@protoc_insertion_point(field_get:ClientPagingResponse.start)
  return start_.GetNoArena();
}
inline void ClientPagingResponse::set_start(const std::string& value) {
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientPagingResponse.start)
}
inline void ClientPagingResponse::set_start(std::string&& value) {
  
  start_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientPagingResponse.start)
}
inline void ClientPagingResponse::set_start(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientPagingResponse.start)
}
inline void ClientPagingResponse::set_start(const char* value, size_t size) {
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientPagingResponse.start)
}
inline std::string* ClientPagingResponse::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:ClientPagingResponse.start)
  return start_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientPagingResponse::release_start() {
  // @@protoc_insertion_point(field_release:ClientPagingResponse.start)
  
  return start_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientPagingResponse::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:ClientPagingResponse.start)
}

// int32 limit = 3;
inline void ClientPagingResponse::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientPagingResponse::limit() const {
  // @@protoc_insertion_point(field_get:ClientPagingResponse.limit)
  return limit_;
}
inline void ClientPagingResponse::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:ClientPagingResponse.limit)
}

// -------------------------------------------------------------------

// ClientSortControls

// repeated string keys = 1;
inline int ClientSortControls::keys_size() const {
  return keys_.size();
}
inline void ClientSortControls::clear_keys() {
  keys_.Clear();
}
inline const std::string& ClientSortControls::keys(int index) const {
  // @@protoc_insertion_point(field_get:ClientSortControls.keys)
  return keys_.Get(index);
}
inline std::string* ClientSortControls::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:ClientSortControls.keys)
  return keys_.Mutable(index);
}
inline void ClientSortControls::set_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientSortControls.keys)
  keys_.Mutable(index)->assign(value);
}
inline void ClientSortControls::set_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientSortControls.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
inline void ClientSortControls::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientSortControls.keys)
}
inline void ClientSortControls::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientSortControls.keys)
}
inline std::string* ClientSortControls::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:ClientSortControls.keys)
  return keys_.Add();
}
inline void ClientSortControls::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientSortControls.keys)
}
inline void ClientSortControls::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientSortControls.keys)
}
inline void ClientSortControls::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientSortControls.keys)
}
inline void ClientSortControls::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientSortControls.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientSortControls::keys() const {
  // @@protoc_insertion_point(field_list:ClientSortControls.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientSortControls::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:ClientSortControls.keys)
  return &keys_;
}

// bool reverse = 2;
inline void ClientSortControls::clear_reverse() {
  reverse_ = false;
}
inline bool ClientSortControls::reverse() const {
  // @@protoc_insertion_point(field_get:ClientSortControls.reverse)
  return reverse_;
}
inline void ClientSortControls::set_reverse(bool value) {
  
  reverse_ = value;
  // @@protoc_insertion_point(field_set:ClientSortControls.reverse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5flist_5fcontrol_2eproto
