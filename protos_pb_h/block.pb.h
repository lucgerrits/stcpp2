// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_block_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_block_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "batch.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_block_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_block_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_block_2eproto;
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockHeader;
class BlockHeaderDefaultTypeInternal;
extern BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Block* Arena::CreateMaybeMessage<::Block>(Arena*);
template<> ::BlockHeader* Arena::CreateMaybeMessage<::BlockHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class BlockHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockHeader) */ {
 public:
  BlockHeader();
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);
  BlockHeader(BlockHeader&& from) noexcept
    : BlockHeader() {
    *this = ::std::move(from);
  }

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockHeader& operator=(BlockHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockHeader* internal_default_instance() {
    return reinterpret_cast<const BlockHeader*>(
               &_BlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BlockHeader* other);
  friend void swap(BlockHeader& a, BlockHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const final {
    return CreateMaybeMessage<BlockHeader>(nullptr);
  }

  BlockHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_block_2eproto);
    return ::descriptor_table_block_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string batch_ids = 4;
  int batch_ids_size() const;
  void clear_batch_ids();
  static const int kBatchIdsFieldNumber = 4;
  const std::string& batch_ids(int index) const;
  std::string* mutable_batch_ids(int index);
  void set_batch_ids(int index, const std::string& value);
  void set_batch_ids(int index, std::string&& value);
  void set_batch_ids(int index, const char* value);
  void set_batch_ids(int index, const char* value, size_t size);
  std::string* add_batch_ids();
  void add_batch_ids(const std::string& value);
  void add_batch_ids(std::string&& value);
  void add_batch_ids(const char* value);
  void add_batch_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& batch_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_batch_ids();

  // string previous_block_id = 2;
  void clear_previous_block_id();
  static const int kPreviousBlockIdFieldNumber = 2;
  const std::string& previous_block_id() const;
  void set_previous_block_id(const std::string& value);
  void set_previous_block_id(std::string&& value);
  void set_previous_block_id(const char* value);
  void set_previous_block_id(const char* value, size_t size);
  std::string* mutable_previous_block_id();
  std::string* release_previous_block_id();
  void set_allocated_previous_block_id(std::string* previous_block_id);

  // string signer_public_key = 3;
  void clear_signer_public_key();
  static const int kSignerPublicKeyFieldNumber = 3;
  const std::string& signer_public_key() const;
  void set_signer_public_key(const std::string& value);
  void set_signer_public_key(std::string&& value);
  void set_signer_public_key(const char* value);
  void set_signer_public_key(const char* value, size_t size);
  std::string* mutable_signer_public_key();
  std::string* release_signer_public_key();
  void set_allocated_signer_public_key(std::string* signer_public_key);

  // bytes consensus = 5;
  void clear_consensus();
  static const int kConsensusFieldNumber = 5;
  const std::string& consensus() const;
  void set_consensus(const std::string& value);
  void set_consensus(std::string&& value);
  void set_consensus(const char* value);
  void set_consensus(const void* value, size_t size);
  std::string* mutable_consensus();
  std::string* release_consensus();
  void set_allocated_consensus(std::string* consensus);

  // string state_root_hash = 6;
  void clear_state_root_hash();
  static const int kStateRootHashFieldNumber = 6;
  const std::string& state_root_hash() const;
  void set_state_root_hash(const std::string& value);
  void set_state_root_hash(std::string&& value);
  void set_state_root_hash(const char* value);
  void set_state_root_hash(const char* value, size_t size);
  std::string* mutable_state_root_hash();
  std::string* release_state_root_hash();
  void set_allocated_state_root_hash(std::string* state_root_hash);

  // uint64 block_num = 1;
  void clear_block_num();
  static const int kBlockNumFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_num() const;
  void set_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:BlockHeader)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> batch_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_block_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consensus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class Block :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Block";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_block_2eproto);
    return ::descriptor_table_block_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Batch batches = 3;
  int batches_size() const;
  void clear_batches();
  static const int kBatchesFieldNumber = 3;
  ::Batch* mutable_batches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >*
      mutable_batches();
  const ::Batch& batches(int index) const;
  ::Batch* add_batches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >&
      batches() const;

  // bytes header = 1;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const std::string& header() const;
  void set_header(const std::string& value);
  void set_header(std::string&& value);
  void set_header(const char* value);
  void set_header(const void* value, size_t size);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);

  // string header_signature = 2;
  void clear_header_signature();
  static const int kHeaderSignatureFieldNumber = 2;
  const std::string& header_signature() const;
  void set_header_signature(const std::string& value);
  void set_header_signature(std::string&& value);
  void set_header_signature(const char* value);
  void set_header_signature(const char* value, size_t size);
  std::string* mutable_header_signature();
  std::string* release_header_signature();
  void set_allocated_header_signature(std::string* header_signature);

  // @@protoc_insertion_point(class_scope:Block)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch > batches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_block_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockHeader

// uint64 block_num = 1;
inline void BlockHeader::clear_block_num() {
  block_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::block_num() const {
  // @@protoc_insertion_point(field_get:BlockHeader.block_num)
  return block_num_;
}
inline void BlockHeader::set_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_num_ = value;
  // @@protoc_insertion_point(field_set:BlockHeader.block_num)
}

// string previous_block_id = 2;
inline void BlockHeader::clear_previous_block_id() {
  previous_block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader::previous_block_id() const {
  // @@protoc_insertion_point(field_get:BlockHeader.previous_block_id)
  return previous_block_id_.GetNoArena();
}
inline void BlockHeader::set_previous_block_id(const std::string& value) {
  
  previous_block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BlockHeader.previous_block_id)
}
inline void BlockHeader::set_previous_block_id(std::string&& value) {
  
  previous_block_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockHeader.previous_block_id)
}
inline void BlockHeader::set_previous_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previous_block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockHeader.previous_block_id)
}
inline void BlockHeader::set_previous_block_id(const char* value, size_t size) {
  
  previous_block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockHeader.previous_block_id)
}
inline std::string* BlockHeader::mutable_previous_block_id() {
  
  // @@protoc_insertion_point(field_mutable:BlockHeader.previous_block_id)
  return previous_block_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader::release_previous_block_id() {
  // @@protoc_insertion_point(field_release:BlockHeader.previous_block_id)
  
  return previous_block_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_previous_block_id(std::string* previous_block_id) {
  if (previous_block_id != nullptr) {
    
  } else {
    
  }
  previous_block_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_block_id);
  // @@protoc_insertion_point(field_set_allocated:BlockHeader.previous_block_id)
}

// string signer_public_key = 3;
inline void BlockHeader::clear_signer_public_key() {
  signer_public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader::signer_public_key() const {
  // @@protoc_insertion_point(field_get:BlockHeader.signer_public_key)
  return signer_public_key_.GetNoArena();
}
inline void BlockHeader::set_signer_public_key(const std::string& value) {
  
  signer_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BlockHeader.signer_public_key)
}
inline void BlockHeader::set_signer_public_key(std::string&& value) {
  
  signer_public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockHeader.signer_public_key)
}
inline void BlockHeader::set_signer_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signer_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockHeader.signer_public_key)
}
inline void BlockHeader::set_signer_public_key(const char* value, size_t size) {
  
  signer_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockHeader.signer_public_key)
}
inline std::string* BlockHeader::mutable_signer_public_key() {
  
  // @@protoc_insertion_point(field_mutable:BlockHeader.signer_public_key)
  return signer_public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader::release_signer_public_key() {
  // @@protoc_insertion_point(field_release:BlockHeader.signer_public_key)
  
  return signer_public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_signer_public_key(std::string* signer_public_key) {
  if (signer_public_key != nullptr) {
    
  } else {
    
  }
  signer_public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signer_public_key);
  // @@protoc_insertion_point(field_set_allocated:BlockHeader.signer_public_key)
}

// repeated string batch_ids = 4;
inline int BlockHeader::batch_ids_size() const {
  return batch_ids_.size();
}
inline void BlockHeader::clear_batch_ids() {
  batch_ids_.Clear();
}
inline const std::string& BlockHeader::batch_ids(int index) const {
  // @@protoc_insertion_point(field_get:BlockHeader.batch_ids)
  return batch_ids_.Get(index);
}
inline std::string* BlockHeader::mutable_batch_ids(int index) {
  // @@protoc_insertion_point(field_mutable:BlockHeader.batch_ids)
  return batch_ids_.Mutable(index);
}
inline void BlockHeader::set_batch_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BlockHeader.batch_ids)
  batch_ids_.Mutable(index)->assign(value);
}
inline void BlockHeader::set_batch_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BlockHeader.batch_ids)
  batch_ids_.Mutable(index)->assign(std::move(value));
}
inline void BlockHeader::set_batch_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  batch_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BlockHeader.batch_ids)
}
inline void BlockHeader::set_batch_ids(int index, const char* value, size_t size) {
  batch_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BlockHeader.batch_ids)
}
inline std::string* BlockHeader::add_batch_ids() {
  // @@protoc_insertion_point(field_add_mutable:BlockHeader.batch_ids)
  return batch_ids_.Add();
}
inline void BlockHeader::add_batch_ids(const std::string& value) {
  batch_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BlockHeader.batch_ids)
}
inline void BlockHeader::add_batch_ids(std::string&& value) {
  batch_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BlockHeader.batch_ids)
}
inline void BlockHeader::add_batch_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  batch_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BlockHeader.batch_ids)
}
inline void BlockHeader::add_batch_ids(const char* value, size_t size) {
  batch_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BlockHeader.batch_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockHeader::batch_ids() const {
  // @@protoc_insertion_point(field_list:BlockHeader.batch_ids)
  return batch_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockHeader::mutable_batch_ids() {
  // @@protoc_insertion_point(field_mutable_list:BlockHeader.batch_ids)
  return &batch_ids_;
}

// bytes consensus = 5;
inline void BlockHeader::clear_consensus() {
  consensus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader::consensus() const {
  // @@protoc_insertion_point(field_get:BlockHeader.consensus)
  return consensus_.GetNoArena();
}
inline void BlockHeader::set_consensus(const std::string& value) {
  
  consensus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BlockHeader.consensus)
}
inline void BlockHeader::set_consensus(std::string&& value) {
  
  consensus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockHeader.consensus)
}
inline void BlockHeader::set_consensus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consensus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockHeader.consensus)
}
inline void BlockHeader::set_consensus(const void* value, size_t size) {
  
  consensus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockHeader.consensus)
}
inline std::string* BlockHeader::mutable_consensus() {
  
  // @@protoc_insertion_point(field_mutable:BlockHeader.consensus)
  return consensus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader::release_consensus() {
  // @@protoc_insertion_point(field_release:BlockHeader.consensus)
  
  return consensus_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_consensus(std::string* consensus) {
  if (consensus != nullptr) {
    
  } else {
    
  }
  consensus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consensus);
  // @@protoc_insertion_point(field_set_allocated:BlockHeader.consensus)
}

// string state_root_hash = 6;
inline void BlockHeader::clear_state_root_hash() {
  state_root_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader::state_root_hash() const {
  // @@protoc_insertion_point(field_get:BlockHeader.state_root_hash)
  return state_root_hash_.GetNoArena();
}
inline void BlockHeader::set_state_root_hash(const std::string& value) {
  
  state_root_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BlockHeader.state_root_hash)
}
inline void BlockHeader::set_state_root_hash(std::string&& value) {
  
  state_root_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockHeader.state_root_hash)
}
inline void BlockHeader::set_state_root_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_root_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockHeader.state_root_hash)
}
inline void BlockHeader::set_state_root_hash(const char* value, size_t size) {
  
  state_root_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockHeader.state_root_hash)
}
inline std::string* BlockHeader::mutable_state_root_hash() {
  
  // @@protoc_insertion_point(field_mutable:BlockHeader.state_root_hash)
  return state_root_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader::release_state_root_hash() {
  // @@protoc_insertion_point(field_release:BlockHeader.state_root_hash)
  
  return state_root_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_state_root_hash(std::string* state_root_hash) {
  if (state_root_hash != nullptr) {
    
  } else {
    
  }
  state_root_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_root_hash);
  // @@protoc_insertion_point(field_set_allocated:BlockHeader.state_root_hash)
}

// -------------------------------------------------------------------

// Block

// bytes header = 1;
inline void Block::clear_header() {
  header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Block::header() const {
  // @@protoc_insertion_point(field_get:Block.header)
  return header_.GetNoArena();
}
inline void Block::set_header(const std::string& value) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Block.header)
}
inline void Block::set_header(std::string&& value) {
  
  header_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Block.header)
}
inline void Block::set_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Block.header)
}
inline void Block::set_header(const void* value, size_t size) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Block.header)
}
inline std::string* Block::mutable_header() {
  
  // @@protoc_insertion_point(field_mutable:Block.header)
  return header_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Block::release_header() {
  // @@protoc_insertion_point(field_release:Block.header)
  
  return header_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:Block.header)
}

// string header_signature = 2;
inline void Block::clear_header_signature() {
  header_signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Block::header_signature() const {
  // @@protoc_insertion_point(field_get:Block.header_signature)
  return header_signature_.GetNoArena();
}
inline void Block::set_header_signature(const std::string& value) {
  
  header_signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Block.header_signature)
}
inline void Block::set_header_signature(std::string&& value) {
  
  header_signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Block.header_signature)
}
inline void Block::set_header_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Block.header_signature)
}
inline void Block::set_header_signature(const char* value, size_t size) {
  
  header_signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Block.header_signature)
}
inline std::string* Block::mutable_header_signature() {
  
  // @@protoc_insertion_point(field_mutable:Block.header_signature)
  return header_signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Block::release_header_signature() {
  // @@protoc_insertion_point(field_release:Block.header_signature)
  
  return header_signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_header_signature(std::string* header_signature) {
  if (header_signature != nullptr) {
    
  } else {
    
  }
  header_signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header_signature);
  // @@protoc_insertion_point(field_set_allocated:Block.header_signature)
}

// repeated .Batch batches = 3;
inline int Block::batches_size() const {
  return batches_.size();
}
inline ::Batch* Block::mutable_batches(int index) {
  // @@protoc_insertion_point(field_mutable:Block.batches)
  return batches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >*
Block::mutable_batches() {
  // @@protoc_insertion_point(field_mutable_list:Block.batches)
  return &batches_;
}
inline const ::Batch& Block::batches(int index) const {
  // @@protoc_insertion_point(field_get:Block.batches)
  return batches_.Get(index);
}
inline ::Batch* Block::add_batches() {
  // @@protoc_insertion_point(field_add:Block.batches)
  return batches_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >&
Block::batches() const {
  // @@protoc_insertion_point(field_list:Block.batches)
  return batches_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_block_2eproto
