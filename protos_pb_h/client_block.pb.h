// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fblock_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fblock_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "block.pb.h"
#include "client_list_control.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fblock_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fblock_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fblock_2eproto;
class ClientBlockGetByBatchIdRequest;
class ClientBlockGetByBatchIdRequestDefaultTypeInternal;
extern ClientBlockGetByBatchIdRequestDefaultTypeInternal _ClientBlockGetByBatchIdRequest_default_instance_;
class ClientBlockGetByIdRequest;
class ClientBlockGetByIdRequestDefaultTypeInternal;
extern ClientBlockGetByIdRequestDefaultTypeInternal _ClientBlockGetByIdRequest_default_instance_;
class ClientBlockGetByNumRequest;
class ClientBlockGetByNumRequestDefaultTypeInternal;
extern ClientBlockGetByNumRequestDefaultTypeInternal _ClientBlockGetByNumRequest_default_instance_;
class ClientBlockGetByTransactionIdRequest;
class ClientBlockGetByTransactionIdRequestDefaultTypeInternal;
extern ClientBlockGetByTransactionIdRequestDefaultTypeInternal _ClientBlockGetByTransactionIdRequest_default_instance_;
class ClientBlockGetResponse;
class ClientBlockGetResponseDefaultTypeInternal;
extern ClientBlockGetResponseDefaultTypeInternal _ClientBlockGetResponse_default_instance_;
class ClientBlockListRequest;
class ClientBlockListRequestDefaultTypeInternal;
extern ClientBlockListRequestDefaultTypeInternal _ClientBlockListRequest_default_instance_;
class ClientBlockListResponse;
class ClientBlockListResponseDefaultTypeInternal;
extern ClientBlockListResponseDefaultTypeInternal _ClientBlockListResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientBlockGetByBatchIdRequest* Arena::CreateMaybeMessage<::ClientBlockGetByBatchIdRequest>(Arena*);
template<> ::ClientBlockGetByIdRequest* Arena::CreateMaybeMessage<::ClientBlockGetByIdRequest>(Arena*);
template<> ::ClientBlockGetByNumRequest* Arena::CreateMaybeMessage<::ClientBlockGetByNumRequest>(Arena*);
template<> ::ClientBlockGetByTransactionIdRequest* Arena::CreateMaybeMessage<::ClientBlockGetByTransactionIdRequest>(Arena*);
template<> ::ClientBlockGetResponse* Arena::CreateMaybeMessage<::ClientBlockGetResponse>(Arena*);
template<> ::ClientBlockListRequest* Arena::CreateMaybeMessage<::ClientBlockListRequest>(Arena*);
template<> ::ClientBlockListResponse* Arena::CreateMaybeMessage<::ClientBlockListResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ClientBlockListResponse_Status : int {
  ClientBlockListResponse_Status_STATUS_UNSET = 0,
  ClientBlockListResponse_Status_OK = 1,
  ClientBlockListResponse_Status_INTERNAL_ERROR = 2,
  ClientBlockListResponse_Status_NOT_READY = 3,
  ClientBlockListResponse_Status_NO_ROOT = 4,
  ClientBlockListResponse_Status_NO_RESOURCE = 5,
  ClientBlockListResponse_Status_INVALID_PAGING = 6,
  ClientBlockListResponse_Status_INVALID_SORT = 7,
  ClientBlockListResponse_Status_INVALID_ID = 8,
  ClientBlockListResponse_Status_ClientBlockListResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientBlockListResponse_Status_ClientBlockListResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientBlockListResponse_Status_IsValid(int value);
constexpr ClientBlockListResponse_Status ClientBlockListResponse_Status_Status_MIN = ClientBlockListResponse_Status_STATUS_UNSET;
constexpr ClientBlockListResponse_Status ClientBlockListResponse_Status_Status_MAX = ClientBlockListResponse_Status_INVALID_ID;
constexpr int ClientBlockListResponse_Status_Status_ARRAYSIZE = ClientBlockListResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBlockListResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientBlockListResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientBlockListResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientBlockListResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientBlockListResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientBlockListResponse_Status_Parse(
    const std::string& name, ClientBlockListResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientBlockListResponse_Status>(
    ClientBlockListResponse_Status_descriptor(), name, value);
}
enum ClientBlockGetResponse_Status : int {
  ClientBlockGetResponse_Status_STATUS_UNSET = 0,
  ClientBlockGetResponse_Status_OK = 1,
  ClientBlockGetResponse_Status_INTERNAL_ERROR = 2,
  ClientBlockGetResponse_Status_NO_RESOURCE = 5,
  ClientBlockGetResponse_Status_INVALID_ID = 8,
  ClientBlockGetResponse_Status_ClientBlockGetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientBlockGetResponse_Status_ClientBlockGetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientBlockGetResponse_Status_IsValid(int value);
constexpr ClientBlockGetResponse_Status ClientBlockGetResponse_Status_Status_MIN = ClientBlockGetResponse_Status_STATUS_UNSET;
constexpr ClientBlockGetResponse_Status ClientBlockGetResponse_Status_Status_MAX = ClientBlockGetResponse_Status_INVALID_ID;
constexpr int ClientBlockGetResponse_Status_Status_ARRAYSIZE = ClientBlockGetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBlockGetResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientBlockGetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientBlockGetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientBlockGetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientBlockGetResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientBlockGetResponse_Status_Parse(
    const std::string& name, ClientBlockGetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientBlockGetResponse_Status>(
    ClientBlockGetResponse_Status_descriptor(), name, value);
}
// ===================================================================

class ClientBlockListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBlockListRequest) */ {
 public:
  ClientBlockListRequest();
  virtual ~ClientBlockListRequest();

  ClientBlockListRequest(const ClientBlockListRequest& from);
  ClientBlockListRequest(ClientBlockListRequest&& from) noexcept
    : ClientBlockListRequest() {
    *this = ::std::move(from);
  }

  inline ClientBlockListRequest& operator=(const ClientBlockListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBlockListRequest& operator=(ClientBlockListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBlockListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBlockListRequest* internal_default_instance() {
    return reinterpret_cast<const ClientBlockListRequest*>(
               &_ClientBlockListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientBlockListRequest* other);
  friend void swap(ClientBlockListRequest& a, ClientBlockListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBlockListRequest* New() const final {
    return CreateMaybeMessage<ClientBlockListRequest>(nullptr);
  }

  ClientBlockListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBlockListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBlockListRequest& from);
  void MergeFrom(const ClientBlockListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBlockListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBlockListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fblock_2eproto);
    return ::descriptor_table_client_5fblock_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string block_ids = 2;
  int block_ids_size() const;
  void clear_block_ids();
  static const int kBlockIdsFieldNumber = 2;
  const std::string& block_ids(int index) const;
  std::string* mutable_block_ids(int index);
  void set_block_ids(int index, const std::string& value);
  void set_block_ids(int index, std::string&& value);
  void set_block_ids(int index, const char* value);
  void set_block_ids(int index, const char* value, size_t size);
  std::string* add_block_ids();
  void add_block_ids(const std::string& value);
  void add_block_ids(std::string&& value);
  void add_block_ids(const char* value);
  void add_block_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& block_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_block_ids();

  // repeated .ClientSortControls sorting = 4;
  int sorting_size() const;
  void clear_sorting();
  static const int kSortingFieldNumber = 4;
  ::ClientSortControls* mutable_sorting(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >*
      mutable_sorting();
  const ::ClientSortControls& sorting(int index) const;
  ::ClientSortControls* add_sorting();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >&
      sorting() const;

  // string head_id = 1;
  void clear_head_id();
  static const int kHeadIdFieldNumber = 1;
  const std::string& head_id() const;
  void set_head_id(const std::string& value);
  void set_head_id(std::string&& value);
  void set_head_id(const char* value);
  void set_head_id(const char* value, size_t size);
  std::string* mutable_head_id();
  std::string* release_head_id();
  void set_allocated_head_id(std::string* head_id);

  // .ClientPagingControls paging = 3;
  bool has_paging() const;
  void clear_paging();
  static const int kPagingFieldNumber = 3;
  const ::ClientPagingControls& paging() const;
  ::ClientPagingControls* release_paging();
  ::ClientPagingControls* mutable_paging();
  void set_allocated_paging(::ClientPagingControls* paging);

  // @@protoc_insertion_point(class_scope:ClientBlockListRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> block_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls > sorting_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_id_;
  ::ClientPagingControls* paging_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fblock_2eproto;
};
// -------------------------------------------------------------------

class ClientBlockListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBlockListResponse) */ {
 public:
  ClientBlockListResponse();
  virtual ~ClientBlockListResponse();

  ClientBlockListResponse(const ClientBlockListResponse& from);
  ClientBlockListResponse(ClientBlockListResponse&& from) noexcept
    : ClientBlockListResponse() {
    *this = ::std::move(from);
  }

  inline ClientBlockListResponse& operator=(const ClientBlockListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBlockListResponse& operator=(ClientBlockListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBlockListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBlockListResponse* internal_default_instance() {
    return reinterpret_cast<const ClientBlockListResponse*>(
               &_ClientBlockListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientBlockListResponse* other);
  friend void swap(ClientBlockListResponse& a, ClientBlockListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBlockListResponse* New() const final {
    return CreateMaybeMessage<ClientBlockListResponse>(nullptr);
  }

  ClientBlockListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBlockListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBlockListResponse& from);
  void MergeFrom(const ClientBlockListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBlockListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBlockListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fblock_2eproto);
    return ::descriptor_table_client_5fblock_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientBlockListResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientBlockListResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientBlockListResponse_Status_OK;
  static constexpr Status INTERNAL_ERROR =
    ClientBlockListResponse_Status_INTERNAL_ERROR;
  static constexpr Status NOT_READY =
    ClientBlockListResponse_Status_NOT_READY;
  static constexpr Status NO_ROOT =
    ClientBlockListResponse_Status_NO_ROOT;
  static constexpr Status NO_RESOURCE =
    ClientBlockListResponse_Status_NO_RESOURCE;
  static constexpr Status INVALID_PAGING =
    ClientBlockListResponse_Status_INVALID_PAGING;
  static constexpr Status INVALID_SORT =
    ClientBlockListResponse_Status_INVALID_SORT;
  static constexpr Status INVALID_ID =
    ClientBlockListResponse_Status_INVALID_ID;
  static inline bool Status_IsValid(int value) {
    return ClientBlockListResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientBlockListResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientBlockListResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientBlockListResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientBlockListResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientBlockListResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientBlockListResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Block blocks = 2;
  int blocks_size() const;
  void clear_blocks();
  static const int kBlocksFieldNumber = 2;
  ::Block* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Block >*
      mutable_blocks();
  const ::Block& blocks(int index) const;
  ::Block* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Block >&
      blocks() const;

  // string head_id = 3;
  void clear_head_id();
  static const int kHeadIdFieldNumber = 3;
  const std::string& head_id() const;
  void set_head_id(const std::string& value);
  void set_head_id(std::string&& value);
  void set_head_id(const char* value);
  void set_head_id(const char* value, size_t size);
  std::string* mutable_head_id();
  std::string* release_head_id();
  void set_allocated_head_id(std::string* head_id);

  // .ClientPagingResponse paging = 4;
  bool has_paging() const;
  void clear_paging();
  static const int kPagingFieldNumber = 4;
  const ::ClientPagingResponse& paging() const;
  ::ClientPagingResponse* release_paging();
  ::ClientPagingResponse* mutable_paging();
  void set_allocated_paging(::ClientPagingResponse* paging);

  // .ClientBlockListResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientBlockListResponse_Status status() const;
  void set_status(::ClientBlockListResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientBlockListResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Block > blocks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_id_;
  ::ClientPagingResponse* paging_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fblock_2eproto;
};
// -------------------------------------------------------------------

class ClientBlockGetByIdRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBlockGetByIdRequest) */ {
 public:
  ClientBlockGetByIdRequest();
  virtual ~ClientBlockGetByIdRequest();

  ClientBlockGetByIdRequest(const ClientBlockGetByIdRequest& from);
  ClientBlockGetByIdRequest(ClientBlockGetByIdRequest&& from) noexcept
    : ClientBlockGetByIdRequest() {
    *this = ::std::move(from);
  }

  inline ClientBlockGetByIdRequest& operator=(const ClientBlockGetByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBlockGetByIdRequest& operator=(ClientBlockGetByIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBlockGetByIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBlockGetByIdRequest* internal_default_instance() {
    return reinterpret_cast<const ClientBlockGetByIdRequest*>(
               &_ClientBlockGetByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClientBlockGetByIdRequest* other);
  friend void swap(ClientBlockGetByIdRequest& a, ClientBlockGetByIdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBlockGetByIdRequest* New() const final {
    return CreateMaybeMessage<ClientBlockGetByIdRequest>(nullptr);
  }

  ClientBlockGetByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBlockGetByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBlockGetByIdRequest& from);
  void MergeFrom(const ClientBlockGetByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBlockGetByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBlockGetByIdRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fblock_2eproto);
    return ::descriptor_table_client_5fblock_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const char* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);

  // @@protoc_insertion_point(class_scope:ClientBlockGetByIdRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fblock_2eproto;
};
// -------------------------------------------------------------------

class ClientBlockGetByNumRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBlockGetByNumRequest) */ {
 public:
  ClientBlockGetByNumRequest();
  virtual ~ClientBlockGetByNumRequest();

  ClientBlockGetByNumRequest(const ClientBlockGetByNumRequest& from);
  ClientBlockGetByNumRequest(ClientBlockGetByNumRequest&& from) noexcept
    : ClientBlockGetByNumRequest() {
    *this = ::std::move(from);
  }

  inline ClientBlockGetByNumRequest& operator=(const ClientBlockGetByNumRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBlockGetByNumRequest& operator=(ClientBlockGetByNumRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBlockGetByNumRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBlockGetByNumRequest* internal_default_instance() {
    return reinterpret_cast<const ClientBlockGetByNumRequest*>(
               &_ClientBlockGetByNumRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ClientBlockGetByNumRequest* other);
  friend void swap(ClientBlockGetByNumRequest& a, ClientBlockGetByNumRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBlockGetByNumRequest* New() const final {
    return CreateMaybeMessage<ClientBlockGetByNumRequest>(nullptr);
  }

  ClientBlockGetByNumRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBlockGetByNumRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBlockGetByNumRequest& from);
  void MergeFrom(const ClientBlockGetByNumRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBlockGetByNumRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBlockGetByNumRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fblock_2eproto);
    return ::descriptor_table_client_5fblock_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 block_num = 1;
  void clear_block_num();
  static const int kBlockNumFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_num() const;
  void set_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:ClientBlockGetByNumRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fblock_2eproto;
};
// -------------------------------------------------------------------

class ClientBlockGetByTransactionIdRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBlockGetByTransactionIdRequest) */ {
 public:
  ClientBlockGetByTransactionIdRequest();
  virtual ~ClientBlockGetByTransactionIdRequest();

  ClientBlockGetByTransactionIdRequest(const ClientBlockGetByTransactionIdRequest& from);
  ClientBlockGetByTransactionIdRequest(ClientBlockGetByTransactionIdRequest&& from) noexcept
    : ClientBlockGetByTransactionIdRequest() {
    *this = ::std::move(from);
  }

  inline ClientBlockGetByTransactionIdRequest& operator=(const ClientBlockGetByTransactionIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBlockGetByTransactionIdRequest& operator=(ClientBlockGetByTransactionIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBlockGetByTransactionIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBlockGetByTransactionIdRequest* internal_default_instance() {
    return reinterpret_cast<const ClientBlockGetByTransactionIdRequest*>(
               &_ClientBlockGetByTransactionIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ClientBlockGetByTransactionIdRequest* other);
  friend void swap(ClientBlockGetByTransactionIdRequest& a, ClientBlockGetByTransactionIdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBlockGetByTransactionIdRequest* New() const final {
    return CreateMaybeMessage<ClientBlockGetByTransactionIdRequest>(nullptr);
  }

  ClientBlockGetByTransactionIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBlockGetByTransactionIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBlockGetByTransactionIdRequest& from);
  void MergeFrom(const ClientBlockGetByTransactionIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBlockGetByTransactionIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBlockGetByTransactionIdRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fblock_2eproto);
    return ::descriptor_table_client_5fblock_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string transaction_id = 1;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 1;
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);

  // @@protoc_insertion_point(class_scope:ClientBlockGetByTransactionIdRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fblock_2eproto;
};
// -------------------------------------------------------------------

class ClientBlockGetByBatchIdRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBlockGetByBatchIdRequest) */ {
 public:
  ClientBlockGetByBatchIdRequest();
  virtual ~ClientBlockGetByBatchIdRequest();

  ClientBlockGetByBatchIdRequest(const ClientBlockGetByBatchIdRequest& from);
  ClientBlockGetByBatchIdRequest(ClientBlockGetByBatchIdRequest&& from) noexcept
    : ClientBlockGetByBatchIdRequest() {
    *this = ::std::move(from);
  }

  inline ClientBlockGetByBatchIdRequest& operator=(const ClientBlockGetByBatchIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBlockGetByBatchIdRequest& operator=(ClientBlockGetByBatchIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBlockGetByBatchIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBlockGetByBatchIdRequest* internal_default_instance() {
    return reinterpret_cast<const ClientBlockGetByBatchIdRequest*>(
               &_ClientBlockGetByBatchIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ClientBlockGetByBatchIdRequest* other);
  friend void swap(ClientBlockGetByBatchIdRequest& a, ClientBlockGetByBatchIdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBlockGetByBatchIdRequest* New() const final {
    return CreateMaybeMessage<ClientBlockGetByBatchIdRequest>(nullptr);
  }

  ClientBlockGetByBatchIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBlockGetByBatchIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBlockGetByBatchIdRequest& from);
  void MergeFrom(const ClientBlockGetByBatchIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBlockGetByBatchIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBlockGetByBatchIdRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fblock_2eproto);
    return ::descriptor_table_client_5fblock_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string batch_id = 1;
  void clear_batch_id();
  static const int kBatchIdFieldNumber = 1;
  const std::string& batch_id() const;
  void set_batch_id(const std::string& value);
  void set_batch_id(std::string&& value);
  void set_batch_id(const char* value);
  void set_batch_id(const char* value, size_t size);
  std::string* mutable_batch_id();
  std::string* release_batch_id();
  void set_allocated_batch_id(std::string* batch_id);

  // @@protoc_insertion_point(class_scope:ClientBlockGetByBatchIdRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr batch_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fblock_2eproto;
};
// -------------------------------------------------------------------

class ClientBlockGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBlockGetResponse) */ {
 public:
  ClientBlockGetResponse();
  virtual ~ClientBlockGetResponse();

  ClientBlockGetResponse(const ClientBlockGetResponse& from);
  ClientBlockGetResponse(ClientBlockGetResponse&& from) noexcept
    : ClientBlockGetResponse() {
    *this = ::std::move(from);
  }

  inline ClientBlockGetResponse& operator=(const ClientBlockGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBlockGetResponse& operator=(ClientBlockGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBlockGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBlockGetResponse* internal_default_instance() {
    return reinterpret_cast<const ClientBlockGetResponse*>(
               &_ClientBlockGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ClientBlockGetResponse* other);
  friend void swap(ClientBlockGetResponse& a, ClientBlockGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBlockGetResponse* New() const final {
    return CreateMaybeMessage<ClientBlockGetResponse>(nullptr);
  }

  ClientBlockGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBlockGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBlockGetResponse& from);
  void MergeFrom(const ClientBlockGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBlockGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBlockGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fblock_2eproto);
    return ::descriptor_table_client_5fblock_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientBlockGetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientBlockGetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientBlockGetResponse_Status_OK;
  static constexpr Status INTERNAL_ERROR =
    ClientBlockGetResponse_Status_INTERNAL_ERROR;
  static constexpr Status NO_RESOURCE =
    ClientBlockGetResponse_Status_NO_RESOURCE;
  static constexpr Status INVALID_ID =
    ClientBlockGetResponse_Status_INVALID_ID;
  static inline bool Status_IsValid(int value) {
    return ClientBlockGetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientBlockGetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientBlockGetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientBlockGetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientBlockGetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientBlockGetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientBlockGetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Block block = 2;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 2;
  const ::Block& block() const;
  ::Block* release_block();
  ::Block* mutable_block();
  void set_allocated_block(::Block* block);

  // .ClientBlockGetResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientBlockGetResponse_Status status() const;
  void set_status(::ClientBlockGetResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientBlockGetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Block* block_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fblock_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientBlockListRequest

// string head_id = 1;
inline void ClientBlockListRequest::clear_head_id() {
  head_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientBlockListRequest::head_id() const {
  // @@protoc_insertion_point(field_get:ClientBlockListRequest.head_id)
  return head_id_.GetNoArena();
}
inline void ClientBlockListRequest::set_head_id(const std::string& value) {
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientBlockListRequest.head_id)
}
inline void ClientBlockListRequest::set_head_id(std::string&& value) {
  
  head_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientBlockListRequest.head_id)
}
inline void ClientBlockListRequest::set_head_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientBlockListRequest.head_id)
}
inline void ClientBlockListRequest::set_head_id(const char* value, size_t size) {
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientBlockListRequest.head_id)
}
inline std::string* ClientBlockListRequest::mutable_head_id() {
  
  // @@protoc_insertion_point(field_mutable:ClientBlockListRequest.head_id)
  return head_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientBlockListRequest::release_head_id() {
  // @@protoc_insertion_point(field_release:ClientBlockListRequest.head_id)
  
  return head_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientBlockListRequest::set_allocated_head_id(std::string* head_id) {
  if (head_id != nullptr) {
    
  } else {
    
  }
  head_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head_id);
  // @@protoc_insertion_point(field_set_allocated:ClientBlockListRequest.head_id)
}

// repeated string block_ids = 2;
inline int ClientBlockListRequest::block_ids_size() const {
  return block_ids_.size();
}
inline void ClientBlockListRequest::clear_block_ids() {
  block_ids_.Clear();
}
inline const std::string& ClientBlockListRequest::block_ids(int index) const {
  // @@protoc_insertion_point(field_get:ClientBlockListRequest.block_ids)
  return block_ids_.Get(index);
}
inline std::string* ClientBlockListRequest::mutable_block_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ClientBlockListRequest.block_ids)
  return block_ids_.Mutable(index);
}
inline void ClientBlockListRequest::set_block_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientBlockListRequest.block_ids)
  block_ids_.Mutable(index)->assign(value);
}
inline void ClientBlockListRequest::set_block_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientBlockListRequest.block_ids)
  block_ids_.Mutable(index)->assign(std::move(value));
}
inline void ClientBlockListRequest::set_block_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientBlockListRequest.block_ids)
}
inline void ClientBlockListRequest::set_block_ids(int index, const char* value, size_t size) {
  block_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientBlockListRequest.block_ids)
}
inline std::string* ClientBlockListRequest::add_block_ids() {
  // @@protoc_insertion_point(field_add_mutable:ClientBlockListRequest.block_ids)
  return block_ids_.Add();
}
inline void ClientBlockListRequest::add_block_ids(const std::string& value) {
  block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientBlockListRequest.block_ids)
}
inline void ClientBlockListRequest::add_block_ids(std::string&& value) {
  block_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientBlockListRequest.block_ids)
}
inline void ClientBlockListRequest::add_block_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientBlockListRequest.block_ids)
}
inline void ClientBlockListRequest::add_block_ids(const char* value, size_t size) {
  block_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientBlockListRequest.block_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientBlockListRequest::block_ids() const {
  // @@protoc_insertion_point(field_list:ClientBlockListRequest.block_ids)
  return block_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientBlockListRequest::mutable_block_ids() {
  // @@protoc_insertion_point(field_mutable_list:ClientBlockListRequest.block_ids)
  return &block_ids_;
}

// .ClientPagingControls paging = 3;
inline bool ClientBlockListRequest::has_paging() const {
  return this != internal_default_instance() && paging_ != nullptr;
}
inline const ::ClientPagingControls& ClientBlockListRequest::paging() const {
  const ::ClientPagingControls* p = paging_;
  // @@protoc_insertion_point(field_get:ClientBlockListRequest.paging)
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientPagingControls*>(
      &::_ClientPagingControls_default_instance_);
}
inline ::ClientPagingControls* ClientBlockListRequest::release_paging() {
  // @@protoc_insertion_point(field_release:ClientBlockListRequest.paging)
  
  ::ClientPagingControls* temp = paging_;
  paging_ = nullptr;
  return temp;
}
inline ::ClientPagingControls* ClientBlockListRequest::mutable_paging() {
  
  if (paging_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientPagingControls>(GetArenaNoVirtual());
    paging_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ClientBlockListRequest.paging)
  return paging_;
}
inline void ClientBlockListRequest::set_allocated_paging(::ClientPagingControls* paging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(paging_);
  }
  if (paging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      paging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paging, submessage_arena);
    }
    
  } else {
    
  }
  paging_ = paging;
  // @@protoc_insertion_point(field_set_allocated:ClientBlockListRequest.paging)
}

// repeated .ClientSortControls sorting = 4;
inline int ClientBlockListRequest::sorting_size() const {
  return sorting_.size();
}
inline ::ClientSortControls* ClientBlockListRequest::mutable_sorting(int index) {
  // @@protoc_insertion_point(field_mutable:ClientBlockListRequest.sorting)
  return sorting_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >*
ClientBlockListRequest::mutable_sorting() {
  // @@protoc_insertion_point(field_mutable_list:ClientBlockListRequest.sorting)
  return &sorting_;
}
inline const ::ClientSortControls& ClientBlockListRequest::sorting(int index) const {
  // @@protoc_insertion_point(field_get:ClientBlockListRequest.sorting)
  return sorting_.Get(index);
}
inline ::ClientSortControls* ClientBlockListRequest::add_sorting() {
  // @@protoc_insertion_point(field_add:ClientBlockListRequest.sorting)
  return sorting_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >&
ClientBlockListRequest::sorting() const {
  // @@protoc_insertion_point(field_list:ClientBlockListRequest.sorting)
  return sorting_;
}

// -------------------------------------------------------------------

// ClientBlockListResponse

// .ClientBlockListResponse.Status status = 1;
inline void ClientBlockListResponse::clear_status() {
  status_ = 0;
}
inline ::ClientBlockListResponse_Status ClientBlockListResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientBlockListResponse.status)
  return static_cast< ::ClientBlockListResponse_Status >(status_);
}
inline void ClientBlockListResponse::set_status(::ClientBlockListResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientBlockListResponse.status)
}

// repeated .Block blocks = 2;
inline int ClientBlockListResponse::blocks_size() const {
  return blocks_.size();
}
inline ::Block* ClientBlockListResponse::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:ClientBlockListResponse.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Block >*
ClientBlockListResponse::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:ClientBlockListResponse.blocks)
  return &blocks_;
}
inline const ::Block& ClientBlockListResponse::blocks(int index) const {
  // @@protoc_insertion_point(field_get:ClientBlockListResponse.blocks)
  return blocks_.Get(index);
}
inline ::Block* ClientBlockListResponse::add_blocks() {
  // @@protoc_insertion_point(field_add:ClientBlockListResponse.blocks)
  return blocks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Block >&
ClientBlockListResponse::blocks() const {
  // @@protoc_insertion_point(field_list:ClientBlockListResponse.blocks)
  return blocks_;
}

// string head_id = 3;
inline void ClientBlockListResponse::clear_head_id() {
  head_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientBlockListResponse::head_id() const {
  // @@protoc_insertion_point(field_get:ClientBlockListResponse.head_id)
  return head_id_.GetNoArena();
}
inline void ClientBlockListResponse::set_head_id(const std::string& value) {
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientBlockListResponse.head_id)
}
inline void ClientBlockListResponse::set_head_id(std::string&& value) {
  
  head_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientBlockListResponse.head_id)
}
inline void ClientBlockListResponse::set_head_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientBlockListResponse.head_id)
}
inline void ClientBlockListResponse::set_head_id(const char* value, size_t size) {
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientBlockListResponse.head_id)
}
inline std::string* ClientBlockListResponse::mutable_head_id() {
  
  // @@protoc_insertion_point(field_mutable:ClientBlockListResponse.head_id)
  return head_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientBlockListResponse::release_head_id() {
  // @@protoc_insertion_point(field_release:ClientBlockListResponse.head_id)
  
  return head_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientBlockListResponse::set_allocated_head_id(std::string* head_id) {
  if (head_id != nullptr) {
    
  } else {
    
  }
  head_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head_id);
  // @@protoc_insertion_point(field_set_allocated:ClientBlockListResponse.head_id)
}

// .ClientPagingResponse paging = 4;
inline bool ClientBlockListResponse::has_paging() const {
  return this != internal_default_instance() && paging_ != nullptr;
}
inline const ::ClientPagingResponse& ClientBlockListResponse::paging() const {
  const ::ClientPagingResponse* p = paging_;
  // @@protoc_insertion_point(field_get:ClientBlockListResponse.paging)
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientPagingResponse*>(
      &::_ClientPagingResponse_default_instance_);
}
inline ::ClientPagingResponse* ClientBlockListResponse::release_paging() {
  // @@protoc_insertion_point(field_release:ClientBlockListResponse.paging)
  
  ::ClientPagingResponse* temp = paging_;
  paging_ = nullptr;
  return temp;
}
inline ::ClientPagingResponse* ClientBlockListResponse::mutable_paging() {
  
  if (paging_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientPagingResponse>(GetArenaNoVirtual());
    paging_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ClientBlockListResponse.paging)
  return paging_;
}
inline void ClientBlockListResponse::set_allocated_paging(::ClientPagingResponse* paging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(paging_);
  }
  if (paging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      paging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paging, submessage_arena);
    }
    
  } else {
    
  }
  paging_ = paging;
  // @@protoc_insertion_point(field_set_allocated:ClientBlockListResponse.paging)
}

// -------------------------------------------------------------------

// ClientBlockGetByIdRequest

// string block_id = 1;
inline void ClientBlockGetByIdRequest::clear_block_id() {
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientBlockGetByIdRequest::block_id() const {
  // @@protoc_insertion_point(field_get:ClientBlockGetByIdRequest.block_id)
  return block_id_.GetNoArena();
}
inline void ClientBlockGetByIdRequest::set_block_id(const std::string& value) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientBlockGetByIdRequest.block_id)
}
inline void ClientBlockGetByIdRequest::set_block_id(std::string&& value) {
  
  block_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientBlockGetByIdRequest.block_id)
}
inline void ClientBlockGetByIdRequest::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientBlockGetByIdRequest.block_id)
}
inline void ClientBlockGetByIdRequest::set_block_id(const char* value, size_t size) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientBlockGetByIdRequest.block_id)
}
inline std::string* ClientBlockGetByIdRequest::mutable_block_id() {
  
  // @@protoc_insertion_point(field_mutable:ClientBlockGetByIdRequest.block_id)
  return block_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientBlockGetByIdRequest::release_block_id() {
  // @@protoc_insertion_point(field_release:ClientBlockGetByIdRequest.block_id)
  
  return block_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientBlockGetByIdRequest::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id);
  // @@protoc_insertion_point(field_set_allocated:ClientBlockGetByIdRequest.block_id)
}

// -------------------------------------------------------------------

// ClientBlockGetByNumRequest

// uint64 block_num = 1;
inline void ClientBlockGetByNumRequest::clear_block_num() {
  block_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientBlockGetByNumRequest::block_num() const {
  // @@protoc_insertion_point(field_get:ClientBlockGetByNumRequest.block_num)
  return block_num_;
}
inline void ClientBlockGetByNumRequest::set_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_num_ = value;
  // @@protoc_insertion_point(field_set:ClientBlockGetByNumRequest.block_num)
}

// -------------------------------------------------------------------

// ClientBlockGetByTransactionIdRequest

// string transaction_id = 1;
inline void ClientBlockGetByTransactionIdRequest::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientBlockGetByTransactionIdRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:ClientBlockGetByTransactionIdRequest.transaction_id)
  return transaction_id_.GetNoArena();
}
inline void ClientBlockGetByTransactionIdRequest::set_transaction_id(const std::string& value) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientBlockGetByTransactionIdRequest.transaction_id)
}
inline void ClientBlockGetByTransactionIdRequest::set_transaction_id(std::string&& value) {
  
  transaction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientBlockGetByTransactionIdRequest.transaction_id)
}
inline void ClientBlockGetByTransactionIdRequest::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientBlockGetByTransactionIdRequest.transaction_id)
}
inline void ClientBlockGetByTransactionIdRequest::set_transaction_id(const char* value, size_t size) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientBlockGetByTransactionIdRequest.transaction_id)
}
inline std::string* ClientBlockGetByTransactionIdRequest::mutable_transaction_id() {
  
  // @@protoc_insertion_point(field_mutable:ClientBlockGetByTransactionIdRequest.transaction_id)
  return transaction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientBlockGetByTransactionIdRequest::release_transaction_id() {
  // @@protoc_insertion_point(field_release:ClientBlockGetByTransactionIdRequest.transaction_id)
  
  return transaction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientBlockGetByTransactionIdRequest::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:ClientBlockGetByTransactionIdRequest.transaction_id)
}

// -------------------------------------------------------------------

// ClientBlockGetByBatchIdRequest

// string batch_id = 1;
inline void ClientBlockGetByBatchIdRequest::clear_batch_id() {
  batch_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientBlockGetByBatchIdRequest::batch_id() const {
  // @@protoc_insertion_point(field_get:ClientBlockGetByBatchIdRequest.batch_id)
  return batch_id_.GetNoArena();
}
inline void ClientBlockGetByBatchIdRequest::set_batch_id(const std::string& value) {
  
  batch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientBlockGetByBatchIdRequest.batch_id)
}
inline void ClientBlockGetByBatchIdRequest::set_batch_id(std::string&& value) {
  
  batch_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientBlockGetByBatchIdRequest.batch_id)
}
inline void ClientBlockGetByBatchIdRequest::set_batch_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  batch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientBlockGetByBatchIdRequest.batch_id)
}
inline void ClientBlockGetByBatchIdRequest::set_batch_id(const char* value, size_t size) {
  
  batch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientBlockGetByBatchIdRequest.batch_id)
}
inline std::string* ClientBlockGetByBatchIdRequest::mutable_batch_id() {
  
  // @@protoc_insertion_point(field_mutable:ClientBlockGetByBatchIdRequest.batch_id)
  return batch_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientBlockGetByBatchIdRequest::release_batch_id() {
  // @@protoc_insertion_point(field_release:ClientBlockGetByBatchIdRequest.batch_id)
  
  return batch_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientBlockGetByBatchIdRequest::set_allocated_batch_id(std::string* batch_id) {
  if (batch_id != nullptr) {
    
  } else {
    
  }
  batch_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), batch_id);
  // @@protoc_insertion_point(field_set_allocated:ClientBlockGetByBatchIdRequest.batch_id)
}

// -------------------------------------------------------------------

// ClientBlockGetResponse

// .ClientBlockGetResponse.Status status = 1;
inline void ClientBlockGetResponse::clear_status() {
  status_ = 0;
}
inline ::ClientBlockGetResponse_Status ClientBlockGetResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientBlockGetResponse.status)
  return static_cast< ::ClientBlockGetResponse_Status >(status_);
}
inline void ClientBlockGetResponse::set_status(::ClientBlockGetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientBlockGetResponse.status)
}

// .Block block = 2;
inline bool ClientBlockGetResponse::has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline const ::Block& ClientBlockGetResponse::block() const {
  const ::Block* p = block_;
  // @@protoc_insertion_point(field_get:ClientBlockGetResponse.block)
  return p != nullptr ? *p : *reinterpret_cast<const ::Block*>(
      &::_Block_default_instance_);
}
inline ::Block* ClientBlockGetResponse::release_block() {
  // @@protoc_insertion_point(field_release:ClientBlockGetResponse.block)
  
  ::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::Block* ClientBlockGetResponse::mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::Block>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ClientBlockGetResponse.block)
  return block_;
}
inline void ClientBlockGetResponse::set_allocated_block(::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:ClientBlockGetResponse.block)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClientBlockListResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientBlockListResponse_Status>() {
  return ::ClientBlockListResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ClientBlockGetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientBlockGetResponse_Status>() {
  return ::ClientBlockGetResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fblock_2eproto
