// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_events_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_events_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_events_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_events_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_events_2eproto;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventFilter;
class EventFilterDefaultTypeInternal;
extern EventFilterDefaultTypeInternal _EventFilter_default_instance_;
class EventList;
class EventListDefaultTypeInternal;
extern EventListDefaultTypeInternal _EventList_default_instance_;
class EventSubscription;
class EventSubscriptionDefaultTypeInternal;
extern EventSubscriptionDefaultTypeInternal _EventSubscription_default_instance_;
class Event_Attribute;
class Event_AttributeDefaultTypeInternal;
extern Event_AttributeDefaultTypeInternal _Event_Attribute_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Event* Arena::CreateMaybeMessage<::Event>(Arena*);
template<> ::EventFilter* Arena::CreateMaybeMessage<::EventFilter>(Arena*);
template<> ::EventList* Arena::CreateMaybeMessage<::EventList>(Arena*);
template<> ::EventSubscription* Arena::CreateMaybeMessage<::EventSubscription>(Arena*);
template<> ::Event_Attribute* Arena::CreateMaybeMessage<::Event_Attribute>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EventFilter_FilterType : int {
  EventFilter_FilterType_FILTER_TYPE_UNSET = 0,
  EventFilter_FilterType_SIMPLE_ANY = 1,
  EventFilter_FilterType_SIMPLE_ALL = 2,
  EventFilter_FilterType_REGEX_ANY = 3,
  EventFilter_FilterType_REGEX_ALL = 4,
  EventFilter_FilterType_EventFilter_FilterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EventFilter_FilterType_EventFilter_FilterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EventFilter_FilterType_IsValid(int value);
constexpr EventFilter_FilterType EventFilter_FilterType_FilterType_MIN = EventFilter_FilterType_FILTER_TYPE_UNSET;
constexpr EventFilter_FilterType EventFilter_FilterType_FilterType_MAX = EventFilter_FilterType_REGEX_ALL;
constexpr int EventFilter_FilterType_FilterType_ARRAYSIZE = EventFilter_FilterType_FilterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventFilter_FilterType_descriptor();
template<typename T>
inline const std::string& EventFilter_FilterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventFilter_FilterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventFilter_FilterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventFilter_FilterType_descriptor(), enum_t_value);
}
inline bool EventFilter_FilterType_Parse(
    const std::string& name, EventFilter_FilterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventFilter_FilterType>(
    EventFilter_FilterType_descriptor(), name, value);
}
// ===================================================================

class Event_Attribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Event.Attribute) */ {
 public:
  Event_Attribute();
  virtual ~Event_Attribute();

  Event_Attribute(const Event_Attribute& from);
  Event_Attribute(Event_Attribute&& from) noexcept
    : Event_Attribute() {
    *this = ::std::move(from);
  }

  inline Event_Attribute& operator=(const Event_Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_Attribute& operator=(Event_Attribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_Attribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Attribute* internal_default_instance() {
    return reinterpret_cast<const Event_Attribute*>(
               &_Event_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Event_Attribute* other);
  friend void swap(Event_Attribute& a, Event_Attribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_Attribute* New() const final {
    return CreateMaybeMessage<Event_Attribute>(nullptr);
  }

  Event_Attribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_Attribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_Attribute& from);
  void MergeFrom(const Event_Attribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_Attribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Event.Attribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:Event.Attribute)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Event";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Event_Attribute Attribute;

  // accessors -------------------------------------------------------

  // repeated .Event.Attribute attributes = 2;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 2;
  ::Event_Attribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event_Attribute >*
      mutable_attributes();
  const ::Event_Attribute& attributes(int index) const;
  ::Event_Attribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event_Attribute >&
      attributes() const;

  // string event_type = 1;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  const std::string& event_type() const;
  void set_event_type(const std::string& value);
  void set_event_type(std::string&& value);
  void set_event_type(const char* value);
  void set_event_type(const char* value, size_t size);
  std::string* mutable_event_type();
  std::string* release_event_type();
  void set_allocated_event_type(std::string* event_type);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:Event)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event_Attribute > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class EventList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EventList) */ {
 public:
  EventList();
  virtual ~EventList();

  EventList(const EventList& from);
  EventList(EventList&& from) noexcept
    : EventList() {
    *this = ::std::move(from);
  }

  inline EventList& operator=(const EventList& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventList& operator=(EventList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventList* internal_default_instance() {
    return reinterpret_cast<const EventList*>(
               &_EventList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(EventList* other);
  friend void swap(EventList& a, EventList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventList* New() const final {
    return CreateMaybeMessage<EventList>(nullptr);
  }

  EventList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventList& from);
  void MergeFrom(const EventList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EventList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Event events = 1;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 1;
  ::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >*
      mutable_events();
  const ::Event& events(int index) const;
  ::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >&
      events() const;

  // @@protoc_insertion_point(class_scope:EventList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class EventFilter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EventFilter) */ {
 public:
  EventFilter();
  virtual ~EventFilter();

  EventFilter(const EventFilter& from);
  EventFilter(EventFilter&& from) noexcept
    : EventFilter() {
    *this = ::std::move(from);
  }

  inline EventFilter& operator=(const EventFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventFilter& operator=(EventFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventFilter* internal_default_instance() {
    return reinterpret_cast<const EventFilter*>(
               &_EventFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EventFilter* other);
  friend void swap(EventFilter& a, EventFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventFilter* New() const final {
    return CreateMaybeMessage<EventFilter>(nullptr);
  }

  EventFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventFilter& from);
  void MergeFrom(const EventFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EventFilter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EventFilter_FilterType FilterType;
  static constexpr FilterType FILTER_TYPE_UNSET =
    EventFilter_FilterType_FILTER_TYPE_UNSET;
  static constexpr FilterType SIMPLE_ANY =
    EventFilter_FilterType_SIMPLE_ANY;
  static constexpr FilterType SIMPLE_ALL =
    EventFilter_FilterType_SIMPLE_ALL;
  static constexpr FilterType REGEX_ANY =
    EventFilter_FilterType_REGEX_ANY;
  static constexpr FilterType REGEX_ALL =
    EventFilter_FilterType_REGEX_ALL;
  static inline bool FilterType_IsValid(int value) {
    return EventFilter_FilterType_IsValid(value);
  }
  static constexpr FilterType FilterType_MIN =
    EventFilter_FilterType_FilterType_MIN;
  static constexpr FilterType FilterType_MAX =
    EventFilter_FilterType_FilterType_MAX;
  static constexpr int FilterType_ARRAYSIZE =
    EventFilter_FilterType_FilterType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FilterType_descriptor() {
    return EventFilter_FilterType_descriptor();
  }
  template<typename T>
  static inline const std::string& FilterType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FilterType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FilterType_Name.");
    return EventFilter_FilterType_Name(enum_t_value);
  }
  static inline bool FilterType_Parse(const std::string& name,
      FilterType* value) {
    return EventFilter_FilterType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // string match_string = 2;
  void clear_match_string();
  static const int kMatchStringFieldNumber = 2;
  const std::string& match_string() const;
  void set_match_string(const std::string& value);
  void set_match_string(std::string&& value);
  void set_match_string(const char* value);
  void set_match_string(const char* value, size_t size);
  std::string* mutable_match_string();
  std::string* release_match_string();
  void set_allocated_match_string(std::string* match_string);

  // .EventFilter.FilterType filter_type = 3;
  void clear_filter_type();
  static const int kFilterTypeFieldNumber = 3;
  ::EventFilter_FilterType filter_type() const;
  void set_filter_type(::EventFilter_FilterType value);

  // @@protoc_insertion_point(class_scope:EventFilter)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr match_string_;
  int filter_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class EventSubscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EventSubscription) */ {
 public:
  EventSubscription();
  virtual ~EventSubscription();

  EventSubscription(const EventSubscription& from);
  EventSubscription(EventSubscription&& from) noexcept
    : EventSubscription() {
    *this = ::std::move(from);
  }

  inline EventSubscription& operator=(const EventSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSubscription& operator=(EventSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSubscription* internal_default_instance() {
    return reinterpret_cast<const EventSubscription*>(
               &_EventSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(EventSubscription* other);
  friend void swap(EventSubscription& a, EventSubscription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventSubscription* New() const final {
    return CreateMaybeMessage<EventSubscription>(nullptr);
  }

  EventSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventSubscription& from);
  void MergeFrom(const EventSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EventSubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EventFilter filters = 2;
  int filters_size() const;
  void clear_filters();
  static const int kFiltersFieldNumber = 2;
  ::EventFilter* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventFilter >*
      mutable_filters();
  const ::EventFilter& filters(int index) const;
  ::EventFilter* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventFilter >&
      filters() const;

  // string event_type = 1;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  const std::string& event_type() const;
  void set_event_type(const std::string& value);
  void set_event_type(std::string&& value);
  void set_event_type(const char* value);
  void set_event_type(const char* value, size_t size);
  std::string* mutable_event_type();
  std::string* release_event_type();
  void set_allocated_event_type(std::string* event_type);

  // @@protoc_insertion_point(class_scope:EventSubscription)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventFilter > filters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event_Attribute

// string key = 1;
inline void Event_Attribute::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Event_Attribute::key() const {
  // @@protoc_insertion_point(field_get:Event.Attribute.key)
  return key_.GetNoArena();
}
inline void Event_Attribute::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Event.Attribute.key)
}
inline void Event_Attribute::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Event.Attribute.key)
}
inline void Event_Attribute::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Event.Attribute.key)
}
inline void Event_Attribute::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Event.Attribute.key)
}
inline std::string* Event_Attribute::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:Event.Attribute.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Event_Attribute::release_key() {
  // @@protoc_insertion_point(field_release:Event.Attribute.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Event_Attribute::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Event.Attribute.key)
}

// string value = 2;
inline void Event_Attribute::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Event_Attribute::value() const {
  // @@protoc_insertion_point(field_get:Event.Attribute.value)
  return value_.GetNoArena();
}
inline void Event_Attribute::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Event.Attribute.value)
}
inline void Event_Attribute::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Event.Attribute.value)
}
inline void Event_Attribute::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Event.Attribute.value)
}
inline void Event_Attribute::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Event.Attribute.value)
}
inline std::string* Event_Attribute::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Event.Attribute.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Event_Attribute::release_value() {
  // @@protoc_insertion_point(field_release:Event.Attribute.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Event_Attribute::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Event.Attribute.value)
}

// -------------------------------------------------------------------

// Event

// string event_type = 1;
inline void Event::clear_event_type() {
  event_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Event::event_type() const {
  // @@protoc_insertion_point(field_get:Event.event_type)
  return event_type_.GetNoArena();
}
inline void Event::set_event_type(const std::string& value) {
  
  event_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Event.event_type)
}
inline void Event::set_event_type(std::string&& value) {
  
  event_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Event.event_type)
}
inline void Event::set_event_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Event.event_type)
}
inline void Event::set_event_type(const char* value, size_t size) {
  
  event_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Event.event_type)
}
inline std::string* Event::mutable_event_type() {
  
  // @@protoc_insertion_point(field_mutable:Event.event_type)
  return event_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Event::release_event_type() {
  // @@protoc_insertion_point(field_release:Event.event_type)
  
  return event_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_event_type(std::string* event_type) {
  if (event_type != nullptr) {
    
  } else {
    
  }
  event_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_type);
  // @@protoc_insertion_point(field_set_allocated:Event.event_type)
}

// repeated .Event.Attribute attributes = 2;
inline int Event::attributes_size() const {
  return attributes_.size();
}
inline void Event::clear_attributes() {
  attributes_.Clear();
}
inline ::Event_Attribute* Event::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:Event.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event_Attribute >*
Event::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:Event.attributes)
  return &attributes_;
}
inline const ::Event_Attribute& Event::attributes(int index) const {
  // @@protoc_insertion_point(field_get:Event.attributes)
  return attributes_.Get(index);
}
inline ::Event_Attribute* Event::add_attributes() {
  // @@protoc_insertion_point(field_add:Event.attributes)
  return attributes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event_Attribute >&
Event::attributes() const {
  // @@protoc_insertion_point(field_list:Event.attributes)
  return attributes_;
}

// bytes data = 3;
inline void Event::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Event::data() const {
  // @@protoc_insertion_point(field_get:Event.data)
  return data_.GetNoArena();
}
inline void Event::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Event.data)
}
inline void Event::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Event.data)
}
inline void Event::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Event.data)
}
inline void Event::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Event.data)
}
inline std::string* Event::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Event.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Event::release_data() {
  // @@protoc_insertion_point(field_release:Event.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Event.data)
}

// -------------------------------------------------------------------

// EventList

// repeated .Event events = 1;
inline int EventList::events_size() const {
  return events_.size();
}
inline void EventList::clear_events() {
  events_.Clear();
}
inline ::Event* EventList::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:EventList.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >*
EventList::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:EventList.events)
  return &events_;
}
inline const ::Event& EventList::events(int index) const {
  // @@protoc_insertion_point(field_get:EventList.events)
  return events_.Get(index);
}
inline ::Event* EventList::add_events() {
  // @@protoc_insertion_point(field_add:EventList.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >&
EventList::events() const {
  // @@protoc_insertion_point(field_list:EventList.events)
  return events_;
}

// -------------------------------------------------------------------

// EventFilter

// string key = 1;
inline void EventFilter::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventFilter::key() const {
  // @@protoc_insertion_point(field_get:EventFilter.key)
  return key_.GetNoArena();
}
inline void EventFilter::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EventFilter.key)
}
inline void EventFilter::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EventFilter.key)
}
inline void EventFilter::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EventFilter.key)
}
inline void EventFilter::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EventFilter.key)
}
inline std::string* EventFilter::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:EventFilter.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventFilter::release_key() {
  // @@protoc_insertion_point(field_release:EventFilter.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventFilter::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:EventFilter.key)
}

// string match_string = 2;
inline void EventFilter::clear_match_string() {
  match_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventFilter::match_string() const {
  // @@protoc_insertion_point(field_get:EventFilter.match_string)
  return match_string_.GetNoArena();
}
inline void EventFilter::set_match_string(const std::string& value) {
  
  match_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EventFilter.match_string)
}
inline void EventFilter::set_match_string(std::string&& value) {
  
  match_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EventFilter.match_string)
}
inline void EventFilter::set_match_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  match_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EventFilter.match_string)
}
inline void EventFilter::set_match_string(const char* value, size_t size) {
  
  match_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EventFilter.match_string)
}
inline std::string* EventFilter::mutable_match_string() {
  
  // @@protoc_insertion_point(field_mutable:EventFilter.match_string)
  return match_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventFilter::release_match_string() {
  // @@protoc_insertion_point(field_release:EventFilter.match_string)
  
  return match_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventFilter::set_allocated_match_string(std::string* match_string) {
  if (match_string != nullptr) {
    
  } else {
    
  }
  match_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), match_string);
  // @@protoc_insertion_point(field_set_allocated:EventFilter.match_string)
}

// .EventFilter.FilterType filter_type = 3;
inline void EventFilter::clear_filter_type() {
  filter_type_ = 0;
}
inline ::EventFilter_FilterType EventFilter::filter_type() const {
  // @@protoc_insertion_point(field_get:EventFilter.filter_type)
  return static_cast< ::EventFilter_FilterType >(filter_type_);
}
inline void EventFilter::set_filter_type(::EventFilter_FilterType value) {
  
  filter_type_ = value;
  // @@protoc_insertion_point(field_set:EventFilter.filter_type)
}

// -------------------------------------------------------------------

// EventSubscription

// string event_type = 1;
inline void EventSubscription::clear_event_type() {
  event_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventSubscription::event_type() const {
  // @@protoc_insertion_point(field_get:EventSubscription.event_type)
  return event_type_.GetNoArena();
}
inline void EventSubscription::set_event_type(const std::string& value) {
  
  event_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EventSubscription.event_type)
}
inline void EventSubscription::set_event_type(std::string&& value) {
  
  event_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EventSubscription.event_type)
}
inline void EventSubscription::set_event_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EventSubscription.event_type)
}
inline void EventSubscription::set_event_type(const char* value, size_t size) {
  
  event_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EventSubscription.event_type)
}
inline std::string* EventSubscription::mutable_event_type() {
  
  // @@protoc_insertion_point(field_mutable:EventSubscription.event_type)
  return event_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventSubscription::release_event_type() {
  // @@protoc_insertion_point(field_release:EventSubscription.event_type)
  
  return event_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventSubscription::set_allocated_event_type(std::string* event_type) {
  if (event_type != nullptr) {
    
  } else {
    
  }
  event_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_type);
  // @@protoc_insertion_point(field_set_allocated:EventSubscription.event_type)
}

// repeated .EventFilter filters = 2;
inline int EventSubscription::filters_size() const {
  return filters_.size();
}
inline void EventSubscription::clear_filters() {
  filters_.Clear();
}
inline ::EventFilter* EventSubscription::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:EventSubscription.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventFilter >*
EventSubscription::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:EventSubscription.filters)
  return &filters_;
}
inline const ::EventFilter& EventSubscription::filters(int index) const {
  // @@protoc_insertion_point(field_get:EventSubscription.filters)
  return filters_.Get(index);
}
inline ::EventFilter* EventSubscription::add_filters() {
  // @@protoc_insertion_point(field_add:EventSubscription.filters)
  return filters_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventFilter >&
EventSubscription::filters() const {
  // @@protoc_insertion_point(field_list:EventSubscription.filters)
  return filters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EventFilter_FilterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EventFilter_FilterType>() {
  return ::EventFilter_FilterType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_events_2eproto
