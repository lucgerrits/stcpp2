// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_batch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fbatch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fbatch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "batch.pb.h"
#include "client_list_control.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fbatch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fbatch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fbatch_2eproto;
class ClientBatchGetRequest;
class ClientBatchGetRequestDefaultTypeInternal;
extern ClientBatchGetRequestDefaultTypeInternal _ClientBatchGetRequest_default_instance_;
class ClientBatchGetResponse;
class ClientBatchGetResponseDefaultTypeInternal;
extern ClientBatchGetResponseDefaultTypeInternal _ClientBatchGetResponse_default_instance_;
class ClientBatchListRequest;
class ClientBatchListRequestDefaultTypeInternal;
extern ClientBatchListRequestDefaultTypeInternal _ClientBatchListRequest_default_instance_;
class ClientBatchListResponse;
class ClientBatchListResponseDefaultTypeInternal;
extern ClientBatchListResponseDefaultTypeInternal _ClientBatchListResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientBatchGetRequest* Arena::CreateMaybeMessage<::ClientBatchGetRequest>(Arena*);
template<> ::ClientBatchGetResponse* Arena::CreateMaybeMessage<::ClientBatchGetResponse>(Arena*);
template<> ::ClientBatchListRequest* Arena::CreateMaybeMessage<::ClientBatchListRequest>(Arena*);
template<> ::ClientBatchListResponse* Arena::CreateMaybeMessage<::ClientBatchListResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ClientBatchListResponse_Status : int {
  ClientBatchListResponse_Status_STATUS_UNSET = 0,
  ClientBatchListResponse_Status_OK = 1,
  ClientBatchListResponse_Status_INTERNAL_ERROR = 2,
  ClientBatchListResponse_Status_NOT_READY = 3,
  ClientBatchListResponse_Status_NO_ROOT = 4,
  ClientBatchListResponse_Status_NO_RESOURCE = 5,
  ClientBatchListResponse_Status_INVALID_PAGING = 6,
  ClientBatchListResponse_Status_INVALID_SORT = 7,
  ClientBatchListResponse_Status_INVALID_ID = 8,
  ClientBatchListResponse_Status_ClientBatchListResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientBatchListResponse_Status_ClientBatchListResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientBatchListResponse_Status_IsValid(int value);
constexpr ClientBatchListResponse_Status ClientBatchListResponse_Status_Status_MIN = ClientBatchListResponse_Status_STATUS_UNSET;
constexpr ClientBatchListResponse_Status ClientBatchListResponse_Status_Status_MAX = ClientBatchListResponse_Status_INVALID_ID;
constexpr int ClientBatchListResponse_Status_Status_ARRAYSIZE = ClientBatchListResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBatchListResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientBatchListResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientBatchListResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientBatchListResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientBatchListResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientBatchListResponse_Status_Parse(
    const std::string& name, ClientBatchListResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientBatchListResponse_Status>(
    ClientBatchListResponse_Status_descriptor(), name, value);
}
enum ClientBatchGetResponse_Status : int {
  ClientBatchGetResponse_Status_STATUS_UNSET = 0,
  ClientBatchGetResponse_Status_OK = 1,
  ClientBatchGetResponse_Status_INTERNAL_ERROR = 2,
  ClientBatchGetResponse_Status_NO_RESOURCE = 5,
  ClientBatchGetResponse_Status_INVALID_ID = 8,
  ClientBatchGetResponse_Status_ClientBatchGetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientBatchGetResponse_Status_ClientBatchGetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientBatchGetResponse_Status_IsValid(int value);
constexpr ClientBatchGetResponse_Status ClientBatchGetResponse_Status_Status_MIN = ClientBatchGetResponse_Status_STATUS_UNSET;
constexpr ClientBatchGetResponse_Status ClientBatchGetResponse_Status_Status_MAX = ClientBatchGetResponse_Status_INVALID_ID;
constexpr int ClientBatchGetResponse_Status_Status_ARRAYSIZE = ClientBatchGetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBatchGetResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientBatchGetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientBatchGetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientBatchGetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientBatchGetResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientBatchGetResponse_Status_Parse(
    const std::string& name, ClientBatchGetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientBatchGetResponse_Status>(
    ClientBatchGetResponse_Status_descriptor(), name, value);
}
// ===================================================================

class ClientBatchListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBatchListRequest) */ {
 public:
  ClientBatchListRequest();
  virtual ~ClientBatchListRequest();

  ClientBatchListRequest(const ClientBatchListRequest& from);
  ClientBatchListRequest(ClientBatchListRequest&& from) noexcept
    : ClientBatchListRequest() {
    *this = ::std::move(from);
  }

  inline ClientBatchListRequest& operator=(const ClientBatchListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBatchListRequest& operator=(ClientBatchListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBatchListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBatchListRequest* internal_default_instance() {
    return reinterpret_cast<const ClientBatchListRequest*>(
               &_ClientBatchListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientBatchListRequest* other);
  friend void swap(ClientBatchListRequest& a, ClientBatchListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBatchListRequest* New() const final {
    return CreateMaybeMessage<ClientBatchListRequest>(nullptr);
  }

  ClientBatchListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBatchListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBatchListRequest& from);
  void MergeFrom(const ClientBatchListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBatchListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBatchListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbatch_2eproto);
    return ::descriptor_table_client_5fbatch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string batch_ids = 2;
  int batch_ids_size() const;
  void clear_batch_ids();
  static const int kBatchIdsFieldNumber = 2;
  const std::string& batch_ids(int index) const;
  std::string* mutable_batch_ids(int index);
  void set_batch_ids(int index, const std::string& value);
  void set_batch_ids(int index, std::string&& value);
  void set_batch_ids(int index, const char* value);
  void set_batch_ids(int index, const char* value, size_t size);
  std::string* add_batch_ids();
  void add_batch_ids(const std::string& value);
  void add_batch_ids(std::string&& value);
  void add_batch_ids(const char* value);
  void add_batch_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& batch_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_batch_ids();

  // repeated .ClientSortControls sorting = 4;
  int sorting_size() const;
  void clear_sorting();
  static const int kSortingFieldNumber = 4;
  ::ClientSortControls* mutable_sorting(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >*
      mutable_sorting();
  const ::ClientSortControls& sorting(int index) const;
  ::ClientSortControls* add_sorting();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >&
      sorting() const;

  // string head_id = 1;
  void clear_head_id();
  static const int kHeadIdFieldNumber = 1;
  const std::string& head_id() const;
  void set_head_id(const std::string& value);
  void set_head_id(std::string&& value);
  void set_head_id(const char* value);
  void set_head_id(const char* value, size_t size);
  std::string* mutable_head_id();
  std::string* release_head_id();
  void set_allocated_head_id(std::string* head_id);

  // .ClientPagingControls paging = 3;
  bool has_paging() const;
  void clear_paging();
  static const int kPagingFieldNumber = 3;
  const ::ClientPagingControls& paging() const;
  ::ClientPagingControls* release_paging();
  ::ClientPagingControls* mutable_paging();
  void set_allocated_paging(::ClientPagingControls* paging);

  // @@protoc_insertion_point(class_scope:ClientBatchListRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> batch_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls > sorting_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_id_;
  ::ClientPagingControls* paging_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbatch_2eproto;
};
// -------------------------------------------------------------------

class ClientBatchListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBatchListResponse) */ {
 public:
  ClientBatchListResponse();
  virtual ~ClientBatchListResponse();

  ClientBatchListResponse(const ClientBatchListResponse& from);
  ClientBatchListResponse(ClientBatchListResponse&& from) noexcept
    : ClientBatchListResponse() {
    *this = ::std::move(from);
  }

  inline ClientBatchListResponse& operator=(const ClientBatchListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBatchListResponse& operator=(ClientBatchListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBatchListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBatchListResponse* internal_default_instance() {
    return reinterpret_cast<const ClientBatchListResponse*>(
               &_ClientBatchListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientBatchListResponse* other);
  friend void swap(ClientBatchListResponse& a, ClientBatchListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBatchListResponse* New() const final {
    return CreateMaybeMessage<ClientBatchListResponse>(nullptr);
  }

  ClientBatchListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBatchListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBatchListResponse& from);
  void MergeFrom(const ClientBatchListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBatchListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBatchListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbatch_2eproto);
    return ::descriptor_table_client_5fbatch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientBatchListResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientBatchListResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientBatchListResponse_Status_OK;
  static constexpr Status INTERNAL_ERROR =
    ClientBatchListResponse_Status_INTERNAL_ERROR;
  static constexpr Status NOT_READY =
    ClientBatchListResponse_Status_NOT_READY;
  static constexpr Status NO_ROOT =
    ClientBatchListResponse_Status_NO_ROOT;
  static constexpr Status NO_RESOURCE =
    ClientBatchListResponse_Status_NO_RESOURCE;
  static constexpr Status INVALID_PAGING =
    ClientBatchListResponse_Status_INVALID_PAGING;
  static constexpr Status INVALID_SORT =
    ClientBatchListResponse_Status_INVALID_SORT;
  static constexpr Status INVALID_ID =
    ClientBatchListResponse_Status_INVALID_ID;
  static inline bool Status_IsValid(int value) {
    return ClientBatchListResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientBatchListResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientBatchListResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientBatchListResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientBatchListResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientBatchListResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientBatchListResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Batch batches = 2;
  int batches_size() const;
  void clear_batches();
  static const int kBatchesFieldNumber = 2;
  ::Batch* mutable_batches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >*
      mutable_batches();
  const ::Batch& batches(int index) const;
  ::Batch* add_batches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >&
      batches() const;

  // string head_id = 3;
  void clear_head_id();
  static const int kHeadIdFieldNumber = 3;
  const std::string& head_id() const;
  void set_head_id(const std::string& value);
  void set_head_id(std::string&& value);
  void set_head_id(const char* value);
  void set_head_id(const char* value, size_t size);
  std::string* mutable_head_id();
  std::string* release_head_id();
  void set_allocated_head_id(std::string* head_id);

  // .ClientPagingResponse paging = 4;
  bool has_paging() const;
  void clear_paging();
  static const int kPagingFieldNumber = 4;
  const ::ClientPagingResponse& paging() const;
  ::ClientPagingResponse* release_paging();
  ::ClientPagingResponse* mutable_paging();
  void set_allocated_paging(::ClientPagingResponse* paging);

  // .ClientBatchListResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientBatchListResponse_Status status() const;
  void set_status(::ClientBatchListResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientBatchListResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch > batches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_id_;
  ::ClientPagingResponse* paging_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbatch_2eproto;
};
// -------------------------------------------------------------------

class ClientBatchGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBatchGetRequest) */ {
 public:
  ClientBatchGetRequest();
  virtual ~ClientBatchGetRequest();

  ClientBatchGetRequest(const ClientBatchGetRequest& from);
  ClientBatchGetRequest(ClientBatchGetRequest&& from) noexcept
    : ClientBatchGetRequest() {
    *this = ::std::move(from);
  }

  inline ClientBatchGetRequest& operator=(const ClientBatchGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBatchGetRequest& operator=(ClientBatchGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBatchGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBatchGetRequest* internal_default_instance() {
    return reinterpret_cast<const ClientBatchGetRequest*>(
               &_ClientBatchGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClientBatchGetRequest* other);
  friend void swap(ClientBatchGetRequest& a, ClientBatchGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBatchGetRequest* New() const final {
    return CreateMaybeMessage<ClientBatchGetRequest>(nullptr);
  }

  ClientBatchGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBatchGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBatchGetRequest& from);
  void MergeFrom(const ClientBatchGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBatchGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBatchGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbatch_2eproto);
    return ::descriptor_table_client_5fbatch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string batch_id = 1;
  void clear_batch_id();
  static const int kBatchIdFieldNumber = 1;
  const std::string& batch_id() const;
  void set_batch_id(const std::string& value);
  void set_batch_id(std::string&& value);
  void set_batch_id(const char* value);
  void set_batch_id(const char* value, size_t size);
  std::string* mutable_batch_id();
  std::string* release_batch_id();
  void set_allocated_batch_id(std::string* batch_id);

  // @@protoc_insertion_point(class_scope:ClientBatchGetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr batch_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbatch_2eproto;
};
// -------------------------------------------------------------------

class ClientBatchGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBatchGetResponse) */ {
 public:
  ClientBatchGetResponse();
  virtual ~ClientBatchGetResponse();

  ClientBatchGetResponse(const ClientBatchGetResponse& from);
  ClientBatchGetResponse(ClientBatchGetResponse&& from) noexcept
    : ClientBatchGetResponse() {
    *this = ::std::move(from);
  }

  inline ClientBatchGetResponse& operator=(const ClientBatchGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBatchGetResponse& operator=(ClientBatchGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBatchGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBatchGetResponse* internal_default_instance() {
    return reinterpret_cast<const ClientBatchGetResponse*>(
               &_ClientBatchGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ClientBatchGetResponse* other);
  friend void swap(ClientBatchGetResponse& a, ClientBatchGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBatchGetResponse* New() const final {
    return CreateMaybeMessage<ClientBatchGetResponse>(nullptr);
  }

  ClientBatchGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBatchGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBatchGetResponse& from);
  void MergeFrom(const ClientBatchGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBatchGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBatchGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbatch_2eproto);
    return ::descriptor_table_client_5fbatch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientBatchGetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientBatchGetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientBatchGetResponse_Status_OK;
  static constexpr Status INTERNAL_ERROR =
    ClientBatchGetResponse_Status_INTERNAL_ERROR;
  static constexpr Status NO_RESOURCE =
    ClientBatchGetResponse_Status_NO_RESOURCE;
  static constexpr Status INVALID_ID =
    ClientBatchGetResponse_Status_INVALID_ID;
  static inline bool Status_IsValid(int value) {
    return ClientBatchGetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientBatchGetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientBatchGetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientBatchGetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientBatchGetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientBatchGetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientBatchGetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Batch batch = 2;
  bool has_batch() const;
  void clear_batch();
  static const int kBatchFieldNumber = 2;
  const ::Batch& batch() const;
  ::Batch* release_batch();
  ::Batch* mutable_batch();
  void set_allocated_batch(::Batch* batch);

  // .ClientBatchGetResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientBatchGetResponse_Status status() const;
  void set_status(::ClientBatchGetResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientBatchGetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Batch* batch_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbatch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientBatchListRequest

// string head_id = 1;
inline void ClientBatchListRequest::clear_head_id() {
  head_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientBatchListRequest::head_id() const {
  // @@protoc_insertion_point(field_get:ClientBatchListRequest.head_id)
  return head_id_.GetNoArena();
}
inline void ClientBatchListRequest::set_head_id(const std::string& value) {
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientBatchListRequest.head_id)
}
inline void ClientBatchListRequest::set_head_id(std::string&& value) {
  
  head_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientBatchListRequest.head_id)
}
inline void ClientBatchListRequest::set_head_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientBatchListRequest.head_id)
}
inline void ClientBatchListRequest::set_head_id(const char* value, size_t size) {
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientBatchListRequest.head_id)
}
inline std::string* ClientBatchListRequest::mutable_head_id() {
  
  // @@protoc_insertion_point(field_mutable:ClientBatchListRequest.head_id)
  return head_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientBatchListRequest::release_head_id() {
  // @@protoc_insertion_point(field_release:ClientBatchListRequest.head_id)
  
  return head_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientBatchListRequest::set_allocated_head_id(std::string* head_id) {
  if (head_id != nullptr) {
    
  } else {
    
  }
  head_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head_id);
  // @@protoc_insertion_point(field_set_allocated:ClientBatchListRequest.head_id)
}

// repeated string batch_ids = 2;
inline int ClientBatchListRequest::batch_ids_size() const {
  return batch_ids_.size();
}
inline void ClientBatchListRequest::clear_batch_ids() {
  batch_ids_.Clear();
}
inline const std::string& ClientBatchListRequest::batch_ids(int index) const {
  // @@protoc_insertion_point(field_get:ClientBatchListRequest.batch_ids)
  return batch_ids_.Get(index);
}
inline std::string* ClientBatchListRequest::mutable_batch_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ClientBatchListRequest.batch_ids)
  return batch_ids_.Mutable(index);
}
inline void ClientBatchListRequest::set_batch_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientBatchListRequest.batch_ids)
  batch_ids_.Mutable(index)->assign(value);
}
inline void ClientBatchListRequest::set_batch_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientBatchListRequest.batch_ids)
  batch_ids_.Mutable(index)->assign(std::move(value));
}
inline void ClientBatchListRequest::set_batch_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  batch_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientBatchListRequest.batch_ids)
}
inline void ClientBatchListRequest::set_batch_ids(int index, const char* value, size_t size) {
  batch_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientBatchListRequest.batch_ids)
}
inline std::string* ClientBatchListRequest::add_batch_ids() {
  // @@protoc_insertion_point(field_add_mutable:ClientBatchListRequest.batch_ids)
  return batch_ids_.Add();
}
inline void ClientBatchListRequest::add_batch_ids(const std::string& value) {
  batch_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientBatchListRequest.batch_ids)
}
inline void ClientBatchListRequest::add_batch_ids(std::string&& value) {
  batch_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientBatchListRequest.batch_ids)
}
inline void ClientBatchListRequest::add_batch_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  batch_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientBatchListRequest.batch_ids)
}
inline void ClientBatchListRequest::add_batch_ids(const char* value, size_t size) {
  batch_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientBatchListRequest.batch_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientBatchListRequest::batch_ids() const {
  // @@protoc_insertion_point(field_list:ClientBatchListRequest.batch_ids)
  return batch_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientBatchListRequest::mutable_batch_ids() {
  // @@protoc_insertion_point(field_mutable_list:ClientBatchListRequest.batch_ids)
  return &batch_ids_;
}

// .ClientPagingControls paging = 3;
inline bool ClientBatchListRequest::has_paging() const {
  return this != internal_default_instance() && paging_ != nullptr;
}
inline const ::ClientPagingControls& ClientBatchListRequest::paging() const {
  const ::ClientPagingControls* p = paging_;
  // @@protoc_insertion_point(field_get:ClientBatchListRequest.paging)
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientPagingControls*>(
      &::_ClientPagingControls_default_instance_);
}
inline ::ClientPagingControls* ClientBatchListRequest::release_paging() {
  // @@protoc_insertion_point(field_release:ClientBatchListRequest.paging)
  
  ::ClientPagingControls* temp = paging_;
  paging_ = nullptr;
  return temp;
}
inline ::ClientPagingControls* ClientBatchListRequest::mutable_paging() {
  
  if (paging_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientPagingControls>(GetArenaNoVirtual());
    paging_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ClientBatchListRequest.paging)
  return paging_;
}
inline void ClientBatchListRequest::set_allocated_paging(::ClientPagingControls* paging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(paging_);
  }
  if (paging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      paging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paging, submessage_arena);
    }
    
  } else {
    
  }
  paging_ = paging;
  // @@protoc_insertion_point(field_set_allocated:ClientBatchListRequest.paging)
}

// repeated .ClientSortControls sorting = 4;
inline int ClientBatchListRequest::sorting_size() const {
  return sorting_.size();
}
inline ::ClientSortControls* ClientBatchListRequest::mutable_sorting(int index) {
  // @@protoc_insertion_point(field_mutable:ClientBatchListRequest.sorting)
  return sorting_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >*
ClientBatchListRequest::mutable_sorting() {
  // @@protoc_insertion_point(field_mutable_list:ClientBatchListRequest.sorting)
  return &sorting_;
}
inline const ::ClientSortControls& ClientBatchListRequest::sorting(int index) const {
  // @@protoc_insertion_point(field_get:ClientBatchListRequest.sorting)
  return sorting_.Get(index);
}
inline ::ClientSortControls* ClientBatchListRequest::add_sorting() {
  // @@protoc_insertion_point(field_add:ClientBatchListRequest.sorting)
  return sorting_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >&
ClientBatchListRequest::sorting() const {
  // @@protoc_insertion_point(field_list:ClientBatchListRequest.sorting)
  return sorting_;
}

// -------------------------------------------------------------------

// ClientBatchListResponse

// .ClientBatchListResponse.Status status = 1;
inline void ClientBatchListResponse::clear_status() {
  status_ = 0;
}
inline ::ClientBatchListResponse_Status ClientBatchListResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientBatchListResponse.status)
  return static_cast< ::ClientBatchListResponse_Status >(status_);
}
inline void ClientBatchListResponse::set_status(::ClientBatchListResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientBatchListResponse.status)
}

// repeated .Batch batches = 2;
inline int ClientBatchListResponse::batches_size() const {
  return batches_.size();
}
inline ::Batch* ClientBatchListResponse::mutable_batches(int index) {
  // @@protoc_insertion_point(field_mutable:ClientBatchListResponse.batches)
  return batches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >*
ClientBatchListResponse::mutable_batches() {
  // @@protoc_insertion_point(field_mutable_list:ClientBatchListResponse.batches)
  return &batches_;
}
inline const ::Batch& ClientBatchListResponse::batches(int index) const {
  // @@protoc_insertion_point(field_get:ClientBatchListResponse.batches)
  return batches_.Get(index);
}
inline ::Batch* ClientBatchListResponse::add_batches() {
  // @@protoc_insertion_point(field_add:ClientBatchListResponse.batches)
  return batches_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >&
ClientBatchListResponse::batches() const {
  // @@protoc_insertion_point(field_list:ClientBatchListResponse.batches)
  return batches_;
}

// string head_id = 3;
inline void ClientBatchListResponse::clear_head_id() {
  head_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientBatchListResponse::head_id() const {
  // @@protoc_insertion_point(field_get:ClientBatchListResponse.head_id)
  return head_id_.GetNoArena();
}
inline void ClientBatchListResponse::set_head_id(const std::string& value) {
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientBatchListResponse.head_id)
}
inline void ClientBatchListResponse::set_head_id(std::string&& value) {
  
  head_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientBatchListResponse.head_id)
}
inline void ClientBatchListResponse::set_head_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientBatchListResponse.head_id)
}
inline void ClientBatchListResponse::set_head_id(const char* value, size_t size) {
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientBatchListResponse.head_id)
}
inline std::string* ClientBatchListResponse::mutable_head_id() {
  
  // @@protoc_insertion_point(field_mutable:ClientBatchListResponse.head_id)
  return head_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientBatchListResponse::release_head_id() {
  // @@protoc_insertion_point(field_release:ClientBatchListResponse.head_id)
  
  return head_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientBatchListResponse::set_allocated_head_id(std::string* head_id) {
  if (head_id != nullptr) {
    
  } else {
    
  }
  head_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head_id);
  // @@protoc_insertion_point(field_set_allocated:ClientBatchListResponse.head_id)
}

// .ClientPagingResponse paging = 4;
inline bool ClientBatchListResponse::has_paging() const {
  return this != internal_default_instance() && paging_ != nullptr;
}
inline const ::ClientPagingResponse& ClientBatchListResponse::paging() const {
  const ::ClientPagingResponse* p = paging_;
  // @@protoc_insertion_point(field_get:ClientBatchListResponse.paging)
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientPagingResponse*>(
      &::_ClientPagingResponse_default_instance_);
}
inline ::ClientPagingResponse* ClientBatchListResponse::release_paging() {
  // @@protoc_insertion_point(field_release:ClientBatchListResponse.paging)
  
  ::ClientPagingResponse* temp = paging_;
  paging_ = nullptr;
  return temp;
}
inline ::ClientPagingResponse* ClientBatchListResponse::mutable_paging() {
  
  if (paging_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientPagingResponse>(GetArenaNoVirtual());
    paging_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ClientBatchListResponse.paging)
  return paging_;
}
inline void ClientBatchListResponse::set_allocated_paging(::ClientPagingResponse* paging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(paging_);
  }
  if (paging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      paging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paging, submessage_arena);
    }
    
  } else {
    
  }
  paging_ = paging;
  // @@protoc_insertion_point(field_set_allocated:ClientBatchListResponse.paging)
}

// -------------------------------------------------------------------

// ClientBatchGetRequest

// string batch_id = 1;
inline void ClientBatchGetRequest::clear_batch_id() {
  batch_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientBatchGetRequest::batch_id() const {
  // @@protoc_insertion_point(field_get:ClientBatchGetRequest.batch_id)
  return batch_id_.GetNoArena();
}
inline void ClientBatchGetRequest::set_batch_id(const std::string& value) {
  
  batch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientBatchGetRequest.batch_id)
}
inline void ClientBatchGetRequest::set_batch_id(std::string&& value) {
  
  batch_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientBatchGetRequest.batch_id)
}
inline void ClientBatchGetRequest::set_batch_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  batch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientBatchGetRequest.batch_id)
}
inline void ClientBatchGetRequest::set_batch_id(const char* value, size_t size) {
  
  batch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientBatchGetRequest.batch_id)
}
inline std::string* ClientBatchGetRequest::mutable_batch_id() {
  
  // @@protoc_insertion_point(field_mutable:ClientBatchGetRequest.batch_id)
  return batch_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientBatchGetRequest::release_batch_id() {
  // @@protoc_insertion_point(field_release:ClientBatchGetRequest.batch_id)
  
  return batch_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientBatchGetRequest::set_allocated_batch_id(std::string* batch_id) {
  if (batch_id != nullptr) {
    
  } else {
    
  }
  batch_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), batch_id);
  // @@protoc_insertion_point(field_set_allocated:ClientBatchGetRequest.batch_id)
}

// -------------------------------------------------------------------

// ClientBatchGetResponse

// .ClientBatchGetResponse.Status status = 1;
inline void ClientBatchGetResponse::clear_status() {
  status_ = 0;
}
inline ::ClientBatchGetResponse_Status ClientBatchGetResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientBatchGetResponse.status)
  return static_cast< ::ClientBatchGetResponse_Status >(status_);
}
inline void ClientBatchGetResponse::set_status(::ClientBatchGetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientBatchGetResponse.status)
}

// .Batch batch = 2;
inline bool ClientBatchGetResponse::has_batch() const {
  return this != internal_default_instance() && batch_ != nullptr;
}
inline const ::Batch& ClientBatchGetResponse::batch() const {
  const ::Batch* p = batch_;
  // @@protoc_insertion_point(field_get:ClientBatchGetResponse.batch)
  return p != nullptr ? *p : *reinterpret_cast<const ::Batch*>(
      &::_Batch_default_instance_);
}
inline ::Batch* ClientBatchGetResponse::release_batch() {
  // @@protoc_insertion_point(field_release:ClientBatchGetResponse.batch)
  
  ::Batch* temp = batch_;
  batch_ = nullptr;
  return temp;
}
inline ::Batch* ClientBatchGetResponse::mutable_batch() {
  
  if (batch_ == nullptr) {
    auto* p = CreateMaybeMessage<::Batch>(GetArenaNoVirtual());
    batch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ClientBatchGetResponse.batch)
  return batch_;
}
inline void ClientBatchGetResponse::set_allocated_batch(::Batch* batch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(batch_);
  }
  if (batch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      batch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch, submessage_arena);
    }
    
  } else {
    
  }
  batch_ = batch;
  // @@protoc_insertion_point(field_set_allocated:ClientBatchGetResponse.batch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClientBatchListResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientBatchListResponse_Status>() {
  return ::ClientBatchListResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ClientBatchGetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientBatchGetResponse_Status>() {
  return ::ClientBatchGetResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fbatch_2eproto
