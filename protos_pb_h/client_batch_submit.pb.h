// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_batch_submit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fbatch_5fsubmit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fbatch_5fsubmit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "batch.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fbatch_5fsubmit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fbatch_5fsubmit_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fbatch_5fsubmit_2eproto;
class ClientBatchStatus;
class ClientBatchStatusDefaultTypeInternal;
extern ClientBatchStatusDefaultTypeInternal _ClientBatchStatus_default_instance_;
class ClientBatchStatusRequest;
class ClientBatchStatusRequestDefaultTypeInternal;
extern ClientBatchStatusRequestDefaultTypeInternal _ClientBatchStatusRequest_default_instance_;
class ClientBatchStatusResponse;
class ClientBatchStatusResponseDefaultTypeInternal;
extern ClientBatchStatusResponseDefaultTypeInternal _ClientBatchStatusResponse_default_instance_;
class ClientBatchStatus_InvalidTransaction;
class ClientBatchStatus_InvalidTransactionDefaultTypeInternal;
extern ClientBatchStatus_InvalidTransactionDefaultTypeInternal _ClientBatchStatus_InvalidTransaction_default_instance_;
class ClientBatchSubmitRequest;
class ClientBatchSubmitRequestDefaultTypeInternal;
extern ClientBatchSubmitRequestDefaultTypeInternal _ClientBatchSubmitRequest_default_instance_;
class ClientBatchSubmitResponse;
class ClientBatchSubmitResponseDefaultTypeInternal;
extern ClientBatchSubmitResponseDefaultTypeInternal _ClientBatchSubmitResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientBatchStatus* Arena::CreateMaybeMessage<::ClientBatchStatus>(Arena*);
template<> ::ClientBatchStatusRequest* Arena::CreateMaybeMessage<::ClientBatchStatusRequest>(Arena*);
template<> ::ClientBatchStatusResponse* Arena::CreateMaybeMessage<::ClientBatchStatusResponse>(Arena*);
template<> ::ClientBatchStatus_InvalidTransaction* Arena::CreateMaybeMessage<::ClientBatchStatus_InvalidTransaction>(Arena*);
template<> ::ClientBatchSubmitRequest* Arena::CreateMaybeMessage<::ClientBatchSubmitRequest>(Arena*);
template<> ::ClientBatchSubmitResponse* Arena::CreateMaybeMessage<::ClientBatchSubmitResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ClientBatchStatus_Status : int {
  ClientBatchStatus_Status_STATUS_UNSET = 0,
  ClientBatchStatus_Status_COMMITTED = 1,
  ClientBatchStatus_Status_INVALID = 2,
  ClientBatchStatus_Status_PENDING = 3,
  ClientBatchStatus_Status_UNKNOWN = 4,
  ClientBatchStatus_Status_ClientBatchStatus_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientBatchStatus_Status_ClientBatchStatus_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientBatchStatus_Status_IsValid(int value);
constexpr ClientBatchStatus_Status ClientBatchStatus_Status_Status_MIN = ClientBatchStatus_Status_STATUS_UNSET;
constexpr ClientBatchStatus_Status ClientBatchStatus_Status_Status_MAX = ClientBatchStatus_Status_UNKNOWN;
constexpr int ClientBatchStatus_Status_Status_ARRAYSIZE = ClientBatchStatus_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBatchStatus_Status_descriptor();
template<typename T>
inline const std::string& ClientBatchStatus_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientBatchStatus_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientBatchStatus_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientBatchStatus_Status_descriptor(), enum_t_value);
}
inline bool ClientBatchStatus_Status_Parse(
    const std::string& name, ClientBatchStatus_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientBatchStatus_Status>(
    ClientBatchStatus_Status_descriptor(), name, value);
}
enum ClientBatchSubmitResponse_Status : int {
  ClientBatchSubmitResponse_Status_STATUS_UNSET = 0,
  ClientBatchSubmitResponse_Status_OK = 1,
  ClientBatchSubmitResponse_Status_INTERNAL_ERROR = 2,
  ClientBatchSubmitResponse_Status_INVALID_BATCH = 3,
  ClientBatchSubmitResponse_Status_QUEUE_FULL = 4,
  ClientBatchSubmitResponse_Status_ClientBatchSubmitResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientBatchSubmitResponse_Status_ClientBatchSubmitResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientBatchSubmitResponse_Status_IsValid(int value);
constexpr ClientBatchSubmitResponse_Status ClientBatchSubmitResponse_Status_Status_MIN = ClientBatchSubmitResponse_Status_STATUS_UNSET;
constexpr ClientBatchSubmitResponse_Status ClientBatchSubmitResponse_Status_Status_MAX = ClientBatchSubmitResponse_Status_QUEUE_FULL;
constexpr int ClientBatchSubmitResponse_Status_Status_ARRAYSIZE = ClientBatchSubmitResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBatchSubmitResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientBatchSubmitResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientBatchSubmitResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientBatchSubmitResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientBatchSubmitResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientBatchSubmitResponse_Status_Parse(
    const std::string& name, ClientBatchSubmitResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientBatchSubmitResponse_Status>(
    ClientBatchSubmitResponse_Status_descriptor(), name, value);
}
enum ClientBatchStatusResponse_Status : int {
  ClientBatchStatusResponse_Status_STATUS_UNSET = 0,
  ClientBatchStatusResponse_Status_OK = 1,
  ClientBatchStatusResponse_Status_INTERNAL_ERROR = 2,
  ClientBatchStatusResponse_Status_NO_RESOURCE = 5,
  ClientBatchStatusResponse_Status_INVALID_ID = 8,
  ClientBatchStatusResponse_Status_ClientBatchStatusResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientBatchStatusResponse_Status_ClientBatchStatusResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientBatchStatusResponse_Status_IsValid(int value);
constexpr ClientBatchStatusResponse_Status ClientBatchStatusResponse_Status_Status_MIN = ClientBatchStatusResponse_Status_STATUS_UNSET;
constexpr ClientBatchStatusResponse_Status ClientBatchStatusResponse_Status_Status_MAX = ClientBatchStatusResponse_Status_INVALID_ID;
constexpr int ClientBatchStatusResponse_Status_Status_ARRAYSIZE = ClientBatchStatusResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBatchStatusResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientBatchStatusResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientBatchStatusResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientBatchStatusResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientBatchStatusResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientBatchStatusResponse_Status_Parse(
    const std::string& name, ClientBatchStatusResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientBatchStatusResponse_Status>(
    ClientBatchStatusResponse_Status_descriptor(), name, value);
}
// ===================================================================

class ClientBatchStatus_InvalidTransaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBatchStatus.InvalidTransaction) */ {
 public:
  ClientBatchStatus_InvalidTransaction();
  virtual ~ClientBatchStatus_InvalidTransaction();

  ClientBatchStatus_InvalidTransaction(const ClientBatchStatus_InvalidTransaction& from);
  ClientBatchStatus_InvalidTransaction(ClientBatchStatus_InvalidTransaction&& from) noexcept
    : ClientBatchStatus_InvalidTransaction() {
    *this = ::std::move(from);
  }

  inline ClientBatchStatus_InvalidTransaction& operator=(const ClientBatchStatus_InvalidTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBatchStatus_InvalidTransaction& operator=(ClientBatchStatus_InvalidTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBatchStatus_InvalidTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBatchStatus_InvalidTransaction* internal_default_instance() {
    return reinterpret_cast<const ClientBatchStatus_InvalidTransaction*>(
               &_ClientBatchStatus_InvalidTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientBatchStatus_InvalidTransaction* other);
  friend void swap(ClientBatchStatus_InvalidTransaction& a, ClientBatchStatus_InvalidTransaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBatchStatus_InvalidTransaction* New() const final {
    return CreateMaybeMessage<ClientBatchStatus_InvalidTransaction>(nullptr);
  }

  ClientBatchStatus_InvalidTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBatchStatus_InvalidTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBatchStatus_InvalidTransaction& from);
  void MergeFrom(const ClientBatchStatus_InvalidTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBatchStatus_InvalidTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBatchStatus.InvalidTransaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbatch_5fsubmit_2eproto);
    return ::descriptor_table_client_5fbatch_5fsubmit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string transaction_id = 1;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 1;
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // bytes extended_data = 3;
  void clear_extended_data();
  static const int kExtendedDataFieldNumber = 3;
  const std::string& extended_data() const;
  void set_extended_data(const std::string& value);
  void set_extended_data(std::string&& value);
  void set_extended_data(const char* value);
  void set_extended_data(const void* value, size_t size);
  std::string* mutable_extended_data();
  std::string* release_extended_data();
  void set_allocated_extended_data(std::string* extended_data);

  // @@protoc_insertion_point(class_scope:ClientBatchStatus.InvalidTransaction)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extended_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbatch_5fsubmit_2eproto;
};
// -------------------------------------------------------------------

class ClientBatchStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBatchStatus) */ {
 public:
  ClientBatchStatus();
  virtual ~ClientBatchStatus();

  ClientBatchStatus(const ClientBatchStatus& from);
  ClientBatchStatus(ClientBatchStatus&& from) noexcept
    : ClientBatchStatus() {
    *this = ::std::move(from);
  }

  inline ClientBatchStatus& operator=(const ClientBatchStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBatchStatus& operator=(ClientBatchStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBatchStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBatchStatus* internal_default_instance() {
    return reinterpret_cast<const ClientBatchStatus*>(
               &_ClientBatchStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientBatchStatus* other);
  friend void swap(ClientBatchStatus& a, ClientBatchStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBatchStatus* New() const final {
    return CreateMaybeMessage<ClientBatchStatus>(nullptr);
  }

  ClientBatchStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBatchStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBatchStatus& from);
  void MergeFrom(const ClientBatchStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBatchStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBatchStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbatch_5fsubmit_2eproto);
    return ::descriptor_table_client_5fbatch_5fsubmit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientBatchStatus_InvalidTransaction InvalidTransaction;

  typedef ClientBatchStatus_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientBatchStatus_Status_STATUS_UNSET;
  static constexpr Status COMMITTED =
    ClientBatchStatus_Status_COMMITTED;
  static constexpr Status INVALID =
    ClientBatchStatus_Status_INVALID;
  static constexpr Status PENDING =
    ClientBatchStatus_Status_PENDING;
  static constexpr Status UNKNOWN =
    ClientBatchStatus_Status_UNKNOWN;
  static inline bool Status_IsValid(int value) {
    return ClientBatchStatus_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientBatchStatus_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientBatchStatus_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientBatchStatus_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientBatchStatus_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientBatchStatus_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientBatchStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ClientBatchStatus.InvalidTransaction invalid_transactions = 3;
  int invalid_transactions_size() const;
  void clear_invalid_transactions();
  static const int kInvalidTransactionsFieldNumber = 3;
  ::ClientBatchStatus_InvalidTransaction* mutable_invalid_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientBatchStatus_InvalidTransaction >*
      mutable_invalid_transactions();
  const ::ClientBatchStatus_InvalidTransaction& invalid_transactions(int index) const;
  ::ClientBatchStatus_InvalidTransaction* add_invalid_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientBatchStatus_InvalidTransaction >&
      invalid_transactions() const;

  // string batch_id = 1;
  void clear_batch_id();
  static const int kBatchIdFieldNumber = 1;
  const std::string& batch_id() const;
  void set_batch_id(const std::string& value);
  void set_batch_id(std::string&& value);
  void set_batch_id(const char* value);
  void set_batch_id(const char* value, size_t size);
  std::string* mutable_batch_id();
  std::string* release_batch_id();
  void set_allocated_batch_id(std::string* batch_id);

  // .ClientBatchStatus.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::ClientBatchStatus_Status status() const;
  void set_status(::ClientBatchStatus_Status value);

  // @@protoc_insertion_point(class_scope:ClientBatchStatus)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientBatchStatus_InvalidTransaction > invalid_transactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr batch_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbatch_5fsubmit_2eproto;
};
// -------------------------------------------------------------------

class ClientBatchSubmitRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBatchSubmitRequest) */ {
 public:
  ClientBatchSubmitRequest();
  virtual ~ClientBatchSubmitRequest();

  ClientBatchSubmitRequest(const ClientBatchSubmitRequest& from);
  ClientBatchSubmitRequest(ClientBatchSubmitRequest&& from) noexcept
    : ClientBatchSubmitRequest() {
    *this = ::std::move(from);
  }

  inline ClientBatchSubmitRequest& operator=(const ClientBatchSubmitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBatchSubmitRequest& operator=(ClientBatchSubmitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBatchSubmitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBatchSubmitRequest* internal_default_instance() {
    return reinterpret_cast<const ClientBatchSubmitRequest*>(
               &_ClientBatchSubmitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClientBatchSubmitRequest* other);
  friend void swap(ClientBatchSubmitRequest& a, ClientBatchSubmitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBatchSubmitRequest* New() const final {
    return CreateMaybeMessage<ClientBatchSubmitRequest>(nullptr);
  }

  ClientBatchSubmitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBatchSubmitRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBatchSubmitRequest& from);
  void MergeFrom(const ClientBatchSubmitRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBatchSubmitRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBatchSubmitRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbatch_5fsubmit_2eproto);
    return ::descriptor_table_client_5fbatch_5fsubmit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Batch batches = 1;
  int batches_size() const;
  void clear_batches();
  static const int kBatchesFieldNumber = 1;
  ::Batch* mutable_batches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >*
      mutable_batches();
  const ::Batch& batches(int index) const;
  ::Batch* add_batches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >&
      batches() const;

  // @@protoc_insertion_point(class_scope:ClientBatchSubmitRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch > batches_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbatch_5fsubmit_2eproto;
};
// -------------------------------------------------------------------

class ClientBatchSubmitResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBatchSubmitResponse) */ {
 public:
  ClientBatchSubmitResponse();
  virtual ~ClientBatchSubmitResponse();

  ClientBatchSubmitResponse(const ClientBatchSubmitResponse& from);
  ClientBatchSubmitResponse(ClientBatchSubmitResponse&& from) noexcept
    : ClientBatchSubmitResponse() {
    *this = ::std::move(from);
  }

  inline ClientBatchSubmitResponse& operator=(const ClientBatchSubmitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBatchSubmitResponse& operator=(ClientBatchSubmitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBatchSubmitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBatchSubmitResponse* internal_default_instance() {
    return reinterpret_cast<const ClientBatchSubmitResponse*>(
               &_ClientBatchSubmitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ClientBatchSubmitResponse* other);
  friend void swap(ClientBatchSubmitResponse& a, ClientBatchSubmitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBatchSubmitResponse* New() const final {
    return CreateMaybeMessage<ClientBatchSubmitResponse>(nullptr);
  }

  ClientBatchSubmitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBatchSubmitResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBatchSubmitResponse& from);
  void MergeFrom(const ClientBatchSubmitResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBatchSubmitResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBatchSubmitResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbatch_5fsubmit_2eproto);
    return ::descriptor_table_client_5fbatch_5fsubmit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientBatchSubmitResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientBatchSubmitResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientBatchSubmitResponse_Status_OK;
  static constexpr Status INTERNAL_ERROR =
    ClientBatchSubmitResponse_Status_INTERNAL_ERROR;
  static constexpr Status INVALID_BATCH =
    ClientBatchSubmitResponse_Status_INVALID_BATCH;
  static constexpr Status QUEUE_FULL =
    ClientBatchSubmitResponse_Status_QUEUE_FULL;
  static inline bool Status_IsValid(int value) {
    return ClientBatchSubmitResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientBatchSubmitResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientBatchSubmitResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientBatchSubmitResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientBatchSubmitResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientBatchSubmitResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientBatchSubmitResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ClientBatchSubmitResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientBatchSubmitResponse_Status status() const;
  void set_status(::ClientBatchSubmitResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientBatchSubmitResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbatch_5fsubmit_2eproto;
};
// -------------------------------------------------------------------

class ClientBatchStatusRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBatchStatusRequest) */ {
 public:
  ClientBatchStatusRequest();
  virtual ~ClientBatchStatusRequest();

  ClientBatchStatusRequest(const ClientBatchStatusRequest& from);
  ClientBatchStatusRequest(ClientBatchStatusRequest&& from) noexcept
    : ClientBatchStatusRequest() {
    *this = ::std::move(from);
  }

  inline ClientBatchStatusRequest& operator=(const ClientBatchStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBatchStatusRequest& operator=(ClientBatchStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBatchStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBatchStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ClientBatchStatusRequest*>(
               &_ClientBatchStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ClientBatchStatusRequest* other);
  friend void swap(ClientBatchStatusRequest& a, ClientBatchStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBatchStatusRequest* New() const final {
    return CreateMaybeMessage<ClientBatchStatusRequest>(nullptr);
  }

  ClientBatchStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBatchStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBatchStatusRequest& from);
  void MergeFrom(const ClientBatchStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBatchStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBatchStatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbatch_5fsubmit_2eproto);
    return ::descriptor_table_client_5fbatch_5fsubmit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string batch_ids = 1;
  int batch_ids_size() const;
  void clear_batch_ids();
  static const int kBatchIdsFieldNumber = 1;
  const std::string& batch_ids(int index) const;
  std::string* mutable_batch_ids(int index);
  void set_batch_ids(int index, const std::string& value);
  void set_batch_ids(int index, std::string&& value);
  void set_batch_ids(int index, const char* value);
  void set_batch_ids(int index, const char* value, size_t size);
  std::string* add_batch_ids();
  void add_batch_ids(const std::string& value);
  void add_batch_ids(std::string&& value);
  void add_batch_ids(const char* value);
  void add_batch_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& batch_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_batch_ids();

  // bool wait = 2;
  void clear_wait();
  static const int kWaitFieldNumber = 2;
  bool wait() const;
  void set_wait(bool value);

  // uint32 timeout = 3;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:ClientBatchStatusRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> batch_ids_;
  bool wait_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbatch_5fsubmit_2eproto;
};
// -------------------------------------------------------------------

class ClientBatchStatusResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientBatchStatusResponse) */ {
 public:
  ClientBatchStatusResponse();
  virtual ~ClientBatchStatusResponse();

  ClientBatchStatusResponse(const ClientBatchStatusResponse& from);
  ClientBatchStatusResponse(ClientBatchStatusResponse&& from) noexcept
    : ClientBatchStatusResponse() {
    *this = ::std::move(from);
  }

  inline ClientBatchStatusResponse& operator=(const ClientBatchStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBatchStatusResponse& operator=(ClientBatchStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBatchStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBatchStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ClientBatchStatusResponse*>(
               &_ClientBatchStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ClientBatchStatusResponse* other);
  friend void swap(ClientBatchStatusResponse& a, ClientBatchStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBatchStatusResponse* New() const final {
    return CreateMaybeMessage<ClientBatchStatusResponse>(nullptr);
  }

  ClientBatchStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBatchStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBatchStatusResponse& from);
  void MergeFrom(const ClientBatchStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBatchStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientBatchStatusResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fbatch_5fsubmit_2eproto);
    return ::descriptor_table_client_5fbatch_5fsubmit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientBatchStatusResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientBatchStatusResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientBatchStatusResponse_Status_OK;
  static constexpr Status INTERNAL_ERROR =
    ClientBatchStatusResponse_Status_INTERNAL_ERROR;
  static constexpr Status NO_RESOURCE =
    ClientBatchStatusResponse_Status_NO_RESOURCE;
  static constexpr Status INVALID_ID =
    ClientBatchStatusResponse_Status_INVALID_ID;
  static inline bool Status_IsValid(int value) {
    return ClientBatchStatusResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientBatchStatusResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientBatchStatusResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientBatchStatusResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientBatchStatusResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientBatchStatusResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientBatchStatusResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ClientBatchStatus batch_statuses = 2;
  int batch_statuses_size() const;
  void clear_batch_statuses();
  static const int kBatchStatusesFieldNumber = 2;
  ::ClientBatchStatus* mutable_batch_statuses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientBatchStatus >*
      mutable_batch_statuses();
  const ::ClientBatchStatus& batch_statuses(int index) const;
  ::ClientBatchStatus* add_batch_statuses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientBatchStatus >&
      batch_statuses() const;

  // .ClientBatchStatusResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientBatchStatusResponse_Status status() const;
  void set_status(::ClientBatchStatusResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientBatchStatusResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientBatchStatus > batch_statuses_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fbatch_5fsubmit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientBatchStatus_InvalidTransaction

// string transaction_id = 1;
inline void ClientBatchStatus_InvalidTransaction::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientBatchStatus_InvalidTransaction::transaction_id() const {
  // @@protoc_insertion_point(field_get:ClientBatchStatus.InvalidTransaction.transaction_id)
  return transaction_id_.GetNoArena();
}
inline void ClientBatchStatus_InvalidTransaction::set_transaction_id(const std::string& value) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientBatchStatus.InvalidTransaction.transaction_id)
}
inline void ClientBatchStatus_InvalidTransaction::set_transaction_id(std::string&& value) {
  
  transaction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientBatchStatus.InvalidTransaction.transaction_id)
}
inline void ClientBatchStatus_InvalidTransaction::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientBatchStatus.InvalidTransaction.transaction_id)
}
inline void ClientBatchStatus_InvalidTransaction::set_transaction_id(const char* value, size_t size) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientBatchStatus.InvalidTransaction.transaction_id)
}
inline std::string* ClientBatchStatus_InvalidTransaction::mutable_transaction_id() {
  
  // @@protoc_insertion_point(field_mutable:ClientBatchStatus.InvalidTransaction.transaction_id)
  return transaction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientBatchStatus_InvalidTransaction::release_transaction_id() {
  // @@protoc_insertion_point(field_release:ClientBatchStatus.InvalidTransaction.transaction_id)
  
  return transaction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientBatchStatus_InvalidTransaction::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:ClientBatchStatus.InvalidTransaction.transaction_id)
}

// string message = 2;
inline void ClientBatchStatus_InvalidTransaction::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientBatchStatus_InvalidTransaction::message() const {
  // @@protoc_insertion_point(field_get:ClientBatchStatus.InvalidTransaction.message)
  return message_.GetNoArena();
}
inline void ClientBatchStatus_InvalidTransaction::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientBatchStatus.InvalidTransaction.message)
}
inline void ClientBatchStatus_InvalidTransaction::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientBatchStatus.InvalidTransaction.message)
}
inline void ClientBatchStatus_InvalidTransaction::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientBatchStatus.InvalidTransaction.message)
}
inline void ClientBatchStatus_InvalidTransaction::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientBatchStatus.InvalidTransaction.message)
}
inline std::string* ClientBatchStatus_InvalidTransaction::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ClientBatchStatus.InvalidTransaction.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientBatchStatus_InvalidTransaction::release_message() {
  // @@protoc_insertion_point(field_release:ClientBatchStatus.InvalidTransaction.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientBatchStatus_InvalidTransaction::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ClientBatchStatus.InvalidTransaction.message)
}

// bytes extended_data = 3;
inline void ClientBatchStatus_InvalidTransaction::clear_extended_data() {
  extended_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientBatchStatus_InvalidTransaction::extended_data() const {
  // @@protoc_insertion_point(field_get:ClientBatchStatus.InvalidTransaction.extended_data)
  return extended_data_.GetNoArena();
}
inline void ClientBatchStatus_InvalidTransaction::set_extended_data(const std::string& value) {
  
  extended_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientBatchStatus.InvalidTransaction.extended_data)
}
inline void ClientBatchStatus_InvalidTransaction::set_extended_data(std::string&& value) {
  
  extended_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientBatchStatus.InvalidTransaction.extended_data)
}
inline void ClientBatchStatus_InvalidTransaction::set_extended_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extended_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientBatchStatus.InvalidTransaction.extended_data)
}
inline void ClientBatchStatus_InvalidTransaction::set_extended_data(const void* value, size_t size) {
  
  extended_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientBatchStatus.InvalidTransaction.extended_data)
}
inline std::string* ClientBatchStatus_InvalidTransaction::mutable_extended_data() {
  
  // @@protoc_insertion_point(field_mutable:ClientBatchStatus.InvalidTransaction.extended_data)
  return extended_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientBatchStatus_InvalidTransaction::release_extended_data() {
  // @@protoc_insertion_point(field_release:ClientBatchStatus.InvalidTransaction.extended_data)
  
  return extended_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientBatchStatus_InvalidTransaction::set_allocated_extended_data(std::string* extended_data) {
  if (extended_data != nullptr) {
    
  } else {
    
  }
  extended_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extended_data);
  // @@protoc_insertion_point(field_set_allocated:ClientBatchStatus.InvalidTransaction.extended_data)
}

// -------------------------------------------------------------------

// ClientBatchStatus

// string batch_id = 1;
inline void ClientBatchStatus::clear_batch_id() {
  batch_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientBatchStatus::batch_id() const {
  // @@protoc_insertion_point(field_get:ClientBatchStatus.batch_id)
  return batch_id_.GetNoArena();
}
inline void ClientBatchStatus::set_batch_id(const std::string& value) {
  
  batch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientBatchStatus.batch_id)
}
inline void ClientBatchStatus::set_batch_id(std::string&& value) {
  
  batch_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientBatchStatus.batch_id)
}
inline void ClientBatchStatus::set_batch_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  batch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientBatchStatus.batch_id)
}
inline void ClientBatchStatus::set_batch_id(const char* value, size_t size) {
  
  batch_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientBatchStatus.batch_id)
}
inline std::string* ClientBatchStatus::mutable_batch_id() {
  
  // @@protoc_insertion_point(field_mutable:ClientBatchStatus.batch_id)
  return batch_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientBatchStatus::release_batch_id() {
  // @@protoc_insertion_point(field_release:ClientBatchStatus.batch_id)
  
  return batch_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientBatchStatus::set_allocated_batch_id(std::string* batch_id) {
  if (batch_id != nullptr) {
    
  } else {
    
  }
  batch_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), batch_id);
  // @@protoc_insertion_point(field_set_allocated:ClientBatchStatus.batch_id)
}

// .ClientBatchStatus.Status status = 2;
inline void ClientBatchStatus::clear_status() {
  status_ = 0;
}
inline ::ClientBatchStatus_Status ClientBatchStatus::status() const {
  // @@protoc_insertion_point(field_get:ClientBatchStatus.status)
  return static_cast< ::ClientBatchStatus_Status >(status_);
}
inline void ClientBatchStatus::set_status(::ClientBatchStatus_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientBatchStatus.status)
}

// repeated .ClientBatchStatus.InvalidTransaction invalid_transactions = 3;
inline int ClientBatchStatus::invalid_transactions_size() const {
  return invalid_transactions_.size();
}
inline void ClientBatchStatus::clear_invalid_transactions() {
  invalid_transactions_.Clear();
}
inline ::ClientBatchStatus_InvalidTransaction* ClientBatchStatus::mutable_invalid_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:ClientBatchStatus.invalid_transactions)
  return invalid_transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientBatchStatus_InvalidTransaction >*
ClientBatchStatus::mutable_invalid_transactions() {
  // @@protoc_insertion_point(field_mutable_list:ClientBatchStatus.invalid_transactions)
  return &invalid_transactions_;
}
inline const ::ClientBatchStatus_InvalidTransaction& ClientBatchStatus::invalid_transactions(int index) const {
  // @@protoc_insertion_point(field_get:ClientBatchStatus.invalid_transactions)
  return invalid_transactions_.Get(index);
}
inline ::ClientBatchStatus_InvalidTransaction* ClientBatchStatus::add_invalid_transactions() {
  // @@protoc_insertion_point(field_add:ClientBatchStatus.invalid_transactions)
  return invalid_transactions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientBatchStatus_InvalidTransaction >&
ClientBatchStatus::invalid_transactions() const {
  // @@protoc_insertion_point(field_list:ClientBatchStatus.invalid_transactions)
  return invalid_transactions_;
}

// -------------------------------------------------------------------

// ClientBatchSubmitRequest

// repeated .Batch batches = 1;
inline int ClientBatchSubmitRequest::batches_size() const {
  return batches_.size();
}
inline ::Batch* ClientBatchSubmitRequest::mutable_batches(int index) {
  // @@protoc_insertion_point(field_mutable:ClientBatchSubmitRequest.batches)
  return batches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >*
ClientBatchSubmitRequest::mutable_batches() {
  // @@protoc_insertion_point(field_mutable_list:ClientBatchSubmitRequest.batches)
  return &batches_;
}
inline const ::Batch& ClientBatchSubmitRequest::batches(int index) const {
  // @@protoc_insertion_point(field_get:ClientBatchSubmitRequest.batches)
  return batches_.Get(index);
}
inline ::Batch* ClientBatchSubmitRequest::add_batches() {
  // @@protoc_insertion_point(field_add:ClientBatchSubmitRequest.batches)
  return batches_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >&
ClientBatchSubmitRequest::batches() const {
  // @@protoc_insertion_point(field_list:ClientBatchSubmitRequest.batches)
  return batches_;
}

// -------------------------------------------------------------------

// ClientBatchSubmitResponse

// .ClientBatchSubmitResponse.Status status = 1;
inline void ClientBatchSubmitResponse::clear_status() {
  status_ = 0;
}
inline ::ClientBatchSubmitResponse_Status ClientBatchSubmitResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientBatchSubmitResponse.status)
  return static_cast< ::ClientBatchSubmitResponse_Status >(status_);
}
inline void ClientBatchSubmitResponse::set_status(::ClientBatchSubmitResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientBatchSubmitResponse.status)
}

// -------------------------------------------------------------------

// ClientBatchStatusRequest

// repeated string batch_ids = 1;
inline int ClientBatchStatusRequest::batch_ids_size() const {
  return batch_ids_.size();
}
inline void ClientBatchStatusRequest::clear_batch_ids() {
  batch_ids_.Clear();
}
inline const std::string& ClientBatchStatusRequest::batch_ids(int index) const {
  // @@protoc_insertion_point(field_get:ClientBatchStatusRequest.batch_ids)
  return batch_ids_.Get(index);
}
inline std::string* ClientBatchStatusRequest::mutable_batch_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ClientBatchStatusRequest.batch_ids)
  return batch_ids_.Mutable(index);
}
inline void ClientBatchStatusRequest::set_batch_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientBatchStatusRequest.batch_ids)
  batch_ids_.Mutable(index)->assign(value);
}
inline void ClientBatchStatusRequest::set_batch_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientBatchStatusRequest.batch_ids)
  batch_ids_.Mutable(index)->assign(std::move(value));
}
inline void ClientBatchStatusRequest::set_batch_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  batch_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientBatchStatusRequest.batch_ids)
}
inline void ClientBatchStatusRequest::set_batch_ids(int index, const char* value, size_t size) {
  batch_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientBatchStatusRequest.batch_ids)
}
inline std::string* ClientBatchStatusRequest::add_batch_ids() {
  // @@protoc_insertion_point(field_add_mutable:ClientBatchStatusRequest.batch_ids)
  return batch_ids_.Add();
}
inline void ClientBatchStatusRequest::add_batch_ids(const std::string& value) {
  batch_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientBatchStatusRequest.batch_ids)
}
inline void ClientBatchStatusRequest::add_batch_ids(std::string&& value) {
  batch_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientBatchStatusRequest.batch_ids)
}
inline void ClientBatchStatusRequest::add_batch_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  batch_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientBatchStatusRequest.batch_ids)
}
inline void ClientBatchStatusRequest::add_batch_ids(const char* value, size_t size) {
  batch_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientBatchStatusRequest.batch_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientBatchStatusRequest::batch_ids() const {
  // @@protoc_insertion_point(field_list:ClientBatchStatusRequest.batch_ids)
  return batch_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientBatchStatusRequest::mutable_batch_ids() {
  // @@protoc_insertion_point(field_mutable_list:ClientBatchStatusRequest.batch_ids)
  return &batch_ids_;
}

// bool wait = 2;
inline void ClientBatchStatusRequest::clear_wait() {
  wait_ = false;
}
inline bool ClientBatchStatusRequest::wait() const {
  // @@protoc_insertion_point(field_get:ClientBatchStatusRequest.wait)
  return wait_;
}
inline void ClientBatchStatusRequest::set_wait(bool value) {
  
  wait_ = value;
  // @@protoc_insertion_point(field_set:ClientBatchStatusRequest.wait)
}

// uint32 timeout = 3;
inline void ClientBatchStatusRequest::clear_timeout() {
  timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientBatchStatusRequest::timeout() const {
  // @@protoc_insertion_point(field_get:ClientBatchStatusRequest.timeout)
  return timeout_;
}
inline void ClientBatchStatusRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:ClientBatchStatusRequest.timeout)
}

// -------------------------------------------------------------------

// ClientBatchStatusResponse

// .ClientBatchStatusResponse.Status status = 1;
inline void ClientBatchStatusResponse::clear_status() {
  status_ = 0;
}
inline ::ClientBatchStatusResponse_Status ClientBatchStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientBatchStatusResponse.status)
  return static_cast< ::ClientBatchStatusResponse_Status >(status_);
}
inline void ClientBatchStatusResponse::set_status(::ClientBatchStatusResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientBatchStatusResponse.status)
}

// repeated .ClientBatchStatus batch_statuses = 2;
inline int ClientBatchStatusResponse::batch_statuses_size() const {
  return batch_statuses_.size();
}
inline void ClientBatchStatusResponse::clear_batch_statuses() {
  batch_statuses_.Clear();
}
inline ::ClientBatchStatus* ClientBatchStatusResponse::mutable_batch_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:ClientBatchStatusResponse.batch_statuses)
  return batch_statuses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientBatchStatus >*
ClientBatchStatusResponse::mutable_batch_statuses() {
  // @@protoc_insertion_point(field_mutable_list:ClientBatchStatusResponse.batch_statuses)
  return &batch_statuses_;
}
inline const ::ClientBatchStatus& ClientBatchStatusResponse::batch_statuses(int index) const {
  // @@protoc_insertion_point(field_get:ClientBatchStatusResponse.batch_statuses)
  return batch_statuses_.Get(index);
}
inline ::ClientBatchStatus* ClientBatchStatusResponse::add_batch_statuses() {
  // @@protoc_insertion_point(field_add:ClientBatchStatusResponse.batch_statuses)
  return batch_statuses_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientBatchStatus >&
ClientBatchStatusResponse::batch_statuses() const {
  // @@protoc_insertion_point(field_list:ClientBatchStatusResponse.batch_statuses)
  return batch_statuses_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClientBatchStatus_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientBatchStatus_Status>() {
  return ::ClientBatchStatus_Status_descriptor();
}
template <> struct is_proto_enum< ::ClientBatchSubmitResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientBatchSubmitResponse_Status>() {
  return ::ClientBatchSubmitResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ClientBatchStatusResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientBatchStatusResponse_Status>() {
  return ::ClientBatchStatusResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fbatch_5fsubmit_2eproto
