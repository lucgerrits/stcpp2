// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_transaction.proto

#include "client_transaction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_client_5flist_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientPagingControls_client_5flist_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5flist_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientPagingResponse_client_5flist_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5flist_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientSortControls_client_5flist_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_transaction_2eproto;
class ClientTransactionListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientTransactionListRequest> _instance;
} _ClientTransactionListRequest_default_instance_;
class ClientTransactionListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientTransactionListResponse> _instance;
} _ClientTransactionListResponse_default_instance_;
class ClientTransactionGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientTransactionGetRequest> _instance;
} _ClientTransactionGetRequest_default_instance_;
class ClientTransactionGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientTransactionGetResponse> _instance;
} _ClientTransactionGetResponse_default_instance_;
static void InitDefaultsscc_info_ClientTransactionGetRequest_client_5ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientTransactionGetRequest_default_instance_;
    new (ptr) ::ClientTransactionGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientTransactionGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientTransactionGetRequest_client_5ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientTransactionGetRequest_client_5ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_ClientTransactionGetResponse_client_5ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientTransactionGetResponse_default_instance_;
    new (ptr) ::ClientTransactionGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientTransactionGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientTransactionGetResponse_client_5ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClientTransactionGetResponse_client_5ftransaction_2eproto}, {
      &scc_info_Transaction_transaction_2eproto.base,}};

static void InitDefaultsscc_info_ClientTransactionListRequest_client_5ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientTransactionListRequest_default_instance_;
    new (ptr) ::ClientTransactionListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientTransactionListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClientTransactionListRequest_client_5ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ClientTransactionListRequest_client_5ftransaction_2eproto}, {
      &scc_info_ClientPagingControls_client_5flist_5fcontrol_2eproto.base,
      &scc_info_ClientSortControls_client_5flist_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_ClientTransactionListResponse_client_5ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientTransactionListResponse_default_instance_;
    new (ptr) ::ClientTransactionListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientTransactionListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClientTransactionListResponse_client_5ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ClientTransactionListResponse_client_5ftransaction_2eproto}, {
      &scc_info_Transaction_transaction_2eproto.base,
      &scc_info_ClientPagingResponse_client_5flist_5fcontrol_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_5ftransaction_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_5ftransaction_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_5ftransaction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_client_5ftransaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientTransactionListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientTransactionListRequest, head_id_),
  PROTOBUF_FIELD_OFFSET(::ClientTransactionListRequest, transaction_ids_),
  PROTOBUF_FIELD_OFFSET(::ClientTransactionListRequest, paging_),
  PROTOBUF_FIELD_OFFSET(::ClientTransactionListRequest, sorting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientTransactionListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientTransactionListResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ClientTransactionListResponse, transactions_),
  PROTOBUF_FIELD_OFFSET(::ClientTransactionListResponse, head_id_),
  PROTOBUF_FIELD_OFFSET(::ClientTransactionListResponse, paging_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientTransactionGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientTransactionGetRequest, transaction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientTransactionGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientTransactionGetResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ClientTransactionGetResponse, transaction_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ClientTransactionListRequest)},
  { 9, -1, sizeof(::ClientTransactionListResponse)},
  { 18, -1, sizeof(::ClientTransactionGetRequest)},
  { 24, -1, sizeof(::ClientTransactionGetResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientTransactionListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientTransactionListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientTransactionGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientTransactionGetResponse_default_instance_),
};

const char descriptor_table_protodef_client_5ftransaction_2eproto[] =
  "\n\030client_transaction.proto\032\021transaction."
  "proto\032\031client_list_control.proto\"\225\001\n\034Cli"
  "entTransactionListRequest\022\017\n\007head_id\030\001 \001"
  "(\t\022\027\n\017transaction_ids\030\002 \003(\t\022%\n\006paging\030\003 "
  "\001(\0132\025.ClientPagingControls\022$\n\007sorting\030\004 "
  "\003(\0132\023.ClientSortControls\"\316\002\n\035ClientTrans"
  "actionListResponse\0225\n\006status\030\001 \001(\0162%.Cli"
  "entTransactionListResponse.Status\022\"\n\014tra"
  "nsactions\030\002 \003(\0132\014.Transaction\022\017\n\007head_id"
  "\030\003 \001(\t\022%\n\006paging\030\004 \001(\0132\025.ClientPagingRes"
  "ponse\"\231\001\n\006Status\022\020\n\014STATUS_UNSET\020\000\022\006\n\002OK"
  "\020\001\022\022\n\016INTERNAL_ERROR\020\002\022\r\n\tNOT_READY\020\003\022\013\n"
  "\007NO_ROOT\020\004\022\017\n\013NO_RESOURCE\020\005\022\022\n\016INVALID_P"
  "AGING\020\006\022\020\n\014INVALID_SORT\020\007\022\016\n\nINVALID_ID\020"
  "\010\"5\n\033ClientTransactionGetRequest\022\026\n\016tran"
  "saction_id\030\001 \001(\t\"\320\001\n\034ClientTransactionGe"
  "tResponse\0224\n\006status\030\001 \001(\0162$.ClientTransa"
  "ctionGetResponse.Status\022!\n\013transaction\030\002"
  " \001(\0132\014.Transaction\"W\n\006Status\022\020\n\014STATUS_U"
  "NSET\020\000\022\006\n\002OK\020\001\022\022\n\016INTERNAL_ERROR\020\002\022\017\n\013NO"
  "_RESOURCE\020\005\022\016\n\nINVALID_ID\020\010B1\n\025sawtooth."
  "sdk.protobufP\001Z\026client_transaction_pb2b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_client_5ftransaction_2eproto_deps[2] = {
  &::descriptor_table_client_5flist_5fcontrol_2eproto,
  &::descriptor_table_transaction_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_client_5ftransaction_2eproto_sccs[4] = {
  &scc_info_ClientTransactionGetRequest_client_5ftransaction_2eproto.base,
  &scc_info_ClientTransactionGetResponse_client_5ftransaction_2eproto.base,
  &scc_info_ClientTransactionListRequest_client_5ftransaction_2eproto.base,
  &scc_info_ClientTransactionListResponse_client_5ftransaction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_5ftransaction_2eproto_once;
static bool descriptor_table_client_5ftransaction_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5ftransaction_2eproto = {
  &descriptor_table_client_5ftransaction_2eproto_initialized, descriptor_table_protodef_client_5ftransaction_2eproto, "client_transaction.proto", 886,
  &descriptor_table_client_5ftransaction_2eproto_once, descriptor_table_client_5ftransaction_2eproto_sccs, descriptor_table_client_5ftransaction_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_client_5ftransaction_2eproto::offsets,
  file_level_metadata_client_5ftransaction_2eproto, 4, file_level_enum_descriptors_client_5ftransaction_2eproto, file_level_service_descriptors_client_5ftransaction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_client_5ftransaction_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_client_5ftransaction_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientTransactionListResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5ftransaction_2eproto);
  return file_level_enum_descriptors_client_5ftransaction_2eproto[0];
}
bool ClientTransactionListResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientTransactionListResponse_Status ClientTransactionListResponse::STATUS_UNSET;
constexpr ClientTransactionListResponse_Status ClientTransactionListResponse::OK;
constexpr ClientTransactionListResponse_Status ClientTransactionListResponse::INTERNAL_ERROR;
constexpr ClientTransactionListResponse_Status ClientTransactionListResponse::NOT_READY;
constexpr ClientTransactionListResponse_Status ClientTransactionListResponse::NO_ROOT;
constexpr ClientTransactionListResponse_Status ClientTransactionListResponse::NO_RESOURCE;
constexpr ClientTransactionListResponse_Status ClientTransactionListResponse::INVALID_PAGING;
constexpr ClientTransactionListResponse_Status ClientTransactionListResponse::INVALID_SORT;
constexpr ClientTransactionListResponse_Status ClientTransactionListResponse::INVALID_ID;
constexpr ClientTransactionListResponse_Status ClientTransactionListResponse::Status_MIN;
constexpr ClientTransactionListResponse_Status ClientTransactionListResponse::Status_MAX;
constexpr int ClientTransactionListResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientTransactionGetResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5ftransaction_2eproto);
  return file_level_enum_descriptors_client_5ftransaction_2eproto[1];
}
bool ClientTransactionGetResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 5:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientTransactionGetResponse_Status ClientTransactionGetResponse::STATUS_UNSET;
constexpr ClientTransactionGetResponse_Status ClientTransactionGetResponse::OK;
constexpr ClientTransactionGetResponse_Status ClientTransactionGetResponse::INTERNAL_ERROR;
constexpr ClientTransactionGetResponse_Status ClientTransactionGetResponse::NO_RESOURCE;
constexpr ClientTransactionGetResponse_Status ClientTransactionGetResponse::INVALID_ID;
constexpr ClientTransactionGetResponse_Status ClientTransactionGetResponse::Status_MIN;
constexpr ClientTransactionGetResponse_Status ClientTransactionGetResponse::Status_MAX;
constexpr int ClientTransactionGetResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ClientTransactionListRequest::InitAsDefaultInstance() {
  ::_ClientTransactionListRequest_default_instance_._instance.get_mutable()->paging_ = const_cast< ::ClientPagingControls*>(
      ::ClientPagingControls::internal_default_instance());
}
class ClientTransactionListRequest::HasBitSetters {
 public:
  static const ::ClientPagingControls& paging(const ClientTransactionListRequest* msg);
};

const ::ClientPagingControls&
ClientTransactionListRequest::HasBitSetters::paging(const ClientTransactionListRequest* msg) {
  return *msg->paging_;
}
void ClientTransactionListRequest::clear_paging() {
  if (GetArenaNoVirtual() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
}
void ClientTransactionListRequest::clear_sorting() {
  sorting_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientTransactionListRequest::kHeadIdFieldNumber;
const int ClientTransactionListRequest::kTransactionIdsFieldNumber;
const int ClientTransactionListRequest::kPagingFieldNumber;
const int ClientTransactionListRequest::kSortingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientTransactionListRequest::ClientTransactionListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientTransactionListRequest)
}
ClientTransactionListRequest::ClientTransactionListRequest(const ClientTransactionListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transaction_ids_(from.transaction_ids_),
      sorting_(from.sorting_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  head_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.head_id().size() > 0) {
    head_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_id_);
  }
  if (from.has_paging()) {
    paging_ = new ::ClientPagingControls(*from.paging_);
  } else {
    paging_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ClientTransactionListRequest)
}

void ClientTransactionListRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientTransactionListRequest_client_5ftransaction_2eproto.base);
  head_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paging_ = nullptr;
}

ClientTransactionListRequest::~ClientTransactionListRequest() {
  // @@protoc_insertion_point(destructor:ClientTransactionListRequest)
  SharedDtor();
}

void ClientTransactionListRequest::SharedDtor() {
  head_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete paging_;
}

void ClientTransactionListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientTransactionListRequest& ClientTransactionListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientTransactionListRequest_client_5ftransaction_2eproto.base);
  return *internal_default_instance();
}


void ClientTransactionListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientTransactionListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_ids_.Clear();
  sorting_.Clear();
  head_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientTransactionListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string head_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_head_id(), ptr, ctx, "ClientTransactionListRequest.head_id");
        CHK_(ptr);
        break;
      }
      // repeated string transaction_ids = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_transaction_ids(), ptr, ctx, "ClientTransactionListRequest.transaction_ids");
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      // .ClientPagingControls paging = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_paging(), ptr);
        CHK_(ptr);
        break;
      }
      // repeated .ClientSortControls sorting = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_sorting(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 34) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientTransactionListRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientTransactionListRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string head_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_head_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->head_id().data(), static_cast<int>(this->head_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientTransactionListRequest.head_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string transaction_ids = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_transaction_ids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->transaction_ids(this->transaction_ids_size() - 1).data(),
            static_cast<int>(this->transaction_ids(this->transaction_ids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientTransactionListRequest.transaction_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ClientPagingControls paging = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_paging()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ClientSortControls sorting = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sorting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientTransactionListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientTransactionListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientTransactionListRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientTransactionListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string head_id = 1;
  if (this->head_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->head_id().data(), static_cast<int>(this->head_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientTransactionListRequest.head_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->head_id(), output);
  }

  // repeated string transaction_ids = 2;
  for (int i = 0, n = this->transaction_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transaction_ids(i).data(), static_cast<int>(this->transaction_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientTransactionListRequest.transaction_ids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->transaction_ids(i), output);
  }

  // .ClientPagingControls paging = 3;
  if (this->has_paging()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::paging(this), output);
  }

  // repeated .ClientSortControls sorting = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sorting_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->sorting(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientTransactionListRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientTransactionListRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientTransactionListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string head_id = 1;
  if (this->head_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->head_id().data(), static_cast<int>(this->head_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientTransactionListRequest.head_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->head_id(), target);
  }

  // repeated string transaction_ids = 2;
  for (int i = 0, n = this->transaction_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transaction_ids(i).data(), static_cast<int>(this->transaction_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientTransactionListRequest.transaction_ids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->transaction_ids(i), target);
  }

  // .ClientPagingControls paging = 3;
  if (this->has_paging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::paging(this), target);
  }

  // repeated .ClientSortControls sorting = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sorting_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->sorting(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientTransactionListRequest)
  return target;
}

size_t ClientTransactionListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientTransactionListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string transaction_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->transaction_ids_size());
  for (int i = 0, n = this->transaction_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->transaction_ids(i));
  }

  // repeated .ClientSortControls sorting = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->sorting_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sorting(static_cast<int>(i)));
    }
  }

  // string head_id = 1;
  if (this->head_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->head_id());
  }

  // .ClientPagingControls paging = 3;
  if (this->has_paging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paging_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientTransactionListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientTransactionListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientTransactionListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientTransactionListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientTransactionListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientTransactionListRequest)
    MergeFrom(*source);
  }
}

void ClientTransactionListRequest::MergeFrom(const ClientTransactionListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientTransactionListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transaction_ids_.MergeFrom(from.transaction_ids_);
  sorting_.MergeFrom(from.sorting_);
  if (from.head_id().size() > 0) {

    head_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_id_);
  }
  if (from.has_paging()) {
    mutable_paging()->::ClientPagingControls::MergeFrom(from.paging());
  }
}

void ClientTransactionListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientTransactionListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientTransactionListRequest::CopyFrom(const ClientTransactionListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientTransactionListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientTransactionListRequest::IsInitialized() const {
  return true;
}

void ClientTransactionListRequest::Swap(ClientTransactionListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientTransactionListRequest::InternalSwap(ClientTransactionListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transaction_ids_.InternalSwap(CastToBase(&other->transaction_ids_));
  CastToBase(&sorting_)->InternalSwap(CastToBase(&other->sorting_));
  head_id_.Swap(&other->head_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(paging_, other->paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientTransactionListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientTransactionListResponse::InitAsDefaultInstance() {
  ::_ClientTransactionListResponse_default_instance_._instance.get_mutable()->paging_ = const_cast< ::ClientPagingResponse*>(
      ::ClientPagingResponse::internal_default_instance());
}
class ClientTransactionListResponse::HasBitSetters {
 public:
  static const ::ClientPagingResponse& paging(const ClientTransactionListResponse* msg);
};

const ::ClientPagingResponse&
ClientTransactionListResponse::HasBitSetters::paging(const ClientTransactionListResponse* msg) {
  return *msg->paging_;
}
void ClientTransactionListResponse::clear_transactions() {
  transactions_.Clear();
}
void ClientTransactionListResponse::clear_paging() {
  if (GetArenaNoVirtual() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientTransactionListResponse::kStatusFieldNumber;
const int ClientTransactionListResponse::kTransactionsFieldNumber;
const int ClientTransactionListResponse::kHeadIdFieldNumber;
const int ClientTransactionListResponse::kPagingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientTransactionListResponse::ClientTransactionListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientTransactionListResponse)
}
ClientTransactionListResponse::ClientTransactionListResponse(const ClientTransactionListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  head_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.head_id().size() > 0) {
    head_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_id_);
  }
  if (from.has_paging()) {
    paging_ = new ::ClientPagingResponse(*from.paging_);
  } else {
    paging_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ClientTransactionListResponse)
}

void ClientTransactionListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientTransactionListResponse_client_5ftransaction_2eproto.base);
  head_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&paging_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&paging_)) + sizeof(status_));
}

ClientTransactionListResponse::~ClientTransactionListResponse() {
  // @@protoc_insertion_point(destructor:ClientTransactionListResponse)
  SharedDtor();
}

void ClientTransactionListResponse::SharedDtor() {
  head_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete paging_;
}

void ClientTransactionListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientTransactionListResponse& ClientTransactionListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientTransactionListResponse_client_5ftransaction_2eproto.base);
  return *internal_default_instance();
}


void ClientTransactionListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientTransactionListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  head_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientTransactionListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientTransactionListResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ClientTransactionListResponse_Status>(val));
        break;
      }
      // repeated .Transaction transactions = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_transactions(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      // string head_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_head_id(), ptr, ctx, "ClientTransactionListResponse.head_id");
        CHK_(ptr);
        break;
      }
      // .ClientPagingResponse paging = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_paging(), ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientTransactionListResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientTransactionListResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ClientTransactionListResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ClientTransactionListResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Transaction transactions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_transactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string head_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_head_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->head_id().data(), static_cast<int>(this->head_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientTransactionListResponse.head_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ClientPagingResponse paging = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_paging()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientTransactionListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientTransactionListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientTransactionListResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientTransactionListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientTransactionListResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .Transaction transactions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->transactions(static_cast<int>(i)),
      output);
  }

  // string head_id = 3;
  if (this->head_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->head_id().data(), static_cast<int>(this->head_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientTransactionListResponse.head_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->head_id(), output);
  }

  // .ClientPagingResponse paging = 4;
  if (this->has_paging()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::paging(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientTransactionListResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientTransactionListResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientTransactionListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientTransactionListResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .Transaction transactions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->transactions(static_cast<int>(i)), target);
  }

  // string head_id = 3;
  if (this->head_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->head_id().data(), static_cast<int>(this->head_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientTransactionListResponse.head_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->head_id(), target);
  }

  // .ClientPagingResponse paging = 4;
  if (this->has_paging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::paging(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientTransactionListResponse)
  return target;
}

size_t ClientTransactionListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientTransactionListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Transaction transactions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->transactions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->transactions(static_cast<int>(i)));
    }
  }

  // string head_id = 3;
  if (this->head_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->head_id());
  }

  // .ClientPagingResponse paging = 4;
  if (this->has_paging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paging_);
  }

  // .ClientTransactionListResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientTransactionListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientTransactionListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientTransactionListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientTransactionListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientTransactionListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientTransactionListResponse)
    MergeFrom(*source);
  }
}

void ClientTransactionListResponse::MergeFrom(const ClientTransactionListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientTransactionListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (from.head_id().size() > 0) {

    head_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_id_);
  }
  if (from.has_paging()) {
    mutable_paging()->::ClientPagingResponse::MergeFrom(from.paging());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ClientTransactionListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientTransactionListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientTransactionListResponse::CopyFrom(const ClientTransactionListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientTransactionListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientTransactionListResponse::IsInitialized() const {
  return true;
}

void ClientTransactionListResponse::Swap(ClientTransactionListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientTransactionListResponse::InternalSwap(ClientTransactionListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&transactions_)->InternalSwap(CastToBase(&other->transactions_));
  head_id_.Swap(&other->head_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(paging_, other->paging_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientTransactionListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientTransactionGetRequest::InitAsDefaultInstance() {
}
class ClientTransactionGetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientTransactionGetRequest::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientTransactionGetRequest::ClientTransactionGetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientTransactionGetRequest)
}
ClientTransactionGetRequest::ClientTransactionGetRequest(const ClientTransactionGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.transaction_id().size() > 0) {
    transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientTransactionGetRequest)
}

void ClientTransactionGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientTransactionGetRequest_client_5ftransaction_2eproto.base);
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientTransactionGetRequest::~ClientTransactionGetRequest() {
  // @@protoc_insertion_point(destructor:ClientTransactionGetRequest)
  SharedDtor();
}

void ClientTransactionGetRequest::SharedDtor() {
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientTransactionGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientTransactionGetRequest& ClientTransactionGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientTransactionGetRequest_client_5ftransaction_2eproto.base);
  return *internal_default_instance();
}


void ClientTransactionGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientTransactionGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientTransactionGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transaction_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_transaction_id(), ptr, ctx, "ClientTransactionGetRequest.transaction_id");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientTransactionGetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientTransactionGetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string transaction_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->transaction_id().data(), static_cast<int>(this->transaction_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientTransactionGetRequest.transaction_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientTransactionGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientTransactionGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientTransactionGetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientTransactionGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transaction_id = 1;
  if (this->transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transaction_id().data(), static_cast<int>(this->transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientTransactionGetRequest.transaction_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientTransactionGetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientTransactionGetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientTransactionGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transaction_id = 1;
  if (this->transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transaction_id().data(), static_cast<int>(this->transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientTransactionGetRequest.transaction_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientTransactionGetRequest)
  return target;
}

size_t ClientTransactionGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientTransactionGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transaction_id = 1;
  if (this->transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->transaction_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientTransactionGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientTransactionGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientTransactionGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientTransactionGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientTransactionGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientTransactionGetRequest)
    MergeFrom(*source);
  }
}

void ClientTransactionGetRequest::MergeFrom(const ClientTransactionGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientTransactionGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction_id().size() > 0) {

    transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
}

void ClientTransactionGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientTransactionGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientTransactionGetRequest::CopyFrom(const ClientTransactionGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientTransactionGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientTransactionGetRequest::IsInitialized() const {
  return true;
}

void ClientTransactionGetRequest::Swap(ClientTransactionGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientTransactionGetRequest::InternalSwap(ClientTransactionGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transaction_id_.Swap(&other->transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientTransactionGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientTransactionGetResponse::InitAsDefaultInstance() {
  ::_ClientTransactionGetResponse_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::Transaction*>(
      ::Transaction::internal_default_instance());
}
class ClientTransactionGetResponse::HasBitSetters {
 public:
  static const ::Transaction& transaction(const ClientTransactionGetResponse* msg);
};

const ::Transaction&
ClientTransactionGetResponse::HasBitSetters::transaction(const ClientTransactionGetResponse* msg) {
  return *msg->transaction_;
}
void ClientTransactionGetResponse::clear_transaction() {
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientTransactionGetResponse::kStatusFieldNumber;
const int ClientTransactionGetResponse::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientTransactionGetResponse::ClientTransactionGetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientTransactionGetResponse)
}
ClientTransactionGetResponse::ClientTransactionGetResponse(const ClientTransactionGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transaction()) {
    transaction_ = new ::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ClientTransactionGetResponse)
}

void ClientTransactionGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientTransactionGetResponse_client_5ftransaction_2eproto.base);
  ::memset(&transaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(status_));
}

ClientTransactionGetResponse::~ClientTransactionGetResponse() {
  // @@protoc_insertion_point(destructor:ClientTransactionGetResponse)
  SharedDtor();
}

void ClientTransactionGetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete transaction_;
}

void ClientTransactionGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientTransactionGetResponse& ClientTransactionGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientTransactionGetResponse_client_5ftransaction_2eproto.base);
  return *internal_default_instance();
}


void ClientTransactionGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientTransactionGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientTransactionGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientTransactionGetResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ClientTransactionGetResponse_Status>(val));
        break;
      }
      // .Transaction transaction = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_transaction(), ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientTransactionGetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientTransactionGetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ClientTransactionGetResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ClientTransactionGetResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Transaction transaction = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientTransactionGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientTransactionGetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientTransactionGetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientTransactionGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientTransactionGetResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // .Transaction transaction = 2;
  if (this->has_transaction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::transaction(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientTransactionGetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientTransactionGetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientTransactionGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientTransactionGetResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // .Transaction transaction = 2;
  if (this->has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::transaction(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientTransactionGetResponse)
  return target;
}

size_t ClientTransactionGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientTransactionGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Transaction transaction = 2;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // .ClientTransactionGetResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientTransactionGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientTransactionGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientTransactionGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientTransactionGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientTransactionGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientTransactionGetResponse)
    MergeFrom(*source);
  }
}

void ClientTransactionGetResponse::MergeFrom(const ClientTransactionGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientTransactionGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transaction()) {
    mutable_transaction()->::Transaction::MergeFrom(from.transaction());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ClientTransactionGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientTransactionGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientTransactionGetResponse::CopyFrom(const ClientTransactionGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientTransactionGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientTransactionGetResponse::IsInitialized() const {
  return true;
}

void ClientTransactionGetResponse::Swap(ClientTransactionGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientTransactionGetResponse::InternalSwap(ClientTransactionGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientTransactionGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ClientTransactionListRequest* Arena::CreateMaybeMessage< ::ClientTransactionListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientTransactionListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientTransactionListResponse* Arena::CreateMaybeMessage< ::ClientTransactionListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ClientTransactionListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientTransactionGetRequest* Arena::CreateMaybeMessage< ::ClientTransactionGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientTransactionGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientTransactionGetResponse* Arena::CreateMaybeMessage< ::ClientTransactionGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ClientTransactionGetResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
