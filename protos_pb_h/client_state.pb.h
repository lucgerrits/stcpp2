// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client_list_control.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fstate_2eproto;
class ClientStateGetRequest;
class ClientStateGetRequestDefaultTypeInternal;
extern ClientStateGetRequestDefaultTypeInternal _ClientStateGetRequest_default_instance_;
class ClientStateGetResponse;
class ClientStateGetResponseDefaultTypeInternal;
extern ClientStateGetResponseDefaultTypeInternal _ClientStateGetResponse_default_instance_;
class ClientStateListRequest;
class ClientStateListRequestDefaultTypeInternal;
extern ClientStateListRequestDefaultTypeInternal _ClientStateListRequest_default_instance_;
class ClientStateListResponse;
class ClientStateListResponseDefaultTypeInternal;
extern ClientStateListResponseDefaultTypeInternal _ClientStateListResponse_default_instance_;
class ClientStateListResponse_Entry;
class ClientStateListResponse_EntryDefaultTypeInternal;
extern ClientStateListResponse_EntryDefaultTypeInternal _ClientStateListResponse_Entry_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientStateGetRequest* Arena::CreateMaybeMessage<::ClientStateGetRequest>(Arena*);
template<> ::ClientStateGetResponse* Arena::CreateMaybeMessage<::ClientStateGetResponse>(Arena*);
template<> ::ClientStateListRequest* Arena::CreateMaybeMessage<::ClientStateListRequest>(Arena*);
template<> ::ClientStateListResponse* Arena::CreateMaybeMessage<::ClientStateListResponse>(Arena*);
template<> ::ClientStateListResponse_Entry* Arena::CreateMaybeMessage<::ClientStateListResponse_Entry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ClientStateListResponse_Status : int {
  ClientStateListResponse_Status_STATUS_UNSET = 0,
  ClientStateListResponse_Status_OK = 1,
  ClientStateListResponse_Status_INTERNAL_ERROR = 2,
  ClientStateListResponse_Status_NOT_READY = 3,
  ClientStateListResponse_Status_NO_ROOT = 4,
  ClientStateListResponse_Status_NO_RESOURCE = 5,
  ClientStateListResponse_Status_INVALID_PAGING = 6,
  ClientStateListResponse_Status_INVALID_SORT = 7,
  ClientStateListResponse_Status_INVALID_ADDRESS = 8,
  ClientStateListResponse_Status_INVALID_ROOT = 9,
  ClientStateListResponse_Status_ClientStateListResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientStateListResponse_Status_ClientStateListResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientStateListResponse_Status_IsValid(int value);
constexpr ClientStateListResponse_Status ClientStateListResponse_Status_Status_MIN = ClientStateListResponse_Status_STATUS_UNSET;
constexpr ClientStateListResponse_Status ClientStateListResponse_Status_Status_MAX = ClientStateListResponse_Status_INVALID_ROOT;
constexpr int ClientStateListResponse_Status_Status_ARRAYSIZE = ClientStateListResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientStateListResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientStateListResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientStateListResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientStateListResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientStateListResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientStateListResponse_Status_Parse(
    const std::string& name, ClientStateListResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientStateListResponse_Status>(
    ClientStateListResponse_Status_descriptor(), name, value);
}
enum ClientStateGetResponse_Status : int {
  ClientStateGetResponse_Status_STATUS_UNSET = 0,
  ClientStateGetResponse_Status_OK = 1,
  ClientStateGetResponse_Status_INTERNAL_ERROR = 2,
  ClientStateGetResponse_Status_NOT_READY = 3,
  ClientStateGetResponse_Status_NO_ROOT = 4,
  ClientStateGetResponse_Status_NO_RESOURCE = 5,
  ClientStateGetResponse_Status_INVALID_ADDRESS = 6,
  ClientStateGetResponse_Status_INVALID_ROOT = 7,
  ClientStateGetResponse_Status_ClientStateGetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientStateGetResponse_Status_ClientStateGetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientStateGetResponse_Status_IsValid(int value);
constexpr ClientStateGetResponse_Status ClientStateGetResponse_Status_Status_MIN = ClientStateGetResponse_Status_STATUS_UNSET;
constexpr ClientStateGetResponse_Status ClientStateGetResponse_Status_Status_MAX = ClientStateGetResponse_Status_INVALID_ROOT;
constexpr int ClientStateGetResponse_Status_Status_ARRAYSIZE = ClientStateGetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientStateGetResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientStateGetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientStateGetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientStateGetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientStateGetResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientStateGetResponse_Status_Parse(
    const std::string& name, ClientStateGetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientStateGetResponse_Status>(
    ClientStateGetResponse_Status_descriptor(), name, value);
}
// ===================================================================

class ClientStateListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientStateListRequest) */ {
 public:
  ClientStateListRequest();
  virtual ~ClientStateListRequest();

  ClientStateListRequest(const ClientStateListRequest& from);
  ClientStateListRequest(ClientStateListRequest&& from) noexcept
    : ClientStateListRequest() {
    *this = ::std::move(from);
  }

  inline ClientStateListRequest& operator=(const ClientStateListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStateListRequest& operator=(ClientStateListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientStateListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStateListRequest* internal_default_instance() {
    return reinterpret_cast<const ClientStateListRequest*>(
               &_ClientStateListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientStateListRequest* other);
  friend void swap(ClientStateListRequest& a, ClientStateListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientStateListRequest* New() const final {
    return CreateMaybeMessage<ClientStateListRequest>(nullptr);
  }

  ClientStateListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientStateListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientStateListRequest& from);
  void MergeFrom(const ClientStateListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStateListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientStateListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fstate_2eproto);
    return ::descriptor_table_client_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ClientSortControls sorting = 5;
  int sorting_size() const;
  void clear_sorting();
  static const int kSortingFieldNumber = 5;
  ::ClientSortControls* mutable_sorting(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >*
      mutable_sorting();
  const ::ClientSortControls& sorting(int index) const;
  ::ClientSortControls* add_sorting();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >&
      sorting() const;

  // string state_root = 1;
  void clear_state_root();
  static const int kStateRootFieldNumber = 1;
  const std::string& state_root() const;
  void set_state_root(const std::string& value);
  void set_state_root(std::string&& value);
  void set_state_root(const char* value);
  void set_state_root(const char* value, size_t size);
  std::string* mutable_state_root();
  std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);

  // string address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // .ClientPagingControls paging = 4;
  bool has_paging() const;
  void clear_paging();
  static const int kPagingFieldNumber = 4;
  const ::ClientPagingControls& paging() const;
  ::ClientPagingControls* release_paging();
  ::ClientPagingControls* mutable_paging();
  void set_allocated_paging(::ClientPagingControls* paging);

  // @@protoc_insertion_point(class_scope:ClientStateListRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls > sorting_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::ClientPagingControls* paging_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstate_2eproto;
};
// -------------------------------------------------------------------

class ClientStateListResponse_Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientStateListResponse.Entry) */ {
 public:
  ClientStateListResponse_Entry();
  virtual ~ClientStateListResponse_Entry();

  ClientStateListResponse_Entry(const ClientStateListResponse_Entry& from);
  ClientStateListResponse_Entry(ClientStateListResponse_Entry&& from) noexcept
    : ClientStateListResponse_Entry() {
    *this = ::std::move(from);
  }

  inline ClientStateListResponse_Entry& operator=(const ClientStateListResponse_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStateListResponse_Entry& operator=(ClientStateListResponse_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientStateListResponse_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStateListResponse_Entry* internal_default_instance() {
    return reinterpret_cast<const ClientStateListResponse_Entry*>(
               &_ClientStateListResponse_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientStateListResponse_Entry* other);
  friend void swap(ClientStateListResponse_Entry& a, ClientStateListResponse_Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientStateListResponse_Entry* New() const final {
    return CreateMaybeMessage<ClientStateListResponse_Entry>(nullptr);
  }

  ClientStateListResponse_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientStateListResponse_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientStateListResponse_Entry& from);
  void MergeFrom(const ClientStateListResponse_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStateListResponse_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientStateListResponse.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fstate_2eproto);
    return ::descriptor_table_client_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:ClientStateListResponse.Entry)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstate_2eproto;
};
// -------------------------------------------------------------------

class ClientStateListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientStateListResponse) */ {
 public:
  ClientStateListResponse();
  virtual ~ClientStateListResponse();

  ClientStateListResponse(const ClientStateListResponse& from);
  ClientStateListResponse(ClientStateListResponse&& from) noexcept
    : ClientStateListResponse() {
    *this = ::std::move(from);
  }

  inline ClientStateListResponse& operator=(const ClientStateListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStateListResponse& operator=(ClientStateListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientStateListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStateListResponse* internal_default_instance() {
    return reinterpret_cast<const ClientStateListResponse*>(
               &_ClientStateListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClientStateListResponse* other);
  friend void swap(ClientStateListResponse& a, ClientStateListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientStateListResponse* New() const final {
    return CreateMaybeMessage<ClientStateListResponse>(nullptr);
  }

  ClientStateListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientStateListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientStateListResponse& from);
  void MergeFrom(const ClientStateListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStateListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientStateListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fstate_2eproto);
    return ::descriptor_table_client_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientStateListResponse_Entry Entry;

  typedef ClientStateListResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientStateListResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientStateListResponse_Status_OK;
  static constexpr Status INTERNAL_ERROR =
    ClientStateListResponse_Status_INTERNAL_ERROR;
  static constexpr Status NOT_READY =
    ClientStateListResponse_Status_NOT_READY;
  static constexpr Status NO_ROOT =
    ClientStateListResponse_Status_NO_ROOT;
  static constexpr Status NO_RESOURCE =
    ClientStateListResponse_Status_NO_RESOURCE;
  static constexpr Status INVALID_PAGING =
    ClientStateListResponse_Status_INVALID_PAGING;
  static constexpr Status INVALID_SORT =
    ClientStateListResponse_Status_INVALID_SORT;
  static constexpr Status INVALID_ADDRESS =
    ClientStateListResponse_Status_INVALID_ADDRESS;
  static constexpr Status INVALID_ROOT =
    ClientStateListResponse_Status_INVALID_ROOT;
  static inline bool Status_IsValid(int value) {
    return ClientStateListResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientStateListResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientStateListResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientStateListResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientStateListResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientStateListResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientStateListResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ClientStateListResponse.Entry entries = 2;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 2;
  ::ClientStateListResponse_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientStateListResponse_Entry >*
      mutable_entries();
  const ::ClientStateListResponse_Entry& entries(int index) const;
  ::ClientStateListResponse_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientStateListResponse_Entry >&
      entries() const;

  // string state_root = 3;
  void clear_state_root();
  static const int kStateRootFieldNumber = 3;
  const std::string& state_root() const;
  void set_state_root(const std::string& value);
  void set_state_root(std::string&& value);
  void set_state_root(const char* value);
  void set_state_root(const char* value, size_t size);
  std::string* mutable_state_root();
  std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);

  // .ClientPagingResponse paging = 4;
  bool has_paging() const;
  void clear_paging();
  static const int kPagingFieldNumber = 4;
  const ::ClientPagingResponse& paging() const;
  ::ClientPagingResponse* release_paging();
  ::ClientPagingResponse* mutable_paging();
  void set_allocated_paging(::ClientPagingResponse* paging);

  // .ClientStateListResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientStateListResponse_Status status() const;
  void set_status(::ClientStateListResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientStateListResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientStateListResponse_Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
  ::ClientPagingResponse* paging_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstate_2eproto;
};
// -------------------------------------------------------------------

class ClientStateGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientStateGetRequest) */ {
 public:
  ClientStateGetRequest();
  virtual ~ClientStateGetRequest();

  ClientStateGetRequest(const ClientStateGetRequest& from);
  ClientStateGetRequest(ClientStateGetRequest&& from) noexcept
    : ClientStateGetRequest() {
    *this = ::std::move(from);
  }

  inline ClientStateGetRequest& operator=(const ClientStateGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStateGetRequest& operator=(ClientStateGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientStateGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStateGetRequest* internal_default_instance() {
    return reinterpret_cast<const ClientStateGetRequest*>(
               &_ClientStateGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ClientStateGetRequest* other);
  friend void swap(ClientStateGetRequest& a, ClientStateGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientStateGetRequest* New() const final {
    return CreateMaybeMessage<ClientStateGetRequest>(nullptr);
  }

  ClientStateGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientStateGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientStateGetRequest& from);
  void MergeFrom(const ClientStateGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStateGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientStateGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fstate_2eproto);
    return ::descriptor_table_client_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string state_root = 1;
  void clear_state_root();
  static const int kStateRootFieldNumber = 1;
  const std::string& state_root() const;
  void set_state_root(const std::string& value);
  void set_state_root(std::string&& value);
  void set_state_root(const char* value);
  void set_state_root(const char* value, size_t size);
  std::string* mutable_state_root();
  std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);

  // string address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // @@protoc_insertion_point(class_scope:ClientStateGetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstate_2eproto;
};
// -------------------------------------------------------------------

class ClientStateGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientStateGetResponse) */ {
 public:
  ClientStateGetResponse();
  virtual ~ClientStateGetResponse();

  ClientStateGetResponse(const ClientStateGetResponse& from);
  ClientStateGetResponse(ClientStateGetResponse&& from) noexcept
    : ClientStateGetResponse() {
    *this = ::std::move(from);
  }

  inline ClientStateGetResponse& operator=(const ClientStateGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStateGetResponse& operator=(ClientStateGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientStateGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStateGetResponse* internal_default_instance() {
    return reinterpret_cast<const ClientStateGetResponse*>(
               &_ClientStateGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ClientStateGetResponse* other);
  friend void swap(ClientStateGetResponse& a, ClientStateGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientStateGetResponse* New() const final {
    return CreateMaybeMessage<ClientStateGetResponse>(nullptr);
  }

  ClientStateGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientStateGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientStateGetResponse& from);
  void MergeFrom(const ClientStateGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStateGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientStateGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fstate_2eproto);
    return ::descriptor_table_client_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientStateGetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientStateGetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientStateGetResponse_Status_OK;
  static constexpr Status INTERNAL_ERROR =
    ClientStateGetResponse_Status_INTERNAL_ERROR;
  static constexpr Status NOT_READY =
    ClientStateGetResponse_Status_NOT_READY;
  static constexpr Status NO_ROOT =
    ClientStateGetResponse_Status_NO_ROOT;
  static constexpr Status NO_RESOURCE =
    ClientStateGetResponse_Status_NO_RESOURCE;
  static constexpr Status INVALID_ADDRESS =
    ClientStateGetResponse_Status_INVALID_ADDRESS;
  static constexpr Status INVALID_ROOT =
    ClientStateGetResponse_Status_INVALID_ROOT;
  static inline bool Status_IsValid(int value) {
    return ClientStateGetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientStateGetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientStateGetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientStateGetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientStateGetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientStateGetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientStateGetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // string state_root = 3;
  void clear_state_root();
  static const int kStateRootFieldNumber = 3;
  const std::string& state_root() const;
  void set_state_root(const std::string& value);
  void set_state_root(std::string&& value);
  void set_state_root(const char* value);
  void set_state_root(const char* value, size_t size);
  std::string* mutable_state_root();
  std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);

  // .ClientStateGetResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientStateGetResponse_Status status() const;
  void set_status(::ClientStateGetResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientStateGetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientStateListRequest

// string state_root = 1;
inline void ClientStateListRequest::clear_state_root() {
  state_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientStateListRequest::state_root() const {
  // @@protoc_insertion_point(field_get:ClientStateListRequest.state_root)
  return state_root_.GetNoArena();
}
inline void ClientStateListRequest::set_state_root(const std::string& value) {
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientStateListRequest.state_root)
}
inline void ClientStateListRequest::set_state_root(std::string&& value) {
  
  state_root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientStateListRequest.state_root)
}
inline void ClientStateListRequest::set_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientStateListRequest.state_root)
}
inline void ClientStateListRequest::set_state_root(const char* value, size_t size) {
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientStateListRequest.state_root)
}
inline std::string* ClientStateListRequest::mutable_state_root() {
  
  // @@protoc_insertion_point(field_mutable:ClientStateListRequest.state_root)
  return state_root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientStateListRequest::release_state_root() {
  // @@protoc_insertion_point(field_release:ClientStateListRequest.state_root)
  
  return state_root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStateListRequest::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  state_root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_root);
  // @@protoc_insertion_point(field_set_allocated:ClientStateListRequest.state_root)
}

// string address = 3;
inline void ClientStateListRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientStateListRequest::address() const {
  // @@protoc_insertion_point(field_get:ClientStateListRequest.address)
  return address_.GetNoArena();
}
inline void ClientStateListRequest::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientStateListRequest.address)
}
inline void ClientStateListRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientStateListRequest.address)
}
inline void ClientStateListRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientStateListRequest.address)
}
inline void ClientStateListRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientStateListRequest.address)
}
inline std::string* ClientStateListRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:ClientStateListRequest.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientStateListRequest::release_address() {
  // @@protoc_insertion_point(field_release:ClientStateListRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStateListRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ClientStateListRequest.address)
}

// .ClientPagingControls paging = 4;
inline bool ClientStateListRequest::has_paging() const {
  return this != internal_default_instance() && paging_ != nullptr;
}
inline const ::ClientPagingControls& ClientStateListRequest::paging() const {
  const ::ClientPagingControls* p = paging_;
  // @@protoc_insertion_point(field_get:ClientStateListRequest.paging)
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientPagingControls*>(
      &::_ClientPagingControls_default_instance_);
}
inline ::ClientPagingControls* ClientStateListRequest::release_paging() {
  // @@protoc_insertion_point(field_release:ClientStateListRequest.paging)
  
  ::ClientPagingControls* temp = paging_;
  paging_ = nullptr;
  return temp;
}
inline ::ClientPagingControls* ClientStateListRequest::mutable_paging() {
  
  if (paging_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientPagingControls>(GetArenaNoVirtual());
    paging_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ClientStateListRequest.paging)
  return paging_;
}
inline void ClientStateListRequest::set_allocated_paging(::ClientPagingControls* paging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(paging_);
  }
  if (paging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      paging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paging, submessage_arena);
    }
    
  } else {
    
  }
  paging_ = paging;
  // @@protoc_insertion_point(field_set_allocated:ClientStateListRequest.paging)
}

// repeated .ClientSortControls sorting = 5;
inline int ClientStateListRequest::sorting_size() const {
  return sorting_.size();
}
inline ::ClientSortControls* ClientStateListRequest::mutable_sorting(int index) {
  // @@protoc_insertion_point(field_mutable:ClientStateListRequest.sorting)
  return sorting_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >*
ClientStateListRequest::mutable_sorting() {
  // @@protoc_insertion_point(field_mutable_list:ClientStateListRequest.sorting)
  return &sorting_;
}
inline const ::ClientSortControls& ClientStateListRequest::sorting(int index) const {
  // @@protoc_insertion_point(field_get:ClientStateListRequest.sorting)
  return sorting_.Get(index);
}
inline ::ClientSortControls* ClientStateListRequest::add_sorting() {
  // @@protoc_insertion_point(field_add:ClientStateListRequest.sorting)
  return sorting_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >&
ClientStateListRequest::sorting() const {
  // @@protoc_insertion_point(field_list:ClientStateListRequest.sorting)
  return sorting_;
}

// -------------------------------------------------------------------

// ClientStateListResponse_Entry

// string address = 1;
inline void ClientStateListResponse_Entry::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientStateListResponse_Entry::address() const {
  // @@protoc_insertion_point(field_get:ClientStateListResponse.Entry.address)
  return address_.GetNoArena();
}
inline void ClientStateListResponse_Entry::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientStateListResponse.Entry.address)
}
inline void ClientStateListResponse_Entry::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientStateListResponse.Entry.address)
}
inline void ClientStateListResponse_Entry::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientStateListResponse.Entry.address)
}
inline void ClientStateListResponse_Entry::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientStateListResponse.Entry.address)
}
inline std::string* ClientStateListResponse_Entry::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:ClientStateListResponse.Entry.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientStateListResponse_Entry::release_address() {
  // @@protoc_insertion_point(field_release:ClientStateListResponse.Entry.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStateListResponse_Entry::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ClientStateListResponse.Entry.address)
}

// bytes data = 2;
inline void ClientStateListResponse_Entry::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientStateListResponse_Entry::data() const {
  // @@protoc_insertion_point(field_get:ClientStateListResponse.Entry.data)
  return data_.GetNoArena();
}
inline void ClientStateListResponse_Entry::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientStateListResponse.Entry.data)
}
inline void ClientStateListResponse_Entry::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientStateListResponse.Entry.data)
}
inline void ClientStateListResponse_Entry::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientStateListResponse.Entry.data)
}
inline void ClientStateListResponse_Entry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientStateListResponse.Entry.data)
}
inline std::string* ClientStateListResponse_Entry::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ClientStateListResponse.Entry.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientStateListResponse_Entry::release_data() {
  // @@protoc_insertion_point(field_release:ClientStateListResponse.Entry.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStateListResponse_Entry::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ClientStateListResponse.Entry.data)
}

// -------------------------------------------------------------------

// ClientStateListResponse

// .ClientStateListResponse.Status status = 1;
inline void ClientStateListResponse::clear_status() {
  status_ = 0;
}
inline ::ClientStateListResponse_Status ClientStateListResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientStateListResponse.status)
  return static_cast< ::ClientStateListResponse_Status >(status_);
}
inline void ClientStateListResponse::set_status(::ClientStateListResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientStateListResponse.status)
}

// repeated .ClientStateListResponse.Entry entries = 2;
inline int ClientStateListResponse::entries_size() const {
  return entries_.size();
}
inline void ClientStateListResponse::clear_entries() {
  entries_.Clear();
}
inline ::ClientStateListResponse_Entry* ClientStateListResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:ClientStateListResponse.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientStateListResponse_Entry >*
ClientStateListResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:ClientStateListResponse.entries)
  return &entries_;
}
inline const ::ClientStateListResponse_Entry& ClientStateListResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:ClientStateListResponse.entries)
  return entries_.Get(index);
}
inline ::ClientStateListResponse_Entry* ClientStateListResponse::add_entries() {
  // @@protoc_insertion_point(field_add:ClientStateListResponse.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientStateListResponse_Entry >&
ClientStateListResponse::entries() const {
  // @@protoc_insertion_point(field_list:ClientStateListResponse.entries)
  return entries_;
}

// string state_root = 3;
inline void ClientStateListResponse::clear_state_root() {
  state_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientStateListResponse::state_root() const {
  // @@protoc_insertion_point(field_get:ClientStateListResponse.state_root)
  return state_root_.GetNoArena();
}
inline void ClientStateListResponse::set_state_root(const std::string& value) {
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientStateListResponse.state_root)
}
inline void ClientStateListResponse::set_state_root(std::string&& value) {
  
  state_root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientStateListResponse.state_root)
}
inline void ClientStateListResponse::set_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientStateListResponse.state_root)
}
inline void ClientStateListResponse::set_state_root(const char* value, size_t size) {
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientStateListResponse.state_root)
}
inline std::string* ClientStateListResponse::mutable_state_root() {
  
  // @@protoc_insertion_point(field_mutable:ClientStateListResponse.state_root)
  return state_root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientStateListResponse::release_state_root() {
  // @@protoc_insertion_point(field_release:ClientStateListResponse.state_root)
  
  return state_root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStateListResponse::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  state_root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_root);
  // @@protoc_insertion_point(field_set_allocated:ClientStateListResponse.state_root)
}

// .ClientPagingResponse paging = 4;
inline bool ClientStateListResponse::has_paging() const {
  return this != internal_default_instance() && paging_ != nullptr;
}
inline const ::ClientPagingResponse& ClientStateListResponse::paging() const {
  const ::ClientPagingResponse* p = paging_;
  // @@protoc_insertion_point(field_get:ClientStateListResponse.paging)
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientPagingResponse*>(
      &::_ClientPagingResponse_default_instance_);
}
inline ::ClientPagingResponse* ClientStateListResponse::release_paging() {
  // @@protoc_insertion_point(field_release:ClientStateListResponse.paging)
  
  ::ClientPagingResponse* temp = paging_;
  paging_ = nullptr;
  return temp;
}
inline ::ClientPagingResponse* ClientStateListResponse::mutable_paging() {
  
  if (paging_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientPagingResponse>(GetArenaNoVirtual());
    paging_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ClientStateListResponse.paging)
  return paging_;
}
inline void ClientStateListResponse::set_allocated_paging(::ClientPagingResponse* paging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(paging_);
  }
  if (paging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      paging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paging, submessage_arena);
    }
    
  } else {
    
  }
  paging_ = paging;
  // @@protoc_insertion_point(field_set_allocated:ClientStateListResponse.paging)
}

// -------------------------------------------------------------------

// ClientStateGetRequest

// string state_root = 1;
inline void ClientStateGetRequest::clear_state_root() {
  state_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientStateGetRequest::state_root() const {
  // @@protoc_insertion_point(field_get:ClientStateGetRequest.state_root)
  return state_root_.GetNoArena();
}
inline void ClientStateGetRequest::set_state_root(const std::string& value) {
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientStateGetRequest.state_root)
}
inline void ClientStateGetRequest::set_state_root(std::string&& value) {
  
  state_root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientStateGetRequest.state_root)
}
inline void ClientStateGetRequest::set_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientStateGetRequest.state_root)
}
inline void ClientStateGetRequest::set_state_root(const char* value, size_t size) {
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientStateGetRequest.state_root)
}
inline std::string* ClientStateGetRequest::mutable_state_root() {
  
  // @@protoc_insertion_point(field_mutable:ClientStateGetRequest.state_root)
  return state_root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientStateGetRequest::release_state_root() {
  // @@protoc_insertion_point(field_release:ClientStateGetRequest.state_root)
  
  return state_root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStateGetRequest::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  state_root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_root);
  // @@protoc_insertion_point(field_set_allocated:ClientStateGetRequest.state_root)
}

// string address = 3;
inline void ClientStateGetRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientStateGetRequest::address() const {
  // @@protoc_insertion_point(field_get:ClientStateGetRequest.address)
  return address_.GetNoArena();
}
inline void ClientStateGetRequest::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientStateGetRequest.address)
}
inline void ClientStateGetRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientStateGetRequest.address)
}
inline void ClientStateGetRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientStateGetRequest.address)
}
inline void ClientStateGetRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientStateGetRequest.address)
}
inline std::string* ClientStateGetRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:ClientStateGetRequest.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientStateGetRequest::release_address() {
  // @@protoc_insertion_point(field_release:ClientStateGetRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStateGetRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ClientStateGetRequest.address)
}

// -------------------------------------------------------------------

// ClientStateGetResponse

// .ClientStateGetResponse.Status status = 1;
inline void ClientStateGetResponse::clear_status() {
  status_ = 0;
}
inline ::ClientStateGetResponse_Status ClientStateGetResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientStateGetResponse.status)
  return static_cast< ::ClientStateGetResponse_Status >(status_);
}
inline void ClientStateGetResponse::set_status(::ClientStateGetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientStateGetResponse.status)
}

// bytes value = 2;
inline void ClientStateGetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientStateGetResponse::value() const {
  // @@protoc_insertion_point(field_get:ClientStateGetResponse.value)
  return value_.GetNoArena();
}
inline void ClientStateGetResponse::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientStateGetResponse.value)
}
inline void ClientStateGetResponse::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientStateGetResponse.value)
}
inline void ClientStateGetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientStateGetResponse.value)
}
inline void ClientStateGetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientStateGetResponse.value)
}
inline std::string* ClientStateGetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:ClientStateGetResponse.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientStateGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:ClientStateGetResponse.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStateGetResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ClientStateGetResponse.value)
}

// string state_root = 3;
inline void ClientStateGetResponse::clear_state_root() {
  state_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientStateGetResponse::state_root() const {
  // @@protoc_insertion_point(field_get:ClientStateGetResponse.state_root)
  return state_root_.GetNoArena();
}
inline void ClientStateGetResponse::set_state_root(const std::string& value) {
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientStateGetResponse.state_root)
}
inline void ClientStateGetResponse::set_state_root(std::string&& value) {
  
  state_root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientStateGetResponse.state_root)
}
inline void ClientStateGetResponse::set_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientStateGetResponse.state_root)
}
inline void ClientStateGetResponse::set_state_root(const char* value, size_t size) {
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientStateGetResponse.state_root)
}
inline std::string* ClientStateGetResponse::mutable_state_root() {
  
  // @@protoc_insertion_point(field_mutable:ClientStateGetResponse.state_root)
  return state_root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientStateGetResponse::release_state_root() {
  // @@protoc_insertion_point(field_release:ClientStateGetResponse.state_root)
  
  return state_root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStateGetResponse::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  state_root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_root);
  // @@protoc_insertion_point(field_set_allocated:ClientStateGetResponse.state_root)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClientStateListResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientStateListResponse_Status>() {
  return ::ClientStateListResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ClientStateGetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientStateGetResponse_Status>() {
  return ::ClientStateGetResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fstate_2eproto
