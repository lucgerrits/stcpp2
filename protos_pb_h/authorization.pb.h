// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authorization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_authorization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_authorization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_authorization_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_authorization_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_authorization_2eproto;
class AuthorizationChallengeRequest;
class AuthorizationChallengeRequestDefaultTypeInternal;
extern AuthorizationChallengeRequestDefaultTypeInternal _AuthorizationChallengeRequest_default_instance_;
class AuthorizationChallengeResponse;
class AuthorizationChallengeResponseDefaultTypeInternal;
extern AuthorizationChallengeResponseDefaultTypeInternal _AuthorizationChallengeResponse_default_instance_;
class AuthorizationChallengeResult;
class AuthorizationChallengeResultDefaultTypeInternal;
extern AuthorizationChallengeResultDefaultTypeInternal _AuthorizationChallengeResult_default_instance_;
class AuthorizationChallengeSubmit;
class AuthorizationChallengeSubmitDefaultTypeInternal;
extern AuthorizationChallengeSubmitDefaultTypeInternal _AuthorizationChallengeSubmit_default_instance_;
class AuthorizationTrustRequest;
class AuthorizationTrustRequestDefaultTypeInternal;
extern AuthorizationTrustRequestDefaultTypeInternal _AuthorizationTrustRequest_default_instance_;
class AuthorizationTrustResponse;
class AuthorizationTrustResponseDefaultTypeInternal;
extern AuthorizationTrustResponseDefaultTypeInternal _AuthorizationTrustResponse_default_instance_;
class AuthorizationViolation;
class AuthorizationViolationDefaultTypeInternal;
extern AuthorizationViolationDefaultTypeInternal _AuthorizationViolation_default_instance_;
class ConnectionRequest;
class ConnectionRequestDefaultTypeInternal;
extern ConnectionRequestDefaultTypeInternal _ConnectionRequest_default_instance_;
class ConnectionResponse;
class ConnectionResponseDefaultTypeInternal;
extern ConnectionResponseDefaultTypeInternal _ConnectionResponse_default_instance_;
class ConnectionResponse_RoleEntry;
class ConnectionResponse_RoleEntryDefaultTypeInternal;
extern ConnectionResponse_RoleEntryDefaultTypeInternal _ConnectionResponse_RoleEntry_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AuthorizationChallengeRequest* Arena::CreateMaybeMessage<::AuthorizationChallengeRequest>(Arena*);
template<> ::AuthorizationChallengeResponse* Arena::CreateMaybeMessage<::AuthorizationChallengeResponse>(Arena*);
template<> ::AuthorizationChallengeResult* Arena::CreateMaybeMessage<::AuthorizationChallengeResult>(Arena*);
template<> ::AuthorizationChallengeSubmit* Arena::CreateMaybeMessage<::AuthorizationChallengeSubmit>(Arena*);
template<> ::AuthorizationTrustRequest* Arena::CreateMaybeMessage<::AuthorizationTrustRequest>(Arena*);
template<> ::AuthorizationTrustResponse* Arena::CreateMaybeMessage<::AuthorizationTrustResponse>(Arena*);
template<> ::AuthorizationViolation* Arena::CreateMaybeMessage<::AuthorizationViolation>(Arena*);
template<> ::ConnectionRequest* Arena::CreateMaybeMessage<::ConnectionRequest>(Arena*);
template<> ::ConnectionResponse* Arena::CreateMaybeMessage<::ConnectionResponse>(Arena*);
template<> ::ConnectionResponse_RoleEntry* Arena::CreateMaybeMessage<::ConnectionResponse_RoleEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ConnectionResponse_Status : int {
  ConnectionResponse_Status_STATUS_UNSET = 0,
  ConnectionResponse_Status_OK = 1,
  ConnectionResponse_Status_ERROR = 2,
  ConnectionResponse_Status_ConnectionResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConnectionResponse_Status_ConnectionResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConnectionResponse_Status_IsValid(int value);
constexpr ConnectionResponse_Status ConnectionResponse_Status_Status_MIN = ConnectionResponse_Status_STATUS_UNSET;
constexpr ConnectionResponse_Status ConnectionResponse_Status_Status_MAX = ConnectionResponse_Status_ERROR;
constexpr int ConnectionResponse_Status_Status_ARRAYSIZE = ConnectionResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionResponse_Status_descriptor();
template<typename T>
inline const std::string& ConnectionResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectionResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectionResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectionResponse_Status_descriptor(), enum_t_value);
}
inline bool ConnectionResponse_Status_Parse(
    const std::string& name, ConnectionResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectionResponse_Status>(
    ConnectionResponse_Status_descriptor(), name, value);
}
enum ConnectionResponse_AuthorizationType : int {
  ConnectionResponse_AuthorizationType_AUTHORIZATION_TYPE_UNSET = 0,
  ConnectionResponse_AuthorizationType_TRUST = 1,
  ConnectionResponse_AuthorizationType_CHALLENGE = 2,
  ConnectionResponse_AuthorizationType_ConnectionResponse_AuthorizationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConnectionResponse_AuthorizationType_ConnectionResponse_AuthorizationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConnectionResponse_AuthorizationType_IsValid(int value);
constexpr ConnectionResponse_AuthorizationType ConnectionResponse_AuthorizationType_AuthorizationType_MIN = ConnectionResponse_AuthorizationType_AUTHORIZATION_TYPE_UNSET;
constexpr ConnectionResponse_AuthorizationType ConnectionResponse_AuthorizationType_AuthorizationType_MAX = ConnectionResponse_AuthorizationType_CHALLENGE;
constexpr int ConnectionResponse_AuthorizationType_AuthorizationType_ARRAYSIZE = ConnectionResponse_AuthorizationType_AuthorizationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionResponse_AuthorizationType_descriptor();
template<typename T>
inline const std::string& ConnectionResponse_AuthorizationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectionResponse_AuthorizationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectionResponse_AuthorizationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectionResponse_AuthorizationType_descriptor(), enum_t_value);
}
inline bool ConnectionResponse_AuthorizationType_Parse(
    const std::string& name, ConnectionResponse_AuthorizationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectionResponse_AuthorizationType>(
    ConnectionResponse_AuthorizationType_descriptor(), name, value);
}
enum RoleType : int {
  ROLE_TYPE_UNSET = 0,
  ALL = 1,
  NETWORK = 2,
  RoleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RoleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RoleType_IsValid(int value);
constexpr RoleType RoleType_MIN = ROLE_TYPE_UNSET;
constexpr RoleType RoleType_MAX = NETWORK;
constexpr int RoleType_ARRAYSIZE = RoleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleType_descriptor();
template<typename T>
inline const std::string& RoleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoleType_descriptor(), enum_t_value);
}
inline bool RoleType_Parse(
    const std::string& name, RoleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoleType>(
    RoleType_descriptor(), name, value);
}
// ===================================================================

class ConnectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectionRequest) */ {
 public:
  ConnectionRequest();
  virtual ~ConnectionRequest();

  ConnectionRequest(const ConnectionRequest& from);
  ConnectionRequest(ConnectionRequest&& from) noexcept
    : ConnectionRequest() {
    *this = ::std::move(from);
  }

  inline ConnectionRequest& operator=(const ConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionRequest& operator=(ConnectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectionRequest*>(
               &_ConnectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConnectionRequest* other);
  friend void swap(ConnectionRequest& a, ConnectionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionRequest* New() const final {
    return CreateMaybeMessage<ConnectionRequest>(nullptr);
  }

  ConnectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionRequest& from);
  void MergeFrom(const ConnectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_authorization_2eproto);
    return ::descriptor_table_authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string endpoint = 1;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);

  // @@protoc_insertion_point(class_scope:ConnectionRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authorization_2eproto;
};
// -------------------------------------------------------------------

class ConnectionResponse_RoleEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectionResponse.RoleEntry) */ {
 public:
  ConnectionResponse_RoleEntry();
  virtual ~ConnectionResponse_RoleEntry();

  ConnectionResponse_RoleEntry(const ConnectionResponse_RoleEntry& from);
  ConnectionResponse_RoleEntry(ConnectionResponse_RoleEntry&& from) noexcept
    : ConnectionResponse_RoleEntry() {
    *this = ::std::move(from);
  }

  inline ConnectionResponse_RoleEntry& operator=(const ConnectionResponse_RoleEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionResponse_RoleEntry& operator=(ConnectionResponse_RoleEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionResponse_RoleEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionResponse_RoleEntry* internal_default_instance() {
    return reinterpret_cast<const ConnectionResponse_RoleEntry*>(
               &_ConnectionResponse_RoleEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ConnectionResponse_RoleEntry* other);
  friend void swap(ConnectionResponse_RoleEntry& a, ConnectionResponse_RoleEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionResponse_RoleEntry* New() const final {
    return CreateMaybeMessage<ConnectionResponse_RoleEntry>(nullptr);
  }

  ConnectionResponse_RoleEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionResponse_RoleEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionResponse_RoleEntry& from);
  void MergeFrom(const ConnectionResponse_RoleEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionResponse_RoleEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectionResponse.RoleEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_authorization_2eproto);
    return ::descriptor_table_authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .RoleType role = 1;
  void clear_role();
  static const int kRoleFieldNumber = 1;
  ::RoleType role() const;
  void set_role(::RoleType value);

  // .ConnectionResponse.AuthorizationType auth_type = 2;
  void clear_auth_type();
  static const int kAuthTypeFieldNumber = 2;
  ::ConnectionResponse_AuthorizationType auth_type() const;
  void set_auth_type(::ConnectionResponse_AuthorizationType value);

  // @@protoc_insertion_point(class_scope:ConnectionResponse.RoleEntry)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int role_;
  int auth_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authorization_2eproto;
};
// -------------------------------------------------------------------

class ConnectionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectionResponse) */ {
 public:
  ConnectionResponse();
  virtual ~ConnectionResponse();

  ConnectionResponse(const ConnectionResponse& from);
  ConnectionResponse(ConnectionResponse&& from) noexcept
    : ConnectionResponse() {
    *this = ::std::move(from);
  }

  inline ConnectionResponse& operator=(const ConnectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionResponse& operator=(ConnectionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectionResponse*>(
               &_ConnectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ConnectionResponse* other);
  friend void swap(ConnectionResponse& a, ConnectionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionResponse* New() const final {
    return CreateMaybeMessage<ConnectionResponse>(nullptr);
  }

  ConnectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionResponse& from);
  void MergeFrom(const ConnectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_authorization_2eproto);
    return ::descriptor_table_authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConnectionResponse_RoleEntry RoleEntry;

  typedef ConnectionResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConnectionResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConnectionResponse_Status_OK;
  static constexpr Status ERROR =
    ConnectionResponse_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return ConnectionResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConnectionResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConnectionResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConnectionResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConnectionResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConnectionResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConnectionResponse_Status_Parse(name, value);
  }

  typedef ConnectionResponse_AuthorizationType AuthorizationType;
  static constexpr AuthorizationType AUTHORIZATION_TYPE_UNSET =
    ConnectionResponse_AuthorizationType_AUTHORIZATION_TYPE_UNSET;
  static constexpr AuthorizationType TRUST =
    ConnectionResponse_AuthorizationType_TRUST;
  static constexpr AuthorizationType CHALLENGE =
    ConnectionResponse_AuthorizationType_CHALLENGE;
  static inline bool AuthorizationType_IsValid(int value) {
    return ConnectionResponse_AuthorizationType_IsValid(value);
  }
  static constexpr AuthorizationType AuthorizationType_MIN =
    ConnectionResponse_AuthorizationType_AuthorizationType_MIN;
  static constexpr AuthorizationType AuthorizationType_MAX =
    ConnectionResponse_AuthorizationType_AuthorizationType_MAX;
  static constexpr int AuthorizationType_ARRAYSIZE =
    ConnectionResponse_AuthorizationType_AuthorizationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AuthorizationType_descriptor() {
    return ConnectionResponse_AuthorizationType_descriptor();
  }
  template<typename T>
  static inline const std::string& AuthorizationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AuthorizationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AuthorizationType_Name.");
    return ConnectionResponse_AuthorizationType_Name(enum_t_value);
  }
  static inline bool AuthorizationType_Parse(const std::string& name,
      AuthorizationType* value) {
    return ConnectionResponse_AuthorizationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ConnectionResponse.RoleEntry roles = 1;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 1;
  ::ConnectionResponse_RoleEntry* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConnectionResponse_RoleEntry >*
      mutable_roles();
  const ::ConnectionResponse_RoleEntry& roles(int index) const;
  ::ConnectionResponse_RoleEntry* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConnectionResponse_RoleEntry >&
      roles() const;

  // .ConnectionResponse.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::ConnectionResponse_Status status() const;
  void set_status(::ConnectionResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConnectionResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConnectionResponse_RoleEntry > roles_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authorization_2eproto;
};
// -------------------------------------------------------------------

class AuthorizationTrustRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AuthorizationTrustRequest) */ {
 public:
  AuthorizationTrustRequest();
  virtual ~AuthorizationTrustRequest();

  AuthorizationTrustRequest(const AuthorizationTrustRequest& from);
  AuthorizationTrustRequest(AuthorizationTrustRequest&& from) noexcept
    : AuthorizationTrustRequest() {
    *this = ::std::move(from);
  }

  inline AuthorizationTrustRequest& operator=(const AuthorizationTrustRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizationTrustRequest& operator=(AuthorizationTrustRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorizationTrustRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizationTrustRequest* internal_default_instance() {
    return reinterpret_cast<const AuthorizationTrustRequest*>(
               &_AuthorizationTrustRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AuthorizationTrustRequest* other);
  friend void swap(AuthorizationTrustRequest& a, AuthorizationTrustRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthorizationTrustRequest* New() const final {
    return CreateMaybeMessage<AuthorizationTrustRequest>(nullptr);
  }

  AuthorizationTrustRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizationTrustRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorizationTrustRequest& from);
  void MergeFrom(const AuthorizationTrustRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizationTrustRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AuthorizationTrustRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_authorization_2eproto);
    return ::descriptor_table_authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RoleType roles = 1;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 1;
  ::RoleType roles(int index) const;
  void set_roles(int index, ::RoleType value);
  void add_roles(::RoleType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_roles();

  // string public_key = 2;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);

  // @@protoc_insertion_point(class_scope:AuthorizationTrustRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> roles_;
  mutable std::atomic<int> _roles_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authorization_2eproto;
};
// -------------------------------------------------------------------

class AuthorizationTrustResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AuthorizationTrustResponse) */ {
 public:
  AuthorizationTrustResponse();
  virtual ~AuthorizationTrustResponse();

  AuthorizationTrustResponse(const AuthorizationTrustResponse& from);
  AuthorizationTrustResponse(AuthorizationTrustResponse&& from) noexcept
    : AuthorizationTrustResponse() {
    *this = ::std::move(from);
  }

  inline AuthorizationTrustResponse& operator=(const AuthorizationTrustResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizationTrustResponse& operator=(AuthorizationTrustResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorizationTrustResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizationTrustResponse* internal_default_instance() {
    return reinterpret_cast<const AuthorizationTrustResponse*>(
               &_AuthorizationTrustResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AuthorizationTrustResponse* other);
  friend void swap(AuthorizationTrustResponse& a, AuthorizationTrustResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthorizationTrustResponse* New() const final {
    return CreateMaybeMessage<AuthorizationTrustResponse>(nullptr);
  }

  AuthorizationTrustResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizationTrustResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorizationTrustResponse& from);
  void MergeFrom(const AuthorizationTrustResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizationTrustResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AuthorizationTrustResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_authorization_2eproto);
    return ::descriptor_table_authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RoleType roles = 1;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 1;
  ::RoleType roles(int index) const;
  void set_roles(int index, ::RoleType value);
  void add_roles(::RoleType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_roles();

  // @@protoc_insertion_point(class_scope:AuthorizationTrustResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> roles_;
  mutable std::atomic<int> _roles_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authorization_2eproto;
};
// -------------------------------------------------------------------

class AuthorizationViolation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AuthorizationViolation) */ {
 public:
  AuthorizationViolation();
  virtual ~AuthorizationViolation();

  AuthorizationViolation(const AuthorizationViolation& from);
  AuthorizationViolation(AuthorizationViolation&& from) noexcept
    : AuthorizationViolation() {
    *this = ::std::move(from);
  }

  inline AuthorizationViolation& operator=(const AuthorizationViolation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizationViolation& operator=(AuthorizationViolation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorizationViolation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizationViolation* internal_default_instance() {
    return reinterpret_cast<const AuthorizationViolation*>(
               &_AuthorizationViolation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AuthorizationViolation* other);
  friend void swap(AuthorizationViolation& a, AuthorizationViolation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthorizationViolation* New() const final {
    return CreateMaybeMessage<AuthorizationViolation>(nullptr);
  }

  AuthorizationViolation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizationViolation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorizationViolation& from);
  void MergeFrom(const AuthorizationViolation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizationViolation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AuthorizationViolation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_authorization_2eproto);
    return ::descriptor_table_authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .RoleType violation = 1;
  void clear_violation();
  static const int kViolationFieldNumber = 1;
  ::RoleType violation() const;
  void set_violation(::RoleType value);

  // @@protoc_insertion_point(class_scope:AuthorizationViolation)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int violation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authorization_2eproto;
};
// -------------------------------------------------------------------

class AuthorizationChallengeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AuthorizationChallengeRequest) */ {
 public:
  AuthorizationChallengeRequest();
  virtual ~AuthorizationChallengeRequest();

  AuthorizationChallengeRequest(const AuthorizationChallengeRequest& from);
  AuthorizationChallengeRequest(AuthorizationChallengeRequest&& from) noexcept
    : AuthorizationChallengeRequest() {
    *this = ::std::move(from);
  }

  inline AuthorizationChallengeRequest& operator=(const AuthorizationChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizationChallengeRequest& operator=(AuthorizationChallengeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorizationChallengeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizationChallengeRequest* internal_default_instance() {
    return reinterpret_cast<const AuthorizationChallengeRequest*>(
               &_AuthorizationChallengeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AuthorizationChallengeRequest* other);
  friend void swap(AuthorizationChallengeRequest& a, AuthorizationChallengeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthorizationChallengeRequest* New() const final {
    return CreateMaybeMessage<AuthorizationChallengeRequest>(nullptr);
  }

  AuthorizationChallengeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizationChallengeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorizationChallengeRequest& from);
  void MergeFrom(const AuthorizationChallengeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizationChallengeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AuthorizationChallengeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_authorization_2eproto);
    return ::descriptor_table_authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AuthorizationChallengeRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authorization_2eproto;
};
// -------------------------------------------------------------------

class AuthorizationChallengeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AuthorizationChallengeResponse) */ {
 public:
  AuthorizationChallengeResponse();
  virtual ~AuthorizationChallengeResponse();

  AuthorizationChallengeResponse(const AuthorizationChallengeResponse& from);
  AuthorizationChallengeResponse(AuthorizationChallengeResponse&& from) noexcept
    : AuthorizationChallengeResponse() {
    *this = ::std::move(from);
  }

  inline AuthorizationChallengeResponse& operator=(const AuthorizationChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizationChallengeResponse& operator=(AuthorizationChallengeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorizationChallengeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizationChallengeResponse* internal_default_instance() {
    return reinterpret_cast<const AuthorizationChallengeResponse*>(
               &_AuthorizationChallengeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AuthorizationChallengeResponse* other);
  friend void swap(AuthorizationChallengeResponse& a, AuthorizationChallengeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthorizationChallengeResponse* New() const final {
    return CreateMaybeMessage<AuthorizationChallengeResponse>(nullptr);
  }

  AuthorizationChallengeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizationChallengeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorizationChallengeResponse& from);
  void MergeFrom(const AuthorizationChallengeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizationChallengeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AuthorizationChallengeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_authorization_2eproto);
    return ::descriptor_table_authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes payload = 1;
  void clear_payload();
  static const int kPayloadFieldNumber = 1;
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);

  // @@protoc_insertion_point(class_scope:AuthorizationChallengeResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authorization_2eproto;
};
// -------------------------------------------------------------------

class AuthorizationChallengeSubmit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AuthorizationChallengeSubmit) */ {
 public:
  AuthorizationChallengeSubmit();
  virtual ~AuthorizationChallengeSubmit();

  AuthorizationChallengeSubmit(const AuthorizationChallengeSubmit& from);
  AuthorizationChallengeSubmit(AuthorizationChallengeSubmit&& from) noexcept
    : AuthorizationChallengeSubmit() {
    *this = ::std::move(from);
  }

  inline AuthorizationChallengeSubmit& operator=(const AuthorizationChallengeSubmit& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizationChallengeSubmit& operator=(AuthorizationChallengeSubmit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorizationChallengeSubmit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizationChallengeSubmit* internal_default_instance() {
    return reinterpret_cast<const AuthorizationChallengeSubmit*>(
               &_AuthorizationChallengeSubmit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AuthorizationChallengeSubmit* other);
  friend void swap(AuthorizationChallengeSubmit& a, AuthorizationChallengeSubmit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthorizationChallengeSubmit* New() const final {
    return CreateMaybeMessage<AuthorizationChallengeSubmit>(nullptr);
  }

  AuthorizationChallengeSubmit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizationChallengeSubmit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorizationChallengeSubmit& from);
  void MergeFrom(const AuthorizationChallengeSubmit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizationChallengeSubmit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AuthorizationChallengeSubmit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_authorization_2eproto);
    return ::descriptor_table_authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RoleType roles = 4;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 4;
  ::RoleType roles(int index) const;
  void set_roles(int index, ::RoleType value);
  void add_roles(::RoleType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_roles();

  // string public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);

  // string signature = 3;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // @@protoc_insertion_point(class_scope:AuthorizationChallengeSubmit)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> roles_;
  mutable std::atomic<int> _roles_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authorization_2eproto;
};
// -------------------------------------------------------------------

class AuthorizationChallengeResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AuthorizationChallengeResult) */ {
 public:
  AuthorizationChallengeResult();
  virtual ~AuthorizationChallengeResult();

  AuthorizationChallengeResult(const AuthorizationChallengeResult& from);
  AuthorizationChallengeResult(AuthorizationChallengeResult&& from) noexcept
    : AuthorizationChallengeResult() {
    *this = ::std::move(from);
  }

  inline AuthorizationChallengeResult& operator=(const AuthorizationChallengeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizationChallengeResult& operator=(AuthorizationChallengeResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorizationChallengeResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizationChallengeResult* internal_default_instance() {
    return reinterpret_cast<const AuthorizationChallengeResult*>(
               &_AuthorizationChallengeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AuthorizationChallengeResult* other);
  friend void swap(AuthorizationChallengeResult& a, AuthorizationChallengeResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthorizationChallengeResult* New() const final {
    return CreateMaybeMessage<AuthorizationChallengeResult>(nullptr);
  }

  AuthorizationChallengeResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizationChallengeResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorizationChallengeResult& from);
  void MergeFrom(const AuthorizationChallengeResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizationChallengeResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AuthorizationChallengeResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_authorization_2eproto);
    return ::descriptor_table_authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RoleType roles = 1;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 1;
  ::RoleType roles(int index) const;
  void set_roles(int index, ::RoleType value);
  void add_roles(::RoleType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_roles();

  // @@protoc_insertion_point(class_scope:AuthorizationChallengeResult)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> roles_;
  mutable std::atomic<int> _roles_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authorization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionRequest

// string endpoint = 1;
inline void ConnectionRequest::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnectionRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:ConnectionRequest.endpoint)
  return endpoint_.GetNoArena();
}
inline void ConnectionRequest::set_endpoint(const std::string& value) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectionRequest.endpoint)
}
inline void ConnectionRequest::set_endpoint(std::string&& value) {
  
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConnectionRequest.endpoint)
}
inline void ConnectionRequest::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectionRequest.endpoint)
}
inline void ConnectionRequest::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectionRequest.endpoint)
}
inline std::string* ConnectionRequest::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:ConnectionRequest.endpoint)
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectionRequest::release_endpoint() {
  // @@protoc_insertion_point(field_release:ConnectionRequest.endpoint)
  
  return endpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:ConnectionRequest.endpoint)
}

// -------------------------------------------------------------------

// ConnectionResponse_RoleEntry

// .RoleType role = 1;
inline void ConnectionResponse_RoleEntry::clear_role() {
  role_ = 0;
}
inline ::RoleType ConnectionResponse_RoleEntry::role() const {
  // @@protoc_insertion_point(field_get:ConnectionResponse.RoleEntry.role)
  return static_cast< ::RoleType >(role_);
}
inline void ConnectionResponse_RoleEntry::set_role(::RoleType value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:ConnectionResponse.RoleEntry.role)
}

// .ConnectionResponse.AuthorizationType auth_type = 2;
inline void ConnectionResponse_RoleEntry::clear_auth_type() {
  auth_type_ = 0;
}
inline ::ConnectionResponse_AuthorizationType ConnectionResponse_RoleEntry::auth_type() const {
  // @@protoc_insertion_point(field_get:ConnectionResponse.RoleEntry.auth_type)
  return static_cast< ::ConnectionResponse_AuthorizationType >(auth_type_);
}
inline void ConnectionResponse_RoleEntry::set_auth_type(::ConnectionResponse_AuthorizationType value) {
  
  auth_type_ = value;
  // @@protoc_insertion_point(field_set:ConnectionResponse.RoleEntry.auth_type)
}

// -------------------------------------------------------------------

// ConnectionResponse

// repeated .ConnectionResponse.RoleEntry roles = 1;
inline int ConnectionResponse::roles_size() const {
  return roles_.size();
}
inline void ConnectionResponse::clear_roles() {
  roles_.Clear();
}
inline ::ConnectionResponse_RoleEntry* ConnectionResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:ConnectionResponse.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConnectionResponse_RoleEntry >*
ConnectionResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:ConnectionResponse.roles)
  return &roles_;
}
inline const ::ConnectionResponse_RoleEntry& ConnectionResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:ConnectionResponse.roles)
  return roles_.Get(index);
}
inline ::ConnectionResponse_RoleEntry* ConnectionResponse::add_roles() {
  // @@protoc_insertion_point(field_add:ConnectionResponse.roles)
  return roles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConnectionResponse_RoleEntry >&
ConnectionResponse::roles() const {
  // @@protoc_insertion_point(field_list:ConnectionResponse.roles)
  return roles_;
}

// .ConnectionResponse.Status status = 2;
inline void ConnectionResponse::clear_status() {
  status_ = 0;
}
inline ::ConnectionResponse_Status ConnectionResponse::status() const {
  // @@protoc_insertion_point(field_get:ConnectionResponse.status)
  return static_cast< ::ConnectionResponse_Status >(status_);
}
inline void ConnectionResponse::set_status(::ConnectionResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConnectionResponse.status)
}

// -------------------------------------------------------------------

// AuthorizationTrustRequest

// repeated .RoleType roles = 1;
inline int AuthorizationTrustRequest::roles_size() const {
  return roles_.size();
}
inline void AuthorizationTrustRequest::clear_roles() {
  roles_.Clear();
}
inline ::RoleType AuthorizationTrustRequest::roles(int index) const {
  // @@protoc_insertion_point(field_get:AuthorizationTrustRequest.roles)
  return static_cast< ::RoleType >(roles_.Get(index));
}
inline void AuthorizationTrustRequest::set_roles(int index, ::RoleType value) {
  roles_.Set(index, value);
  // @@protoc_insertion_point(field_set:AuthorizationTrustRequest.roles)
}
inline void AuthorizationTrustRequest::add_roles(::RoleType value) {
  roles_.Add(value);
  // @@protoc_insertion_point(field_add:AuthorizationTrustRequest.roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AuthorizationTrustRequest::roles() const {
  // @@protoc_insertion_point(field_list:AuthorizationTrustRequest.roles)
  return roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AuthorizationTrustRequest::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:AuthorizationTrustRequest.roles)
  return &roles_;
}

// string public_key = 2;
inline void AuthorizationTrustRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthorizationTrustRequest::public_key() const {
  // @@protoc_insertion_point(field_get:AuthorizationTrustRequest.public_key)
  return public_key_.GetNoArena();
}
inline void AuthorizationTrustRequest::set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthorizationTrustRequest.public_key)
}
inline void AuthorizationTrustRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthorizationTrustRequest.public_key)
}
inline void AuthorizationTrustRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthorizationTrustRequest.public_key)
}
inline void AuthorizationTrustRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthorizationTrustRequest.public_key)
}
inline std::string* AuthorizationTrustRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:AuthorizationTrustRequest.public_key)
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthorizationTrustRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:AuthorizationTrustRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthorizationTrustRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:AuthorizationTrustRequest.public_key)
}

// -------------------------------------------------------------------

// AuthorizationTrustResponse

// repeated .RoleType roles = 1;
inline int AuthorizationTrustResponse::roles_size() const {
  return roles_.size();
}
inline void AuthorizationTrustResponse::clear_roles() {
  roles_.Clear();
}
inline ::RoleType AuthorizationTrustResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:AuthorizationTrustResponse.roles)
  return static_cast< ::RoleType >(roles_.Get(index));
}
inline void AuthorizationTrustResponse::set_roles(int index, ::RoleType value) {
  roles_.Set(index, value);
  // @@protoc_insertion_point(field_set:AuthorizationTrustResponse.roles)
}
inline void AuthorizationTrustResponse::add_roles(::RoleType value) {
  roles_.Add(value);
  // @@protoc_insertion_point(field_add:AuthorizationTrustResponse.roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AuthorizationTrustResponse::roles() const {
  // @@protoc_insertion_point(field_list:AuthorizationTrustResponse.roles)
  return roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AuthorizationTrustResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:AuthorizationTrustResponse.roles)
  return &roles_;
}

// -------------------------------------------------------------------

// AuthorizationViolation

// .RoleType violation = 1;
inline void AuthorizationViolation::clear_violation() {
  violation_ = 0;
}
inline ::RoleType AuthorizationViolation::violation() const {
  // @@protoc_insertion_point(field_get:AuthorizationViolation.violation)
  return static_cast< ::RoleType >(violation_);
}
inline void AuthorizationViolation::set_violation(::RoleType value) {
  
  violation_ = value;
  // @@protoc_insertion_point(field_set:AuthorizationViolation.violation)
}

// -------------------------------------------------------------------

// AuthorizationChallengeRequest

// -------------------------------------------------------------------

// AuthorizationChallengeResponse

// bytes payload = 1;
inline void AuthorizationChallengeResponse::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthorizationChallengeResponse::payload() const {
  // @@protoc_insertion_point(field_get:AuthorizationChallengeResponse.payload)
  return payload_.GetNoArena();
}
inline void AuthorizationChallengeResponse::set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthorizationChallengeResponse.payload)
}
inline void AuthorizationChallengeResponse::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthorizationChallengeResponse.payload)
}
inline void AuthorizationChallengeResponse::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthorizationChallengeResponse.payload)
}
inline void AuthorizationChallengeResponse::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthorizationChallengeResponse.payload)
}
inline std::string* AuthorizationChallengeResponse::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:AuthorizationChallengeResponse.payload)
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthorizationChallengeResponse::release_payload() {
  // @@protoc_insertion_point(field_release:AuthorizationChallengeResponse.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthorizationChallengeResponse::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:AuthorizationChallengeResponse.payload)
}

// -------------------------------------------------------------------

// AuthorizationChallengeSubmit

// string public_key = 1;
inline void AuthorizationChallengeSubmit::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthorizationChallengeSubmit::public_key() const {
  // @@protoc_insertion_point(field_get:AuthorizationChallengeSubmit.public_key)
  return public_key_.GetNoArena();
}
inline void AuthorizationChallengeSubmit::set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthorizationChallengeSubmit.public_key)
}
inline void AuthorizationChallengeSubmit::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthorizationChallengeSubmit.public_key)
}
inline void AuthorizationChallengeSubmit::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthorizationChallengeSubmit.public_key)
}
inline void AuthorizationChallengeSubmit::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthorizationChallengeSubmit.public_key)
}
inline std::string* AuthorizationChallengeSubmit::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:AuthorizationChallengeSubmit.public_key)
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthorizationChallengeSubmit::release_public_key() {
  // @@protoc_insertion_point(field_release:AuthorizationChallengeSubmit.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthorizationChallengeSubmit::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:AuthorizationChallengeSubmit.public_key)
}

// string signature = 3;
inline void AuthorizationChallengeSubmit::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthorizationChallengeSubmit::signature() const {
  // @@protoc_insertion_point(field_get:AuthorizationChallengeSubmit.signature)
  return signature_.GetNoArena();
}
inline void AuthorizationChallengeSubmit::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthorizationChallengeSubmit.signature)
}
inline void AuthorizationChallengeSubmit::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthorizationChallengeSubmit.signature)
}
inline void AuthorizationChallengeSubmit::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthorizationChallengeSubmit.signature)
}
inline void AuthorizationChallengeSubmit::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthorizationChallengeSubmit.signature)
}
inline std::string* AuthorizationChallengeSubmit::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:AuthorizationChallengeSubmit.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthorizationChallengeSubmit::release_signature() {
  // @@protoc_insertion_point(field_release:AuthorizationChallengeSubmit.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthorizationChallengeSubmit::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:AuthorizationChallengeSubmit.signature)
}

// repeated .RoleType roles = 4;
inline int AuthorizationChallengeSubmit::roles_size() const {
  return roles_.size();
}
inline void AuthorizationChallengeSubmit::clear_roles() {
  roles_.Clear();
}
inline ::RoleType AuthorizationChallengeSubmit::roles(int index) const {
  // @@protoc_insertion_point(field_get:AuthorizationChallengeSubmit.roles)
  return static_cast< ::RoleType >(roles_.Get(index));
}
inline void AuthorizationChallengeSubmit::set_roles(int index, ::RoleType value) {
  roles_.Set(index, value);
  // @@protoc_insertion_point(field_set:AuthorizationChallengeSubmit.roles)
}
inline void AuthorizationChallengeSubmit::add_roles(::RoleType value) {
  roles_.Add(value);
  // @@protoc_insertion_point(field_add:AuthorizationChallengeSubmit.roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AuthorizationChallengeSubmit::roles() const {
  // @@protoc_insertion_point(field_list:AuthorizationChallengeSubmit.roles)
  return roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AuthorizationChallengeSubmit::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:AuthorizationChallengeSubmit.roles)
  return &roles_;
}

// -------------------------------------------------------------------

// AuthorizationChallengeResult

// repeated .RoleType roles = 1;
inline int AuthorizationChallengeResult::roles_size() const {
  return roles_.size();
}
inline void AuthorizationChallengeResult::clear_roles() {
  roles_.Clear();
}
inline ::RoleType AuthorizationChallengeResult::roles(int index) const {
  // @@protoc_insertion_point(field_get:AuthorizationChallengeResult.roles)
  return static_cast< ::RoleType >(roles_.Get(index));
}
inline void AuthorizationChallengeResult::set_roles(int index, ::RoleType value) {
  roles_.Set(index, value);
  // @@protoc_insertion_point(field_set:AuthorizationChallengeResult.roles)
}
inline void AuthorizationChallengeResult::add_roles(::RoleType value) {
  roles_.Add(value);
  // @@protoc_insertion_point(field_add:AuthorizationChallengeResult.roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AuthorizationChallengeResult::roles() const {
  // @@protoc_insertion_point(field_list:AuthorizationChallengeResult.roles)
  return roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AuthorizationChallengeResult::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:AuthorizationChallengeResult.roles)
  return &roles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ConnectionResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConnectionResponse_Status>() {
  return ::ConnectionResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConnectionResponse_AuthorizationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConnectionResponse_AuthorizationType>() {
  return ::ConnectionResponse_AuthorizationType_descriptor();
}
template <> struct is_proto_enum< ::RoleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoleType>() {
  return ::RoleType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_authorization_2eproto
