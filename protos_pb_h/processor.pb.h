// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: processor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_processor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_processor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "transaction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_processor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_processor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_processor_2eproto;
class TpProcessRequest;
class TpProcessRequestDefaultTypeInternal;
extern TpProcessRequestDefaultTypeInternal _TpProcessRequest_default_instance_;
class TpProcessResponse;
class TpProcessResponseDefaultTypeInternal;
extern TpProcessResponseDefaultTypeInternal _TpProcessResponse_default_instance_;
class TpRegisterRequest;
class TpRegisterRequestDefaultTypeInternal;
extern TpRegisterRequestDefaultTypeInternal _TpRegisterRequest_default_instance_;
class TpRegisterResponse;
class TpRegisterResponseDefaultTypeInternal;
extern TpRegisterResponseDefaultTypeInternal _TpRegisterResponse_default_instance_;
class TpUnregisterRequest;
class TpUnregisterRequestDefaultTypeInternal;
extern TpUnregisterRequestDefaultTypeInternal _TpUnregisterRequest_default_instance_;
class TpUnregisterResponse;
class TpUnregisterResponseDefaultTypeInternal;
extern TpUnregisterResponseDefaultTypeInternal _TpUnregisterResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TpProcessRequest* Arena::CreateMaybeMessage<::TpProcessRequest>(Arena*);
template<> ::TpProcessResponse* Arena::CreateMaybeMessage<::TpProcessResponse>(Arena*);
template<> ::TpRegisterRequest* Arena::CreateMaybeMessage<::TpRegisterRequest>(Arena*);
template<> ::TpRegisterResponse* Arena::CreateMaybeMessage<::TpRegisterResponse>(Arena*);
template<> ::TpUnregisterRequest* Arena::CreateMaybeMessage<::TpUnregisterRequest>(Arena*);
template<> ::TpUnregisterResponse* Arena::CreateMaybeMessage<::TpUnregisterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TpRegisterResponse_Status : int {
  TpRegisterResponse_Status_STATUS_UNSET = 0,
  TpRegisterResponse_Status_OK = 1,
  TpRegisterResponse_Status_ERROR = 2,
  TpRegisterResponse_Status_TpRegisterResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TpRegisterResponse_Status_TpRegisterResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TpRegisterResponse_Status_IsValid(int value);
constexpr TpRegisterResponse_Status TpRegisterResponse_Status_Status_MIN = TpRegisterResponse_Status_STATUS_UNSET;
constexpr TpRegisterResponse_Status TpRegisterResponse_Status_Status_MAX = TpRegisterResponse_Status_ERROR;
constexpr int TpRegisterResponse_Status_Status_ARRAYSIZE = TpRegisterResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TpRegisterResponse_Status_descriptor();
template<typename T>
inline const std::string& TpRegisterResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TpRegisterResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TpRegisterResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TpRegisterResponse_Status_descriptor(), enum_t_value);
}
inline bool TpRegisterResponse_Status_Parse(
    const std::string& name, TpRegisterResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TpRegisterResponse_Status>(
    TpRegisterResponse_Status_descriptor(), name, value);
}
enum TpUnregisterResponse_Status : int {
  TpUnregisterResponse_Status_STATUS_UNSET = 0,
  TpUnregisterResponse_Status_OK = 1,
  TpUnregisterResponse_Status_ERROR = 2,
  TpUnregisterResponse_Status_TpUnregisterResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TpUnregisterResponse_Status_TpUnregisterResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TpUnregisterResponse_Status_IsValid(int value);
constexpr TpUnregisterResponse_Status TpUnregisterResponse_Status_Status_MIN = TpUnregisterResponse_Status_STATUS_UNSET;
constexpr TpUnregisterResponse_Status TpUnregisterResponse_Status_Status_MAX = TpUnregisterResponse_Status_ERROR;
constexpr int TpUnregisterResponse_Status_Status_ARRAYSIZE = TpUnregisterResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TpUnregisterResponse_Status_descriptor();
template<typename T>
inline const std::string& TpUnregisterResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TpUnregisterResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TpUnregisterResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TpUnregisterResponse_Status_descriptor(), enum_t_value);
}
inline bool TpUnregisterResponse_Status_Parse(
    const std::string& name, TpUnregisterResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TpUnregisterResponse_Status>(
    TpUnregisterResponse_Status_descriptor(), name, value);
}
enum TpProcessResponse_Status : int {
  TpProcessResponse_Status_STATUS_UNSET = 0,
  TpProcessResponse_Status_OK = 1,
  TpProcessResponse_Status_INVALID_TRANSACTION = 2,
  TpProcessResponse_Status_INTERNAL_ERROR = 3,
  TpProcessResponse_Status_TpProcessResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TpProcessResponse_Status_TpProcessResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TpProcessResponse_Status_IsValid(int value);
constexpr TpProcessResponse_Status TpProcessResponse_Status_Status_MIN = TpProcessResponse_Status_STATUS_UNSET;
constexpr TpProcessResponse_Status TpProcessResponse_Status_Status_MAX = TpProcessResponse_Status_INTERNAL_ERROR;
constexpr int TpProcessResponse_Status_Status_ARRAYSIZE = TpProcessResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TpProcessResponse_Status_descriptor();
template<typename T>
inline const std::string& TpProcessResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TpProcessResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TpProcessResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TpProcessResponse_Status_descriptor(), enum_t_value);
}
inline bool TpProcessResponse_Status_Parse(
    const std::string& name, TpProcessResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TpProcessResponse_Status>(
    TpProcessResponse_Status_descriptor(), name, value);
}
// ===================================================================

class TpRegisterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpRegisterRequest) */ {
 public:
  TpRegisterRequest();
  virtual ~TpRegisterRequest();

  TpRegisterRequest(const TpRegisterRequest& from);
  TpRegisterRequest(TpRegisterRequest&& from) noexcept
    : TpRegisterRequest() {
    *this = ::std::move(from);
  }

  inline TpRegisterRequest& operator=(const TpRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpRegisterRequest& operator=(TpRegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const TpRegisterRequest*>(
               &_TpRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TpRegisterRequest* other);
  friend void swap(TpRegisterRequest& a, TpRegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpRegisterRequest* New() const final {
    return CreateMaybeMessage<TpRegisterRequest>(nullptr);
  }

  TpRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpRegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpRegisterRequest& from);
  void MergeFrom(const TpRegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpRegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpRegisterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_processor_2eproto);
    return ::descriptor_table_processor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string namespaces = 4;
  int namespaces_size() const;
  void clear_namespaces();
  static const int kNamespacesFieldNumber = 4;
  const std::string& namespaces(int index) const;
  std::string* mutable_namespaces(int index);
  void set_namespaces(int index, const std::string& value);
  void set_namespaces(int index, std::string&& value);
  void set_namespaces(int index, const char* value);
  void set_namespaces(int index, const char* value, size_t size);
  std::string* add_namespaces();
  void add_namespaces(const std::string& value);
  void add_namespaces(std::string&& value);
  void add_namespaces(const char* value);
  void add_namespaces(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& namespaces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_namespaces();

  // string family = 1;
  void clear_family();
  static const int kFamilyFieldNumber = 1;
  const std::string& family() const;
  void set_family(const std::string& value);
  void set_family(std::string&& value);
  void set_family(const char* value);
  void set_family(const char* value, size_t size);
  std::string* mutable_family();
  std::string* release_family();
  void set_allocated_family(std::string* family);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // uint32 max_occupancy = 5;
  void clear_max_occupancy();
  static const int kMaxOccupancyFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_occupancy() const;
  void set_max_occupancy(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:TpRegisterRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> namespaces_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_occupancy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_processor_2eproto;
};
// -------------------------------------------------------------------

class TpRegisterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpRegisterResponse) */ {
 public:
  TpRegisterResponse();
  virtual ~TpRegisterResponse();

  TpRegisterResponse(const TpRegisterResponse& from);
  TpRegisterResponse(TpRegisterResponse&& from) noexcept
    : TpRegisterResponse() {
    *this = ::std::move(from);
  }

  inline TpRegisterResponse& operator=(const TpRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpRegisterResponse& operator=(TpRegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpRegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const TpRegisterResponse*>(
               &_TpRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TpRegisterResponse* other);
  friend void swap(TpRegisterResponse& a, TpRegisterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpRegisterResponse* New() const final {
    return CreateMaybeMessage<TpRegisterResponse>(nullptr);
  }

  TpRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpRegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpRegisterResponse& from);
  void MergeFrom(const TpRegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpRegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpRegisterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_processor_2eproto);
    return ::descriptor_table_processor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TpRegisterResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    TpRegisterResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    TpRegisterResponse_Status_OK;
  static constexpr Status ERROR =
    TpRegisterResponse_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return TpRegisterResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TpRegisterResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TpRegisterResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TpRegisterResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TpRegisterResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TpRegisterResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return TpRegisterResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .TpRegisterResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::TpRegisterResponse_Status status() const;
  void set_status(::TpRegisterResponse_Status value);

  // @@protoc_insertion_point(class_scope:TpRegisterResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_processor_2eproto;
};
// -------------------------------------------------------------------

class TpUnregisterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpUnregisterRequest) */ {
 public:
  TpUnregisterRequest();
  virtual ~TpUnregisterRequest();

  TpUnregisterRequest(const TpUnregisterRequest& from);
  TpUnregisterRequest(TpUnregisterRequest&& from) noexcept
    : TpUnregisterRequest() {
    *this = ::std::move(from);
  }

  inline TpUnregisterRequest& operator=(const TpUnregisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpUnregisterRequest& operator=(TpUnregisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpUnregisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpUnregisterRequest* internal_default_instance() {
    return reinterpret_cast<const TpUnregisterRequest*>(
               &_TpUnregisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TpUnregisterRequest* other);
  friend void swap(TpUnregisterRequest& a, TpUnregisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpUnregisterRequest* New() const final {
    return CreateMaybeMessage<TpUnregisterRequest>(nullptr);
  }

  TpUnregisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpUnregisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpUnregisterRequest& from);
  void MergeFrom(const TpUnregisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpUnregisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpUnregisterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_processor_2eproto);
    return ::descriptor_table_processor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TpUnregisterRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_processor_2eproto;
};
// -------------------------------------------------------------------

class TpUnregisterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpUnregisterResponse) */ {
 public:
  TpUnregisterResponse();
  virtual ~TpUnregisterResponse();

  TpUnregisterResponse(const TpUnregisterResponse& from);
  TpUnregisterResponse(TpUnregisterResponse&& from) noexcept
    : TpUnregisterResponse() {
    *this = ::std::move(from);
  }

  inline TpUnregisterResponse& operator=(const TpUnregisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpUnregisterResponse& operator=(TpUnregisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpUnregisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpUnregisterResponse* internal_default_instance() {
    return reinterpret_cast<const TpUnregisterResponse*>(
               &_TpUnregisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TpUnregisterResponse* other);
  friend void swap(TpUnregisterResponse& a, TpUnregisterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpUnregisterResponse* New() const final {
    return CreateMaybeMessage<TpUnregisterResponse>(nullptr);
  }

  TpUnregisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpUnregisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpUnregisterResponse& from);
  void MergeFrom(const TpUnregisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpUnregisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpUnregisterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_processor_2eproto);
    return ::descriptor_table_processor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TpUnregisterResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    TpUnregisterResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    TpUnregisterResponse_Status_OK;
  static constexpr Status ERROR =
    TpUnregisterResponse_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return TpUnregisterResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TpUnregisterResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TpUnregisterResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TpUnregisterResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TpUnregisterResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TpUnregisterResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return TpUnregisterResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .TpUnregisterResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::TpUnregisterResponse_Status status() const;
  void set_status(::TpUnregisterResponse_Status value);

  // @@protoc_insertion_point(class_scope:TpUnregisterResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_processor_2eproto;
};
// -------------------------------------------------------------------

class TpProcessRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpProcessRequest) */ {
 public:
  TpProcessRequest();
  virtual ~TpProcessRequest();

  TpProcessRequest(const TpProcessRequest& from);
  TpProcessRequest(TpProcessRequest&& from) noexcept
    : TpProcessRequest() {
    *this = ::std::move(from);
  }

  inline TpProcessRequest& operator=(const TpProcessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpProcessRequest& operator=(TpProcessRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpProcessRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpProcessRequest* internal_default_instance() {
    return reinterpret_cast<const TpProcessRequest*>(
               &_TpProcessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TpProcessRequest* other);
  friend void swap(TpProcessRequest& a, TpProcessRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpProcessRequest* New() const final {
    return CreateMaybeMessage<TpProcessRequest>(nullptr);
  }

  TpProcessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpProcessRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpProcessRequest& from);
  void MergeFrom(const TpProcessRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpProcessRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpProcessRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_processor_2eproto);
    return ::descriptor_table_processor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes payload = 2;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);

  // string signature = 3;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // string context_id = 4;
  void clear_context_id();
  static const int kContextIdFieldNumber = 4;
  const std::string& context_id() const;
  void set_context_id(const std::string& value);
  void set_context_id(std::string&& value);
  void set_context_id(const char* value);
  void set_context_id(const char* value, size_t size);
  std::string* mutable_context_id();
  std::string* release_context_id();
  void set_allocated_context_id(std::string* context_id);

  // .TransactionHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::TransactionHeader& header() const;
  ::TransactionHeader* release_header();
  ::TransactionHeader* mutable_header();
  void set_allocated_header(::TransactionHeader* header);

  // @@protoc_insertion_point(class_scope:TpProcessRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_id_;
  ::TransactionHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_processor_2eproto;
};
// -------------------------------------------------------------------

class TpProcessResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpProcessResponse) */ {
 public:
  TpProcessResponse();
  virtual ~TpProcessResponse();

  TpProcessResponse(const TpProcessResponse& from);
  TpProcessResponse(TpProcessResponse&& from) noexcept
    : TpProcessResponse() {
    *this = ::std::move(from);
  }

  inline TpProcessResponse& operator=(const TpProcessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpProcessResponse& operator=(TpProcessResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpProcessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpProcessResponse* internal_default_instance() {
    return reinterpret_cast<const TpProcessResponse*>(
               &_TpProcessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TpProcessResponse* other);
  friend void swap(TpProcessResponse& a, TpProcessResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpProcessResponse* New() const final {
    return CreateMaybeMessage<TpProcessResponse>(nullptr);
  }

  TpProcessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpProcessResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpProcessResponse& from);
  void MergeFrom(const TpProcessResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpProcessResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpProcessResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_processor_2eproto);
    return ::descriptor_table_processor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TpProcessResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    TpProcessResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    TpProcessResponse_Status_OK;
  static constexpr Status INVALID_TRANSACTION =
    TpProcessResponse_Status_INVALID_TRANSACTION;
  static constexpr Status INTERNAL_ERROR =
    TpProcessResponse_Status_INTERNAL_ERROR;
  static inline bool Status_IsValid(int value) {
    return TpProcessResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TpProcessResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TpProcessResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TpProcessResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TpProcessResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TpProcessResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return TpProcessResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // bytes extended_data = 3;
  void clear_extended_data();
  static const int kExtendedDataFieldNumber = 3;
  const std::string& extended_data() const;
  void set_extended_data(const std::string& value);
  void set_extended_data(std::string&& value);
  void set_extended_data(const char* value);
  void set_extended_data(const void* value, size_t size);
  std::string* mutable_extended_data();
  std::string* release_extended_data();
  void set_allocated_extended_data(std::string* extended_data);

  // .TpProcessResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::TpProcessResponse_Status status() const;
  void set_status(::TpProcessResponse_Status value);

  // @@protoc_insertion_point(class_scope:TpProcessResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extended_data_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_processor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TpRegisterRequest

// string family = 1;
inline void TpRegisterRequest::clear_family() {
  family_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpRegisterRequest::family() const {
  // @@protoc_insertion_point(field_get:TpRegisterRequest.family)
  return family_.GetNoArena();
}
inline void TpRegisterRequest::set_family(const std::string& value) {
  
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpRegisterRequest.family)
}
inline void TpRegisterRequest::set_family(std::string&& value) {
  
  family_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpRegisterRequest.family)
}
inline void TpRegisterRequest::set_family(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpRegisterRequest.family)
}
inline void TpRegisterRequest::set_family(const char* value, size_t size) {
  
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpRegisterRequest.family)
}
inline std::string* TpRegisterRequest::mutable_family() {
  
  // @@protoc_insertion_point(field_mutable:TpRegisterRequest.family)
  return family_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpRegisterRequest::release_family() {
  // @@protoc_insertion_point(field_release:TpRegisterRequest.family)
  
  return family_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpRegisterRequest::set_allocated_family(std::string* family) {
  if (family != nullptr) {
    
  } else {
    
  }
  family_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family);
  // @@protoc_insertion_point(field_set_allocated:TpRegisterRequest.family)
}

// string version = 2;
inline void TpRegisterRequest::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpRegisterRequest::version() const {
  // @@protoc_insertion_point(field_get:TpRegisterRequest.version)
  return version_.GetNoArena();
}
inline void TpRegisterRequest::set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpRegisterRequest.version)
}
inline void TpRegisterRequest::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpRegisterRequest.version)
}
inline void TpRegisterRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpRegisterRequest.version)
}
inline void TpRegisterRequest::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpRegisterRequest.version)
}
inline std::string* TpRegisterRequest::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:TpRegisterRequest.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpRegisterRequest::release_version() {
  // @@protoc_insertion_point(field_release:TpRegisterRequest.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpRegisterRequest::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TpRegisterRequest.version)
}

// repeated string namespaces = 4;
inline int TpRegisterRequest::namespaces_size() const {
  return namespaces_.size();
}
inline void TpRegisterRequest::clear_namespaces() {
  namespaces_.Clear();
}
inline const std::string& TpRegisterRequest::namespaces(int index) const {
  // @@protoc_insertion_point(field_get:TpRegisterRequest.namespaces)
  return namespaces_.Get(index);
}
inline std::string* TpRegisterRequest::mutable_namespaces(int index) {
  // @@protoc_insertion_point(field_mutable:TpRegisterRequest.namespaces)
  return namespaces_.Mutable(index);
}
inline void TpRegisterRequest::set_namespaces(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TpRegisterRequest.namespaces)
  namespaces_.Mutable(index)->assign(value);
}
inline void TpRegisterRequest::set_namespaces(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TpRegisterRequest.namespaces)
  namespaces_.Mutable(index)->assign(std::move(value));
}
inline void TpRegisterRequest::set_namespaces(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  namespaces_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TpRegisterRequest.namespaces)
}
inline void TpRegisterRequest::set_namespaces(int index, const char* value, size_t size) {
  namespaces_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TpRegisterRequest.namespaces)
}
inline std::string* TpRegisterRequest::add_namespaces() {
  // @@protoc_insertion_point(field_add_mutable:TpRegisterRequest.namespaces)
  return namespaces_.Add();
}
inline void TpRegisterRequest::add_namespaces(const std::string& value) {
  namespaces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TpRegisterRequest.namespaces)
}
inline void TpRegisterRequest::add_namespaces(std::string&& value) {
  namespaces_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TpRegisterRequest.namespaces)
}
inline void TpRegisterRequest::add_namespaces(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  namespaces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TpRegisterRequest.namespaces)
}
inline void TpRegisterRequest::add_namespaces(const char* value, size_t size) {
  namespaces_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TpRegisterRequest.namespaces)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TpRegisterRequest::namespaces() const {
  // @@protoc_insertion_point(field_list:TpRegisterRequest.namespaces)
  return namespaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TpRegisterRequest::mutable_namespaces() {
  // @@protoc_insertion_point(field_mutable_list:TpRegisterRequest.namespaces)
  return &namespaces_;
}

// uint32 max_occupancy = 5;
inline void TpRegisterRequest::clear_max_occupancy() {
  max_occupancy_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TpRegisterRequest::max_occupancy() const {
  // @@protoc_insertion_point(field_get:TpRegisterRequest.max_occupancy)
  return max_occupancy_;
}
inline void TpRegisterRequest::set_max_occupancy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_occupancy_ = value;
  // @@protoc_insertion_point(field_set:TpRegisterRequest.max_occupancy)
}

// -------------------------------------------------------------------

// TpRegisterResponse

// .TpRegisterResponse.Status status = 1;
inline void TpRegisterResponse::clear_status() {
  status_ = 0;
}
inline ::TpRegisterResponse_Status TpRegisterResponse::status() const {
  // @@protoc_insertion_point(field_get:TpRegisterResponse.status)
  return static_cast< ::TpRegisterResponse_Status >(status_);
}
inline void TpRegisterResponse::set_status(::TpRegisterResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TpRegisterResponse.status)
}

// -------------------------------------------------------------------

// TpUnregisterRequest

// -------------------------------------------------------------------

// TpUnregisterResponse

// .TpUnregisterResponse.Status status = 1;
inline void TpUnregisterResponse::clear_status() {
  status_ = 0;
}
inline ::TpUnregisterResponse_Status TpUnregisterResponse::status() const {
  // @@protoc_insertion_point(field_get:TpUnregisterResponse.status)
  return static_cast< ::TpUnregisterResponse_Status >(status_);
}
inline void TpUnregisterResponse::set_status(::TpUnregisterResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TpUnregisterResponse.status)
}

// -------------------------------------------------------------------

// TpProcessRequest

// .TransactionHeader header = 1;
inline bool TpProcessRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::TransactionHeader& TpProcessRequest::header() const {
  const ::TransactionHeader* p = header_;
  // @@protoc_insertion_point(field_get:TpProcessRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::TransactionHeader*>(
      &::_TransactionHeader_default_instance_);
}
inline ::TransactionHeader* TpProcessRequest::release_header() {
  // @@protoc_insertion_point(field_release:TpProcessRequest.header)
  
  ::TransactionHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::TransactionHeader* TpProcessRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransactionHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TpProcessRequest.header)
  return header_;
}
inline void TpProcessRequest::set_allocated_header(::TransactionHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:TpProcessRequest.header)
}

// bytes payload = 2;
inline void TpProcessRequest::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpProcessRequest::payload() const {
  // @@protoc_insertion_point(field_get:TpProcessRequest.payload)
  return payload_.GetNoArena();
}
inline void TpProcessRequest::set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpProcessRequest.payload)
}
inline void TpProcessRequest::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpProcessRequest.payload)
}
inline void TpProcessRequest::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpProcessRequest.payload)
}
inline void TpProcessRequest::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpProcessRequest.payload)
}
inline std::string* TpProcessRequest::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:TpProcessRequest.payload)
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpProcessRequest::release_payload() {
  // @@protoc_insertion_point(field_release:TpProcessRequest.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpProcessRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:TpProcessRequest.payload)
}

// string signature = 3;
inline void TpProcessRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpProcessRequest::signature() const {
  // @@protoc_insertion_point(field_get:TpProcessRequest.signature)
  return signature_.GetNoArena();
}
inline void TpProcessRequest::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpProcessRequest.signature)
}
inline void TpProcessRequest::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpProcessRequest.signature)
}
inline void TpProcessRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpProcessRequest.signature)
}
inline void TpProcessRequest::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpProcessRequest.signature)
}
inline std::string* TpProcessRequest::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:TpProcessRequest.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpProcessRequest::release_signature() {
  // @@protoc_insertion_point(field_release:TpProcessRequest.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpProcessRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:TpProcessRequest.signature)
}

// string context_id = 4;
inline void TpProcessRequest::clear_context_id() {
  context_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpProcessRequest::context_id() const {
  // @@protoc_insertion_point(field_get:TpProcessRequest.context_id)
  return context_id_.GetNoArena();
}
inline void TpProcessRequest::set_context_id(const std::string& value) {
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpProcessRequest.context_id)
}
inline void TpProcessRequest::set_context_id(std::string&& value) {
  
  context_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpProcessRequest.context_id)
}
inline void TpProcessRequest::set_context_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpProcessRequest.context_id)
}
inline void TpProcessRequest::set_context_id(const char* value, size_t size) {
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpProcessRequest.context_id)
}
inline std::string* TpProcessRequest::mutable_context_id() {
  
  // @@protoc_insertion_point(field_mutable:TpProcessRequest.context_id)
  return context_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpProcessRequest::release_context_id() {
  // @@protoc_insertion_point(field_release:TpProcessRequest.context_id)
  
  return context_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpProcessRequest::set_allocated_context_id(std::string* context_id) {
  if (context_id != nullptr) {
    
  } else {
    
  }
  context_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context_id);
  // @@protoc_insertion_point(field_set_allocated:TpProcessRequest.context_id)
}

// -------------------------------------------------------------------

// TpProcessResponse

// .TpProcessResponse.Status status = 1;
inline void TpProcessResponse::clear_status() {
  status_ = 0;
}
inline ::TpProcessResponse_Status TpProcessResponse::status() const {
  // @@protoc_insertion_point(field_get:TpProcessResponse.status)
  return static_cast< ::TpProcessResponse_Status >(status_);
}
inline void TpProcessResponse::set_status(::TpProcessResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TpProcessResponse.status)
}

// string message = 2;
inline void TpProcessResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpProcessResponse::message() const {
  // @@protoc_insertion_point(field_get:TpProcessResponse.message)
  return message_.GetNoArena();
}
inline void TpProcessResponse::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpProcessResponse.message)
}
inline void TpProcessResponse::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpProcessResponse.message)
}
inline void TpProcessResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpProcessResponse.message)
}
inline void TpProcessResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpProcessResponse.message)
}
inline std::string* TpProcessResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:TpProcessResponse.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpProcessResponse::release_message() {
  // @@protoc_insertion_point(field_release:TpProcessResponse.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpProcessResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:TpProcessResponse.message)
}

// bytes extended_data = 3;
inline void TpProcessResponse::clear_extended_data() {
  extended_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpProcessResponse::extended_data() const {
  // @@protoc_insertion_point(field_get:TpProcessResponse.extended_data)
  return extended_data_.GetNoArena();
}
inline void TpProcessResponse::set_extended_data(const std::string& value) {
  
  extended_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpProcessResponse.extended_data)
}
inline void TpProcessResponse::set_extended_data(std::string&& value) {
  
  extended_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpProcessResponse.extended_data)
}
inline void TpProcessResponse::set_extended_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extended_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpProcessResponse.extended_data)
}
inline void TpProcessResponse::set_extended_data(const void* value, size_t size) {
  
  extended_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpProcessResponse.extended_data)
}
inline std::string* TpProcessResponse::mutable_extended_data() {
  
  // @@protoc_insertion_point(field_mutable:TpProcessResponse.extended_data)
  return extended_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpProcessResponse::release_extended_data() {
  // @@protoc_insertion_point(field_release:TpProcessResponse.extended_data)
  
  return extended_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpProcessResponse::set_allocated_extended_data(std::string* extended_data) {
  if (extended_data != nullptr) {
    
  } else {
    
  }
  extended_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extended_data);
  // @@protoc_insertion_point(field_set_allocated:TpProcessResponse.extended_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TpRegisterResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TpRegisterResponse_Status>() {
  return ::TpRegisterResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::TpUnregisterResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TpUnregisterResponse_Status>() {
  return ::TpUnregisterResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::TpProcessResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TpProcessResponse_Status>() {
  return ::TpProcessResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_processor_2eproto
