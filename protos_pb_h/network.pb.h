// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2eproto;
class DisconnectMessage;
class DisconnectMessageDefaultTypeInternal;
extern DisconnectMessageDefaultTypeInternal _DisconnectMessage_default_instance_;
class GetPeersRequest;
class GetPeersRequestDefaultTypeInternal;
extern GetPeersRequestDefaultTypeInternal _GetPeersRequest_default_instance_;
class GetPeersResponse;
class GetPeersResponseDefaultTypeInternal;
extern GetPeersResponseDefaultTypeInternal _GetPeersResponse_default_instance_;
class GossipBatchByBatchIdRequest;
class GossipBatchByBatchIdRequestDefaultTypeInternal;
extern GossipBatchByBatchIdRequestDefaultTypeInternal _GossipBatchByBatchIdRequest_default_instance_;
class GossipBatchByTransactionIdRequest;
class GossipBatchByTransactionIdRequestDefaultTypeInternal;
extern GossipBatchByTransactionIdRequestDefaultTypeInternal _GossipBatchByTransactionIdRequest_default_instance_;
class GossipBatchResponse;
class GossipBatchResponseDefaultTypeInternal;
extern GossipBatchResponseDefaultTypeInternal _GossipBatchResponse_default_instance_;
class GossipBlockRequest;
class GossipBlockRequestDefaultTypeInternal;
extern GossipBlockRequestDefaultTypeInternal _GossipBlockRequest_default_instance_;
class GossipBlockResponse;
class GossipBlockResponseDefaultTypeInternal;
extern GossipBlockResponseDefaultTypeInternal _GossipBlockResponse_default_instance_;
class GossipMessage;
class GossipMessageDefaultTypeInternal;
extern GossipMessageDefaultTypeInternal _GossipMessage_default_instance_;
class NetworkAcknowledgement;
class NetworkAcknowledgementDefaultTypeInternal;
extern NetworkAcknowledgementDefaultTypeInternal _NetworkAcknowledgement_default_instance_;
class PeerRegisterRequest;
class PeerRegisterRequestDefaultTypeInternal;
extern PeerRegisterRequestDefaultTypeInternal _PeerRegisterRequest_default_instance_;
class PeerUnregisterRequest;
class PeerUnregisterRequestDefaultTypeInternal;
extern PeerUnregisterRequestDefaultTypeInternal _PeerUnregisterRequest_default_instance_;
class PingRequest;
class PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PingResponse;
class PingResponseDefaultTypeInternal;
extern PingResponseDefaultTypeInternal _PingResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DisconnectMessage* Arena::CreateMaybeMessage<::DisconnectMessage>(Arena*);
template<> ::GetPeersRequest* Arena::CreateMaybeMessage<::GetPeersRequest>(Arena*);
template<> ::GetPeersResponse* Arena::CreateMaybeMessage<::GetPeersResponse>(Arena*);
template<> ::GossipBatchByBatchIdRequest* Arena::CreateMaybeMessage<::GossipBatchByBatchIdRequest>(Arena*);
template<> ::GossipBatchByTransactionIdRequest* Arena::CreateMaybeMessage<::GossipBatchByTransactionIdRequest>(Arena*);
template<> ::GossipBatchResponse* Arena::CreateMaybeMessage<::GossipBatchResponse>(Arena*);
template<> ::GossipBlockRequest* Arena::CreateMaybeMessage<::GossipBlockRequest>(Arena*);
template<> ::GossipBlockResponse* Arena::CreateMaybeMessage<::GossipBlockResponse>(Arena*);
template<> ::GossipMessage* Arena::CreateMaybeMessage<::GossipMessage>(Arena*);
template<> ::NetworkAcknowledgement* Arena::CreateMaybeMessage<::NetworkAcknowledgement>(Arena*);
template<> ::PeerRegisterRequest* Arena::CreateMaybeMessage<::PeerRegisterRequest>(Arena*);
template<> ::PeerUnregisterRequest* Arena::CreateMaybeMessage<::PeerUnregisterRequest>(Arena*);
template<> ::PingRequest* Arena::CreateMaybeMessage<::PingRequest>(Arena*);
template<> ::PingResponse* Arena::CreateMaybeMessage<::PingResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum GossipMessage_ContentType : int {
  GossipMessage_ContentType_CONTENT_TYPE_UNSET = 0,
  GossipMessage_ContentType_BLOCK = 1,
  GossipMessage_ContentType_BATCH = 2,
  GossipMessage_ContentType_CONSENSUS = 3,
  GossipMessage_ContentType_GossipMessage_ContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GossipMessage_ContentType_GossipMessage_ContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GossipMessage_ContentType_IsValid(int value);
constexpr GossipMessage_ContentType GossipMessage_ContentType_ContentType_MIN = GossipMessage_ContentType_CONTENT_TYPE_UNSET;
constexpr GossipMessage_ContentType GossipMessage_ContentType_ContentType_MAX = GossipMessage_ContentType_CONSENSUS;
constexpr int GossipMessage_ContentType_ContentType_ARRAYSIZE = GossipMessage_ContentType_ContentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GossipMessage_ContentType_descriptor();
template<typename T>
inline const std::string& GossipMessage_ContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GossipMessage_ContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GossipMessage_ContentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GossipMessage_ContentType_descriptor(), enum_t_value);
}
inline bool GossipMessage_ContentType_Parse(
    const std::string& name, GossipMessage_ContentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GossipMessage_ContentType>(
    GossipMessage_ContentType_descriptor(), name, value);
}
enum NetworkAcknowledgement_Status : int {
  NetworkAcknowledgement_Status_STATUS_UNSET = 0,
  NetworkAcknowledgement_Status_OK = 1,
  NetworkAcknowledgement_Status_ERROR = 2,
  NetworkAcknowledgement_Status_NetworkAcknowledgement_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NetworkAcknowledgement_Status_NetworkAcknowledgement_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NetworkAcknowledgement_Status_IsValid(int value);
constexpr NetworkAcknowledgement_Status NetworkAcknowledgement_Status_Status_MIN = NetworkAcknowledgement_Status_STATUS_UNSET;
constexpr NetworkAcknowledgement_Status NetworkAcknowledgement_Status_Status_MAX = NetworkAcknowledgement_Status_ERROR;
constexpr int NetworkAcknowledgement_Status_Status_ARRAYSIZE = NetworkAcknowledgement_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkAcknowledgement_Status_descriptor();
template<typename T>
inline const std::string& NetworkAcknowledgement_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkAcknowledgement_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkAcknowledgement_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkAcknowledgement_Status_descriptor(), enum_t_value);
}
inline bool NetworkAcknowledgement_Status_Parse(
    const std::string& name, NetworkAcknowledgement_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkAcknowledgement_Status>(
    NetworkAcknowledgement_Status_descriptor(), name, value);
}
// ===================================================================

class DisconnectMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DisconnectMessage) */ {
 public:
  DisconnectMessage();
  virtual ~DisconnectMessage();

  DisconnectMessage(const DisconnectMessage& from);
  DisconnectMessage(DisconnectMessage&& from) noexcept
    : DisconnectMessage() {
    *this = ::std::move(from);
  }

  inline DisconnectMessage& operator=(const DisconnectMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectMessage& operator=(DisconnectMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisconnectMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectMessage* internal_default_instance() {
    return reinterpret_cast<const DisconnectMessage*>(
               &_DisconnectMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DisconnectMessage* other);
  friend void swap(DisconnectMessage& a, DisconnectMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisconnectMessage* New() const final {
    return CreateMaybeMessage<DisconnectMessage>(nullptr);
  }

  DisconnectMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisconnectMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisconnectMessage& from);
  void MergeFrom(const DisconnectMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DisconnectMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DisconnectMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class PeerRegisterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PeerRegisterRequest) */ {
 public:
  PeerRegisterRequest();
  virtual ~PeerRegisterRequest();

  PeerRegisterRequest(const PeerRegisterRequest& from);
  PeerRegisterRequest(PeerRegisterRequest&& from) noexcept
    : PeerRegisterRequest() {
    *this = ::std::move(from);
  }

  inline PeerRegisterRequest& operator=(const PeerRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerRegisterRequest& operator=(PeerRegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const PeerRegisterRequest*>(
               &_PeerRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PeerRegisterRequest* other);
  friend void swap(PeerRegisterRequest& a, PeerRegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerRegisterRequest* New() const final {
    return CreateMaybeMessage<PeerRegisterRequest>(nullptr);
  }

  PeerRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerRegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerRegisterRequest& from);
  void MergeFrom(const PeerRegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerRegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PeerRegisterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string endpoint = 1;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);

  // uint32 protocol_version = 2;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version() const;
  void set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:PeerRegisterRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class PeerUnregisterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PeerUnregisterRequest) */ {
 public:
  PeerUnregisterRequest();
  virtual ~PeerUnregisterRequest();

  PeerUnregisterRequest(const PeerUnregisterRequest& from);
  PeerUnregisterRequest(PeerUnregisterRequest&& from) noexcept
    : PeerUnregisterRequest() {
    *this = ::std::move(from);
  }

  inline PeerUnregisterRequest& operator=(const PeerUnregisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerUnregisterRequest& operator=(PeerUnregisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerUnregisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerUnregisterRequest* internal_default_instance() {
    return reinterpret_cast<const PeerUnregisterRequest*>(
               &_PeerUnregisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PeerUnregisterRequest* other);
  friend void swap(PeerUnregisterRequest& a, PeerUnregisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerUnregisterRequest* New() const final {
    return CreateMaybeMessage<PeerUnregisterRequest>(nullptr);
  }

  PeerUnregisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerUnregisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerUnregisterRequest& from);
  void MergeFrom(const PeerUnregisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerUnregisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PeerUnregisterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PeerUnregisterRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetPeersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetPeersRequest) */ {
 public:
  GetPeersRequest();
  virtual ~GetPeersRequest();

  GetPeersRequest(const GetPeersRequest& from);
  GetPeersRequest(GetPeersRequest&& from) noexcept
    : GetPeersRequest() {
    *this = ::std::move(from);
  }

  inline GetPeersRequest& operator=(const GetPeersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeersRequest& operator=(GetPeersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPeersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeersRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeersRequest*>(
               &_GetPeersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetPeersRequest* other);
  friend void swap(GetPeersRequest& a, GetPeersRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeersRequest* New() const final {
    return CreateMaybeMessage<GetPeersRequest>(nullptr);
  }

  GetPeersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPeersRequest& from);
  void MergeFrom(const GetPeersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetPeersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GetPeersRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetPeersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetPeersResponse) */ {
 public:
  GetPeersResponse();
  virtual ~GetPeersResponse();

  GetPeersResponse(const GetPeersResponse& from);
  GetPeersResponse(GetPeersResponse&& from) noexcept
    : GetPeersResponse() {
    *this = ::std::move(from);
  }

  inline GetPeersResponse& operator=(const GetPeersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeersResponse& operator=(GetPeersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPeersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeersResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeersResponse*>(
               &_GetPeersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetPeersResponse* other);
  friend void swap(GetPeersResponse& a, GetPeersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeersResponse* New() const final {
    return CreateMaybeMessage<GetPeersResponse>(nullptr);
  }

  GetPeersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPeersResponse& from);
  void MergeFrom(const GetPeersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetPeersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string peer_endpoints = 1;
  int peer_endpoints_size() const;
  void clear_peer_endpoints();
  static const int kPeerEndpointsFieldNumber = 1;
  const std::string& peer_endpoints(int index) const;
  std::string* mutable_peer_endpoints(int index);
  void set_peer_endpoints(int index, const std::string& value);
  void set_peer_endpoints(int index, std::string&& value);
  void set_peer_endpoints(int index, const char* value);
  void set_peer_endpoints(int index, const char* value, size_t size);
  std::string* add_peer_endpoints();
  void add_peer_endpoints(const std::string& value);
  void add_peer_endpoints(std::string&& value);
  void add_peer_endpoints(const char* value);
  void add_peer_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& peer_endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_peer_endpoints();

  // @@protoc_insertion_point(class_scope:GetPeersResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> peer_endpoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class PingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PingRequest) */ {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PingRequest* other);
  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingRequest* New() const final {
    return CreateMaybeMessage<PingRequest>(nullptr);
  }

  PingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PingRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class PingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PingResponse) */ {
 public:
  PingResponse();
  virtual ~PingResponse();

  PingResponse(const PingResponse& from);
  PingResponse(PingResponse&& from) noexcept
    : PingResponse() {
    *this = ::std::move(from);
  }

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingResponse& operator=(PingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingResponse* internal_default_instance() {
    return reinterpret_cast<const PingResponse*>(
               &_PingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PingResponse* other);
  friend void swap(PingResponse& a, PingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingResponse* New() const final {
    return CreateMaybeMessage<PingResponse>(nullptr);
  }

  PingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingResponse& from);
  void MergeFrom(const PingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PingResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GossipMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GossipMessage) */ {
 public:
  GossipMessage();
  virtual ~GossipMessage();

  GossipMessage(const GossipMessage& from);
  GossipMessage(GossipMessage&& from) noexcept
    : GossipMessage() {
    *this = ::std::move(from);
  }

  inline GossipMessage& operator=(const GossipMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GossipMessage& operator=(GossipMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GossipMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipMessage* internal_default_instance() {
    return reinterpret_cast<const GossipMessage*>(
               &_GossipMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GossipMessage* other);
  friend void swap(GossipMessage& a, GossipMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GossipMessage* New() const final {
    return CreateMaybeMessage<GossipMessage>(nullptr);
  }

  GossipMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GossipMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GossipMessage& from);
  void MergeFrom(const GossipMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GossipMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GossipMessage_ContentType ContentType;
  static constexpr ContentType CONTENT_TYPE_UNSET =
    GossipMessage_ContentType_CONTENT_TYPE_UNSET;
  static constexpr ContentType BLOCK =
    GossipMessage_ContentType_BLOCK;
  static constexpr ContentType BATCH =
    GossipMessage_ContentType_BATCH;
  static constexpr ContentType CONSENSUS =
    GossipMessage_ContentType_CONSENSUS;
  static inline bool ContentType_IsValid(int value) {
    return GossipMessage_ContentType_IsValid(value);
  }
  static constexpr ContentType ContentType_MIN =
    GossipMessage_ContentType_ContentType_MIN;
  static constexpr ContentType ContentType_MAX =
    GossipMessage_ContentType_ContentType_MAX;
  static constexpr int ContentType_ARRAYSIZE =
    GossipMessage_ContentType_ContentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ContentType_descriptor() {
    return GossipMessage_ContentType_descriptor();
  }
  template<typename T>
  static inline const std::string& ContentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ContentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ContentType_Name.");
    return GossipMessage_ContentType_Name(enum_t_value);
  }
  static inline bool ContentType_Parse(const std::string& name,
      ContentType* value) {
    return GossipMessage_ContentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // .GossipMessage.ContentType content_type = 2;
  void clear_content_type();
  static const int kContentTypeFieldNumber = 2;
  ::GossipMessage_ContentType content_type() const;
  void set_content_type(::GossipMessage_ContentType value);

  // uint32 time_to_live = 3;
  void clear_time_to_live();
  static const int kTimeToLiveFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_to_live() const;
  void set_time_to_live(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:GossipMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int content_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_to_live_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkAcknowledgement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkAcknowledgement) */ {
 public:
  NetworkAcknowledgement();
  virtual ~NetworkAcknowledgement();

  NetworkAcknowledgement(const NetworkAcknowledgement& from);
  NetworkAcknowledgement(NetworkAcknowledgement&& from) noexcept
    : NetworkAcknowledgement() {
    *this = ::std::move(from);
  }

  inline NetworkAcknowledgement& operator=(const NetworkAcknowledgement& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkAcknowledgement& operator=(NetworkAcknowledgement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkAcknowledgement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkAcknowledgement* internal_default_instance() {
    return reinterpret_cast<const NetworkAcknowledgement*>(
               &_NetworkAcknowledgement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(NetworkAcknowledgement* other);
  friend void swap(NetworkAcknowledgement& a, NetworkAcknowledgement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkAcknowledgement* New() const final {
    return CreateMaybeMessage<NetworkAcknowledgement>(nullptr);
  }

  NetworkAcknowledgement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkAcknowledgement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkAcknowledgement& from);
  void MergeFrom(const NetworkAcknowledgement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkAcknowledgement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkAcknowledgement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NetworkAcknowledgement_Status Status;
  static constexpr Status STATUS_UNSET =
    NetworkAcknowledgement_Status_STATUS_UNSET;
  static constexpr Status OK =
    NetworkAcknowledgement_Status_OK;
  static constexpr Status ERROR =
    NetworkAcknowledgement_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return NetworkAcknowledgement_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    NetworkAcknowledgement_Status_Status_MIN;
  static constexpr Status Status_MAX =
    NetworkAcknowledgement_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    NetworkAcknowledgement_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return NetworkAcknowledgement_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return NetworkAcknowledgement_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return NetworkAcknowledgement_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .NetworkAcknowledgement.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::NetworkAcknowledgement_Status status() const;
  void set_status(::NetworkAcknowledgement_Status value);

  // @@protoc_insertion_point(class_scope:NetworkAcknowledgement)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GossipBlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GossipBlockRequest) */ {
 public:
  GossipBlockRequest();
  virtual ~GossipBlockRequest();

  GossipBlockRequest(const GossipBlockRequest& from);
  GossipBlockRequest(GossipBlockRequest&& from) noexcept
    : GossipBlockRequest() {
    *this = ::std::move(from);
  }

  inline GossipBlockRequest& operator=(const GossipBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GossipBlockRequest& operator=(GossipBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GossipBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipBlockRequest* internal_default_instance() {
    return reinterpret_cast<const GossipBlockRequest*>(
               &_GossipBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GossipBlockRequest* other);
  friend void swap(GossipBlockRequest& a, GossipBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GossipBlockRequest* New() const final {
    return CreateMaybeMessage<GossipBlockRequest>(nullptr);
  }

  GossipBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GossipBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GossipBlockRequest& from);
  void MergeFrom(const GossipBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GossipBlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const char* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);

  // string nonce = 2;
  void clear_nonce();
  static const int kNonceFieldNumber = 2;
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);

  // uint32 time_to_live = 3;
  void clear_time_to_live();
  static const int kTimeToLiveFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_to_live() const;
  void set_time_to_live(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:GossipBlockRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_to_live_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GossipBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GossipBlockResponse) */ {
 public:
  GossipBlockResponse();
  virtual ~GossipBlockResponse();

  GossipBlockResponse(const GossipBlockResponse& from);
  GossipBlockResponse(GossipBlockResponse&& from) noexcept
    : GossipBlockResponse() {
    *this = ::std::move(from);
  }

  inline GossipBlockResponse& operator=(const GossipBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GossipBlockResponse& operator=(GossipBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GossipBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipBlockResponse* internal_default_instance() {
    return reinterpret_cast<const GossipBlockResponse*>(
               &_GossipBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GossipBlockResponse* other);
  friend void swap(GossipBlockResponse& a, GossipBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GossipBlockResponse* New() const final {
    return CreateMaybeMessage<GossipBlockResponse>(nullptr);
  }

  GossipBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GossipBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GossipBlockResponse& from);
  void MergeFrom(const GossipBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GossipBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // @@protoc_insertion_point(class_scope:GossipBlockResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GossipBatchResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GossipBatchResponse) */ {
 public:
  GossipBatchResponse();
  virtual ~GossipBatchResponse();

  GossipBatchResponse(const GossipBatchResponse& from);
  GossipBatchResponse(GossipBatchResponse&& from) noexcept
    : GossipBatchResponse() {
    *this = ::std::move(from);
  }

  inline GossipBatchResponse& operator=(const GossipBatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GossipBatchResponse& operator=(GossipBatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GossipBatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipBatchResponse* internal_default_instance() {
    return reinterpret_cast<const GossipBatchResponse*>(
               &_GossipBatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GossipBatchResponse* other);
  friend void swap(GossipBatchResponse& a, GossipBatchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GossipBatchResponse* New() const final {
    return CreateMaybeMessage<GossipBatchResponse>(nullptr);
  }

  GossipBatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GossipBatchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GossipBatchResponse& from);
  void MergeFrom(const GossipBatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipBatchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GossipBatchResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // @@protoc_insertion_point(class_scope:GossipBatchResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GossipBatchByBatchIdRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GossipBatchByBatchIdRequest) */ {
 public:
  GossipBatchByBatchIdRequest();
  virtual ~GossipBatchByBatchIdRequest();

  GossipBatchByBatchIdRequest(const GossipBatchByBatchIdRequest& from);
  GossipBatchByBatchIdRequest(GossipBatchByBatchIdRequest&& from) noexcept
    : GossipBatchByBatchIdRequest() {
    *this = ::std::move(from);
  }

  inline GossipBatchByBatchIdRequest& operator=(const GossipBatchByBatchIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GossipBatchByBatchIdRequest& operator=(GossipBatchByBatchIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GossipBatchByBatchIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipBatchByBatchIdRequest* internal_default_instance() {
    return reinterpret_cast<const GossipBatchByBatchIdRequest*>(
               &_GossipBatchByBatchIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GossipBatchByBatchIdRequest* other);
  friend void swap(GossipBatchByBatchIdRequest& a, GossipBatchByBatchIdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GossipBatchByBatchIdRequest* New() const final {
    return CreateMaybeMessage<GossipBatchByBatchIdRequest>(nullptr);
  }

  GossipBatchByBatchIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GossipBatchByBatchIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GossipBatchByBatchIdRequest& from);
  void MergeFrom(const GossipBatchByBatchIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipBatchByBatchIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GossipBatchByBatchIdRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string nonce = 2;
  void clear_nonce();
  static const int kNonceFieldNumber = 2;
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);

  // uint32 time_to_live = 3;
  void clear_time_to_live();
  static const int kTimeToLiveFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_to_live() const;
  void set_time_to_live(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:GossipBatchByBatchIdRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_to_live_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GossipBatchByTransactionIdRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GossipBatchByTransactionIdRequest) */ {
 public:
  GossipBatchByTransactionIdRequest();
  virtual ~GossipBatchByTransactionIdRequest();

  GossipBatchByTransactionIdRequest(const GossipBatchByTransactionIdRequest& from);
  GossipBatchByTransactionIdRequest(GossipBatchByTransactionIdRequest&& from) noexcept
    : GossipBatchByTransactionIdRequest() {
    *this = ::std::move(from);
  }

  inline GossipBatchByTransactionIdRequest& operator=(const GossipBatchByTransactionIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GossipBatchByTransactionIdRequest& operator=(GossipBatchByTransactionIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GossipBatchByTransactionIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipBatchByTransactionIdRequest* internal_default_instance() {
    return reinterpret_cast<const GossipBatchByTransactionIdRequest*>(
               &_GossipBatchByTransactionIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GossipBatchByTransactionIdRequest* other);
  friend void swap(GossipBatchByTransactionIdRequest& a, GossipBatchByTransactionIdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GossipBatchByTransactionIdRequest* New() const final {
    return CreateMaybeMessage<GossipBatchByTransactionIdRequest>(nullptr);
  }

  GossipBatchByTransactionIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GossipBatchByTransactionIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GossipBatchByTransactionIdRequest& from);
  void MergeFrom(const GossipBatchByTransactionIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipBatchByTransactionIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GossipBatchByTransactionIdRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ids = 1;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 1;
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();

  // string nonce = 2;
  void clear_nonce();
  static const int kNonceFieldNumber = 2;
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);

  // uint32 time_to_live = 3;
  void clear_time_to_live();
  static const int kTimeToLiveFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_to_live() const;
  void set_time_to_live(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:GossipBatchByTransactionIdRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_to_live_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DisconnectMessage

// -------------------------------------------------------------------

// PeerRegisterRequest

// string endpoint = 1;
inline void PeerRegisterRequest::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerRegisterRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:PeerRegisterRequest.endpoint)
  return endpoint_.GetNoArena();
}
inline void PeerRegisterRequest::set_endpoint(const std::string& value) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PeerRegisterRequest.endpoint)
}
inline void PeerRegisterRequest::set_endpoint(std::string&& value) {
  
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PeerRegisterRequest.endpoint)
}
inline void PeerRegisterRequest::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PeerRegisterRequest.endpoint)
}
inline void PeerRegisterRequest::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PeerRegisterRequest.endpoint)
}
inline std::string* PeerRegisterRequest::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:PeerRegisterRequest.endpoint)
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerRegisterRequest::release_endpoint() {
  // @@protoc_insertion_point(field_release:PeerRegisterRequest.endpoint)
  
  return endpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerRegisterRequest::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:PeerRegisterRequest.endpoint)
}

// uint32 protocol_version = 2;
inline void PeerRegisterRequest::clear_protocol_version() {
  protocol_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerRegisterRequest::protocol_version() const {
  // @@protoc_insertion_point(field_get:PeerRegisterRequest.protocol_version)
  return protocol_version_;
}
inline void PeerRegisterRequest::set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:PeerRegisterRequest.protocol_version)
}

// -------------------------------------------------------------------

// PeerUnregisterRequest

// -------------------------------------------------------------------

// GetPeersRequest

// -------------------------------------------------------------------

// GetPeersResponse

// repeated string peer_endpoints = 1;
inline int GetPeersResponse::peer_endpoints_size() const {
  return peer_endpoints_.size();
}
inline void GetPeersResponse::clear_peer_endpoints() {
  peer_endpoints_.Clear();
}
inline const std::string& GetPeersResponse::peer_endpoints(int index) const {
  // @@protoc_insertion_point(field_get:GetPeersResponse.peer_endpoints)
  return peer_endpoints_.Get(index);
}
inline std::string* GetPeersResponse::mutable_peer_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:GetPeersResponse.peer_endpoints)
  return peer_endpoints_.Mutable(index);
}
inline void GetPeersResponse::set_peer_endpoints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:GetPeersResponse.peer_endpoints)
  peer_endpoints_.Mutable(index)->assign(value);
}
inline void GetPeersResponse::set_peer_endpoints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:GetPeersResponse.peer_endpoints)
  peer_endpoints_.Mutable(index)->assign(std::move(value));
}
inline void GetPeersResponse::set_peer_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peer_endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetPeersResponse.peer_endpoints)
}
inline void GetPeersResponse::set_peer_endpoints(int index, const char* value, size_t size) {
  peer_endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetPeersResponse.peer_endpoints)
}
inline std::string* GetPeersResponse::add_peer_endpoints() {
  // @@protoc_insertion_point(field_add_mutable:GetPeersResponse.peer_endpoints)
  return peer_endpoints_.Add();
}
inline void GetPeersResponse::add_peer_endpoints(const std::string& value) {
  peer_endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetPeersResponse.peer_endpoints)
}
inline void GetPeersResponse::add_peer_endpoints(std::string&& value) {
  peer_endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetPeersResponse.peer_endpoints)
}
inline void GetPeersResponse::add_peer_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peer_endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetPeersResponse.peer_endpoints)
}
inline void GetPeersResponse::add_peer_endpoints(const char* value, size_t size) {
  peer_endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetPeersResponse.peer_endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetPeersResponse::peer_endpoints() const {
  // @@protoc_insertion_point(field_list:GetPeersResponse.peer_endpoints)
  return peer_endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetPeersResponse::mutable_peer_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:GetPeersResponse.peer_endpoints)
  return &peer_endpoints_;
}

// -------------------------------------------------------------------

// PingRequest

// -------------------------------------------------------------------

// PingResponse

// -------------------------------------------------------------------

// GossipMessage

// bytes content = 1;
inline void GossipMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GossipMessage::content() const {
  // @@protoc_insertion_point(field_get:GossipMessage.content)
  return content_.GetNoArena();
}
inline void GossipMessage::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GossipMessage.content)
}
inline void GossipMessage::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GossipMessage.content)
}
inline void GossipMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GossipMessage.content)
}
inline void GossipMessage::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GossipMessage.content)
}
inline std::string* GossipMessage::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:GossipMessage.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GossipMessage::release_content() {
  // @@protoc_insertion_point(field_release:GossipMessage.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GossipMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:GossipMessage.content)
}

// .GossipMessage.ContentType content_type = 2;
inline void GossipMessage::clear_content_type() {
  content_type_ = 0;
}
inline ::GossipMessage_ContentType GossipMessage::content_type() const {
  // @@protoc_insertion_point(field_get:GossipMessage.content_type)
  return static_cast< ::GossipMessage_ContentType >(content_type_);
}
inline void GossipMessage::set_content_type(::GossipMessage_ContentType value) {
  
  content_type_ = value;
  // @@protoc_insertion_point(field_set:GossipMessage.content_type)
}

// uint32 time_to_live = 3;
inline void GossipMessage::clear_time_to_live() {
  time_to_live_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GossipMessage::time_to_live() const {
  // @@protoc_insertion_point(field_get:GossipMessage.time_to_live)
  return time_to_live_;
}
inline void GossipMessage::set_time_to_live(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_to_live_ = value;
  // @@protoc_insertion_point(field_set:GossipMessage.time_to_live)
}

// -------------------------------------------------------------------

// NetworkAcknowledgement

// .NetworkAcknowledgement.Status status = 1;
inline void NetworkAcknowledgement::clear_status() {
  status_ = 0;
}
inline ::NetworkAcknowledgement_Status NetworkAcknowledgement::status() const {
  // @@protoc_insertion_point(field_get:NetworkAcknowledgement.status)
  return static_cast< ::NetworkAcknowledgement_Status >(status_);
}
inline void NetworkAcknowledgement::set_status(::NetworkAcknowledgement_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:NetworkAcknowledgement.status)
}

// -------------------------------------------------------------------

// GossipBlockRequest

// string block_id = 1;
inline void GossipBlockRequest::clear_block_id() {
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GossipBlockRequest::block_id() const {
  // @@protoc_insertion_point(field_get:GossipBlockRequest.block_id)
  return block_id_.GetNoArena();
}
inline void GossipBlockRequest::set_block_id(const std::string& value) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GossipBlockRequest.block_id)
}
inline void GossipBlockRequest::set_block_id(std::string&& value) {
  
  block_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GossipBlockRequest.block_id)
}
inline void GossipBlockRequest::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GossipBlockRequest.block_id)
}
inline void GossipBlockRequest::set_block_id(const char* value, size_t size) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GossipBlockRequest.block_id)
}
inline std::string* GossipBlockRequest::mutable_block_id() {
  
  // @@protoc_insertion_point(field_mutable:GossipBlockRequest.block_id)
  return block_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GossipBlockRequest::release_block_id() {
  // @@protoc_insertion_point(field_release:GossipBlockRequest.block_id)
  
  return block_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GossipBlockRequest::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id);
  // @@protoc_insertion_point(field_set_allocated:GossipBlockRequest.block_id)
}

// string nonce = 2;
inline void GossipBlockRequest::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GossipBlockRequest::nonce() const {
  // @@protoc_insertion_point(field_get:GossipBlockRequest.nonce)
  return nonce_.GetNoArena();
}
inline void GossipBlockRequest::set_nonce(const std::string& value) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GossipBlockRequest.nonce)
}
inline void GossipBlockRequest::set_nonce(std::string&& value) {
  
  nonce_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GossipBlockRequest.nonce)
}
inline void GossipBlockRequest::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GossipBlockRequest.nonce)
}
inline void GossipBlockRequest::set_nonce(const char* value, size_t size) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GossipBlockRequest.nonce)
}
inline std::string* GossipBlockRequest::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:GossipBlockRequest.nonce)
  return nonce_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GossipBlockRequest::release_nonce() {
  // @@protoc_insertion_point(field_release:GossipBlockRequest.nonce)
  
  return nonce_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GossipBlockRequest::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:GossipBlockRequest.nonce)
}

// uint32 time_to_live = 3;
inline void GossipBlockRequest::clear_time_to_live() {
  time_to_live_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GossipBlockRequest::time_to_live() const {
  // @@protoc_insertion_point(field_get:GossipBlockRequest.time_to_live)
  return time_to_live_;
}
inline void GossipBlockRequest::set_time_to_live(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_to_live_ = value;
  // @@protoc_insertion_point(field_set:GossipBlockRequest.time_to_live)
}

// -------------------------------------------------------------------

// GossipBlockResponse

// bytes content = 1;
inline void GossipBlockResponse::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GossipBlockResponse::content() const {
  // @@protoc_insertion_point(field_get:GossipBlockResponse.content)
  return content_.GetNoArena();
}
inline void GossipBlockResponse::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GossipBlockResponse.content)
}
inline void GossipBlockResponse::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GossipBlockResponse.content)
}
inline void GossipBlockResponse::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GossipBlockResponse.content)
}
inline void GossipBlockResponse::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GossipBlockResponse.content)
}
inline std::string* GossipBlockResponse::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:GossipBlockResponse.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GossipBlockResponse::release_content() {
  // @@protoc_insertion_point(field_release:GossipBlockResponse.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GossipBlockResponse::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:GossipBlockResponse.content)
}

// -------------------------------------------------------------------

// GossipBatchResponse

// bytes content = 1;
inline void GossipBatchResponse::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GossipBatchResponse::content() const {
  // @@protoc_insertion_point(field_get:GossipBatchResponse.content)
  return content_.GetNoArena();
}
inline void GossipBatchResponse::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GossipBatchResponse.content)
}
inline void GossipBatchResponse::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GossipBatchResponse.content)
}
inline void GossipBatchResponse::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GossipBatchResponse.content)
}
inline void GossipBatchResponse::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GossipBatchResponse.content)
}
inline std::string* GossipBatchResponse::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:GossipBatchResponse.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GossipBatchResponse::release_content() {
  // @@protoc_insertion_point(field_release:GossipBatchResponse.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GossipBatchResponse::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:GossipBatchResponse.content)
}

// -------------------------------------------------------------------

// GossipBatchByBatchIdRequest

// string id = 1;
inline void GossipBatchByBatchIdRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GossipBatchByBatchIdRequest::id() const {
  // @@protoc_insertion_point(field_get:GossipBatchByBatchIdRequest.id)
  return id_.GetNoArena();
}
inline void GossipBatchByBatchIdRequest::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GossipBatchByBatchIdRequest.id)
}
inline void GossipBatchByBatchIdRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GossipBatchByBatchIdRequest.id)
}
inline void GossipBatchByBatchIdRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GossipBatchByBatchIdRequest.id)
}
inline void GossipBatchByBatchIdRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GossipBatchByBatchIdRequest.id)
}
inline std::string* GossipBatchByBatchIdRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:GossipBatchByBatchIdRequest.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GossipBatchByBatchIdRequest::release_id() {
  // @@protoc_insertion_point(field_release:GossipBatchByBatchIdRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GossipBatchByBatchIdRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:GossipBatchByBatchIdRequest.id)
}

// string nonce = 2;
inline void GossipBatchByBatchIdRequest::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GossipBatchByBatchIdRequest::nonce() const {
  // @@protoc_insertion_point(field_get:GossipBatchByBatchIdRequest.nonce)
  return nonce_.GetNoArena();
}
inline void GossipBatchByBatchIdRequest::set_nonce(const std::string& value) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GossipBatchByBatchIdRequest.nonce)
}
inline void GossipBatchByBatchIdRequest::set_nonce(std::string&& value) {
  
  nonce_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GossipBatchByBatchIdRequest.nonce)
}
inline void GossipBatchByBatchIdRequest::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GossipBatchByBatchIdRequest.nonce)
}
inline void GossipBatchByBatchIdRequest::set_nonce(const char* value, size_t size) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GossipBatchByBatchIdRequest.nonce)
}
inline std::string* GossipBatchByBatchIdRequest::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:GossipBatchByBatchIdRequest.nonce)
  return nonce_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GossipBatchByBatchIdRequest::release_nonce() {
  // @@protoc_insertion_point(field_release:GossipBatchByBatchIdRequest.nonce)
  
  return nonce_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GossipBatchByBatchIdRequest::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:GossipBatchByBatchIdRequest.nonce)
}

// uint32 time_to_live = 3;
inline void GossipBatchByBatchIdRequest::clear_time_to_live() {
  time_to_live_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GossipBatchByBatchIdRequest::time_to_live() const {
  // @@protoc_insertion_point(field_get:GossipBatchByBatchIdRequest.time_to_live)
  return time_to_live_;
}
inline void GossipBatchByBatchIdRequest::set_time_to_live(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_to_live_ = value;
  // @@protoc_insertion_point(field_set:GossipBatchByBatchIdRequest.time_to_live)
}

// -------------------------------------------------------------------

// GossipBatchByTransactionIdRequest

// repeated string ids = 1;
inline int GossipBatchByTransactionIdRequest::ids_size() const {
  return ids_.size();
}
inline void GossipBatchByTransactionIdRequest::clear_ids() {
  ids_.Clear();
}
inline const std::string& GossipBatchByTransactionIdRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:GossipBatchByTransactionIdRequest.ids)
  return ids_.Get(index);
}
inline std::string* GossipBatchByTransactionIdRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:GossipBatchByTransactionIdRequest.ids)
  return ids_.Mutable(index);
}
inline void GossipBatchByTransactionIdRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:GossipBatchByTransactionIdRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void GossipBatchByTransactionIdRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:GossipBatchByTransactionIdRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void GossipBatchByTransactionIdRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GossipBatchByTransactionIdRequest.ids)
}
inline void GossipBatchByTransactionIdRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GossipBatchByTransactionIdRequest.ids)
}
inline std::string* GossipBatchByTransactionIdRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:GossipBatchByTransactionIdRequest.ids)
  return ids_.Add();
}
inline void GossipBatchByTransactionIdRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GossipBatchByTransactionIdRequest.ids)
}
inline void GossipBatchByTransactionIdRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GossipBatchByTransactionIdRequest.ids)
}
inline void GossipBatchByTransactionIdRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GossipBatchByTransactionIdRequest.ids)
}
inline void GossipBatchByTransactionIdRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GossipBatchByTransactionIdRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GossipBatchByTransactionIdRequest::ids() const {
  // @@protoc_insertion_point(field_list:GossipBatchByTransactionIdRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GossipBatchByTransactionIdRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:GossipBatchByTransactionIdRequest.ids)
  return &ids_;
}

// string nonce = 2;
inline void GossipBatchByTransactionIdRequest::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GossipBatchByTransactionIdRequest::nonce() const {
  // @@protoc_insertion_point(field_get:GossipBatchByTransactionIdRequest.nonce)
  return nonce_.GetNoArena();
}
inline void GossipBatchByTransactionIdRequest::set_nonce(const std::string& value) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GossipBatchByTransactionIdRequest.nonce)
}
inline void GossipBatchByTransactionIdRequest::set_nonce(std::string&& value) {
  
  nonce_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GossipBatchByTransactionIdRequest.nonce)
}
inline void GossipBatchByTransactionIdRequest::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GossipBatchByTransactionIdRequest.nonce)
}
inline void GossipBatchByTransactionIdRequest::set_nonce(const char* value, size_t size) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GossipBatchByTransactionIdRequest.nonce)
}
inline std::string* GossipBatchByTransactionIdRequest::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:GossipBatchByTransactionIdRequest.nonce)
  return nonce_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GossipBatchByTransactionIdRequest::release_nonce() {
  // @@protoc_insertion_point(field_release:GossipBatchByTransactionIdRequest.nonce)
  
  return nonce_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GossipBatchByTransactionIdRequest::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:GossipBatchByTransactionIdRequest.nonce)
}

// uint32 time_to_live = 3;
inline void GossipBatchByTransactionIdRequest::clear_time_to_live() {
  time_to_live_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GossipBatchByTransactionIdRequest::time_to_live() const {
  // @@protoc_insertion_point(field_get:GossipBatchByTransactionIdRequest.time_to_live)
  return time_to_live_;
}
inline void GossipBatchByTransactionIdRequest::set_time_to_live(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_to_live_ = value;
  // @@protoc_insertion_point(field_set:GossipBatchByTransactionIdRequest.time_to_live)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GossipMessage_ContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GossipMessage_ContentType>() {
  return ::GossipMessage_ContentType_descriptor();
}
template <> struct is_proto_enum< ::NetworkAcknowledgement_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetworkAcknowledgement_Status>() {
  return ::NetworkAcknowledgement_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_2eproto
