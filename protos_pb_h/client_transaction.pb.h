// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5ftransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5ftransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "transaction.pb.h"
#include "client_list_control.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5ftransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5ftransaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5ftransaction_2eproto;
class ClientTransactionGetRequest;
class ClientTransactionGetRequestDefaultTypeInternal;
extern ClientTransactionGetRequestDefaultTypeInternal _ClientTransactionGetRequest_default_instance_;
class ClientTransactionGetResponse;
class ClientTransactionGetResponseDefaultTypeInternal;
extern ClientTransactionGetResponseDefaultTypeInternal _ClientTransactionGetResponse_default_instance_;
class ClientTransactionListRequest;
class ClientTransactionListRequestDefaultTypeInternal;
extern ClientTransactionListRequestDefaultTypeInternal _ClientTransactionListRequest_default_instance_;
class ClientTransactionListResponse;
class ClientTransactionListResponseDefaultTypeInternal;
extern ClientTransactionListResponseDefaultTypeInternal _ClientTransactionListResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientTransactionGetRequest* Arena::CreateMaybeMessage<::ClientTransactionGetRequest>(Arena*);
template<> ::ClientTransactionGetResponse* Arena::CreateMaybeMessage<::ClientTransactionGetResponse>(Arena*);
template<> ::ClientTransactionListRequest* Arena::CreateMaybeMessage<::ClientTransactionListRequest>(Arena*);
template<> ::ClientTransactionListResponse* Arena::CreateMaybeMessage<::ClientTransactionListResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ClientTransactionListResponse_Status : int {
  ClientTransactionListResponse_Status_STATUS_UNSET = 0,
  ClientTransactionListResponse_Status_OK = 1,
  ClientTransactionListResponse_Status_INTERNAL_ERROR = 2,
  ClientTransactionListResponse_Status_NOT_READY = 3,
  ClientTransactionListResponse_Status_NO_ROOT = 4,
  ClientTransactionListResponse_Status_NO_RESOURCE = 5,
  ClientTransactionListResponse_Status_INVALID_PAGING = 6,
  ClientTransactionListResponse_Status_INVALID_SORT = 7,
  ClientTransactionListResponse_Status_INVALID_ID = 8,
  ClientTransactionListResponse_Status_ClientTransactionListResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientTransactionListResponse_Status_ClientTransactionListResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientTransactionListResponse_Status_IsValid(int value);
constexpr ClientTransactionListResponse_Status ClientTransactionListResponse_Status_Status_MIN = ClientTransactionListResponse_Status_STATUS_UNSET;
constexpr ClientTransactionListResponse_Status ClientTransactionListResponse_Status_Status_MAX = ClientTransactionListResponse_Status_INVALID_ID;
constexpr int ClientTransactionListResponse_Status_Status_ARRAYSIZE = ClientTransactionListResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientTransactionListResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientTransactionListResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientTransactionListResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientTransactionListResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientTransactionListResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientTransactionListResponse_Status_Parse(
    const std::string& name, ClientTransactionListResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientTransactionListResponse_Status>(
    ClientTransactionListResponse_Status_descriptor(), name, value);
}
enum ClientTransactionGetResponse_Status : int {
  ClientTransactionGetResponse_Status_STATUS_UNSET = 0,
  ClientTransactionGetResponse_Status_OK = 1,
  ClientTransactionGetResponse_Status_INTERNAL_ERROR = 2,
  ClientTransactionGetResponse_Status_NO_RESOURCE = 5,
  ClientTransactionGetResponse_Status_INVALID_ID = 8,
  ClientTransactionGetResponse_Status_ClientTransactionGetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientTransactionGetResponse_Status_ClientTransactionGetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientTransactionGetResponse_Status_IsValid(int value);
constexpr ClientTransactionGetResponse_Status ClientTransactionGetResponse_Status_Status_MIN = ClientTransactionGetResponse_Status_STATUS_UNSET;
constexpr ClientTransactionGetResponse_Status ClientTransactionGetResponse_Status_Status_MAX = ClientTransactionGetResponse_Status_INVALID_ID;
constexpr int ClientTransactionGetResponse_Status_Status_ARRAYSIZE = ClientTransactionGetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientTransactionGetResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientTransactionGetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientTransactionGetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientTransactionGetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientTransactionGetResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientTransactionGetResponse_Status_Parse(
    const std::string& name, ClientTransactionGetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientTransactionGetResponse_Status>(
    ClientTransactionGetResponse_Status_descriptor(), name, value);
}
// ===================================================================

class ClientTransactionListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientTransactionListRequest) */ {
 public:
  ClientTransactionListRequest();
  virtual ~ClientTransactionListRequest();

  ClientTransactionListRequest(const ClientTransactionListRequest& from);
  ClientTransactionListRequest(ClientTransactionListRequest&& from) noexcept
    : ClientTransactionListRequest() {
    *this = ::std::move(from);
  }

  inline ClientTransactionListRequest& operator=(const ClientTransactionListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientTransactionListRequest& operator=(ClientTransactionListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientTransactionListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientTransactionListRequest* internal_default_instance() {
    return reinterpret_cast<const ClientTransactionListRequest*>(
               &_ClientTransactionListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientTransactionListRequest* other);
  friend void swap(ClientTransactionListRequest& a, ClientTransactionListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientTransactionListRequest* New() const final {
    return CreateMaybeMessage<ClientTransactionListRequest>(nullptr);
  }

  ClientTransactionListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientTransactionListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientTransactionListRequest& from);
  void MergeFrom(const ClientTransactionListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientTransactionListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientTransactionListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5ftransaction_2eproto);
    return ::descriptor_table_client_5ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string transaction_ids = 2;
  int transaction_ids_size() const;
  void clear_transaction_ids();
  static const int kTransactionIdsFieldNumber = 2;
  const std::string& transaction_ids(int index) const;
  std::string* mutable_transaction_ids(int index);
  void set_transaction_ids(int index, const std::string& value);
  void set_transaction_ids(int index, std::string&& value);
  void set_transaction_ids(int index, const char* value);
  void set_transaction_ids(int index, const char* value, size_t size);
  std::string* add_transaction_ids();
  void add_transaction_ids(const std::string& value);
  void add_transaction_ids(std::string&& value);
  void add_transaction_ids(const char* value);
  void add_transaction_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transaction_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transaction_ids();

  // repeated .ClientSortControls sorting = 4;
  int sorting_size() const;
  void clear_sorting();
  static const int kSortingFieldNumber = 4;
  ::ClientSortControls* mutable_sorting(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >*
      mutable_sorting();
  const ::ClientSortControls& sorting(int index) const;
  ::ClientSortControls* add_sorting();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >&
      sorting() const;

  // string head_id = 1;
  void clear_head_id();
  static const int kHeadIdFieldNumber = 1;
  const std::string& head_id() const;
  void set_head_id(const std::string& value);
  void set_head_id(std::string&& value);
  void set_head_id(const char* value);
  void set_head_id(const char* value, size_t size);
  std::string* mutable_head_id();
  std::string* release_head_id();
  void set_allocated_head_id(std::string* head_id);

  // .ClientPagingControls paging = 3;
  bool has_paging() const;
  void clear_paging();
  static const int kPagingFieldNumber = 3;
  const ::ClientPagingControls& paging() const;
  ::ClientPagingControls* release_paging();
  ::ClientPagingControls* mutable_paging();
  void set_allocated_paging(::ClientPagingControls* paging);

  // @@protoc_insertion_point(class_scope:ClientTransactionListRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transaction_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls > sorting_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_id_;
  ::ClientPagingControls* paging_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class ClientTransactionListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientTransactionListResponse) */ {
 public:
  ClientTransactionListResponse();
  virtual ~ClientTransactionListResponse();

  ClientTransactionListResponse(const ClientTransactionListResponse& from);
  ClientTransactionListResponse(ClientTransactionListResponse&& from) noexcept
    : ClientTransactionListResponse() {
    *this = ::std::move(from);
  }

  inline ClientTransactionListResponse& operator=(const ClientTransactionListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientTransactionListResponse& operator=(ClientTransactionListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientTransactionListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientTransactionListResponse* internal_default_instance() {
    return reinterpret_cast<const ClientTransactionListResponse*>(
               &_ClientTransactionListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientTransactionListResponse* other);
  friend void swap(ClientTransactionListResponse& a, ClientTransactionListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientTransactionListResponse* New() const final {
    return CreateMaybeMessage<ClientTransactionListResponse>(nullptr);
  }

  ClientTransactionListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientTransactionListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientTransactionListResponse& from);
  void MergeFrom(const ClientTransactionListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientTransactionListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientTransactionListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5ftransaction_2eproto);
    return ::descriptor_table_client_5ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientTransactionListResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientTransactionListResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientTransactionListResponse_Status_OK;
  static constexpr Status INTERNAL_ERROR =
    ClientTransactionListResponse_Status_INTERNAL_ERROR;
  static constexpr Status NOT_READY =
    ClientTransactionListResponse_Status_NOT_READY;
  static constexpr Status NO_ROOT =
    ClientTransactionListResponse_Status_NO_ROOT;
  static constexpr Status NO_RESOURCE =
    ClientTransactionListResponse_Status_NO_RESOURCE;
  static constexpr Status INVALID_PAGING =
    ClientTransactionListResponse_Status_INVALID_PAGING;
  static constexpr Status INVALID_SORT =
    ClientTransactionListResponse_Status_INVALID_SORT;
  static constexpr Status INVALID_ID =
    ClientTransactionListResponse_Status_INVALID_ID;
  static inline bool Status_IsValid(int value) {
    return ClientTransactionListResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientTransactionListResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientTransactionListResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientTransactionListResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientTransactionListResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientTransactionListResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientTransactionListResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Transaction transactions = 2;
  int transactions_size() const;
  void clear_transactions();
  static const int kTransactionsFieldNumber = 2;
  ::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Transaction >*
      mutable_transactions();
  const ::Transaction& transactions(int index) const;
  ::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Transaction >&
      transactions() const;

  // string head_id = 3;
  void clear_head_id();
  static const int kHeadIdFieldNumber = 3;
  const std::string& head_id() const;
  void set_head_id(const std::string& value);
  void set_head_id(std::string&& value);
  void set_head_id(const char* value);
  void set_head_id(const char* value, size_t size);
  std::string* mutable_head_id();
  std::string* release_head_id();
  void set_allocated_head_id(std::string* head_id);

  // .ClientPagingResponse paging = 4;
  bool has_paging() const;
  void clear_paging();
  static const int kPagingFieldNumber = 4;
  const ::ClientPagingResponse& paging() const;
  ::ClientPagingResponse* release_paging();
  ::ClientPagingResponse* mutable_paging();
  void set_allocated_paging(::ClientPagingResponse* paging);

  // .ClientTransactionListResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientTransactionListResponse_Status status() const;
  void set_status(::ClientTransactionListResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientTransactionListResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Transaction > transactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_id_;
  ::ClientPagingResponse* paging_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class ClientTransactionGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientTransactionGetRequest) */ {
 public:
  ClientTransactionGetRequest();
  virtual ~ClientTransactionGetRequest();

  ClientTransactionGetRequest(const ClientTransactionGetRequest& from);
  ClientTransactionGetRequest(ClientTransactionGetRequest&& from) noexcept
    : ClientTransactionGetRequest() {
    *this = ::std::move(from);
  }

  inline ClientTransactionGetRequest& operator=(const ClientTransactionGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientTransactionGetRequest& operator=(ClientTransactionGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientTransactionGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientTransactionGetRequest* internal_default_instance() {
    return reinterpret_cast<const ClientTransactionGetRequest*>(
               &_ClientTransactionGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClientTransactionGetRequest* other);
  friend void swap(ClientTransactionGetRequest& a, ClientTransactionGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientTransactionGetRequest* New() const final {
    return CreateMaybeMessage<ClientTransactionGetRequest>(nullptr);
  }

  ClientTransactionGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientTransactionGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientTransactionGetRequest& from);
  void MergeFrom(const ClientTransactionGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientTransactionGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientTransactionGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5ftransaction_2eproto);
    return ::descriptor_table_client_5ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string transaction_id = 1;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 1;
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);

  // @@protoc_insertion_point(class_scope:ClientTransactionGetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class ClientTransactionGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientTransactionGetResponse) */ {
 public:
  ClientTransactionGetResponse();
  virtual ~ClientTransactionGetResponse();

  ClientTransactionGetResponse(const ClientTransactionGetResponse& from);
  ClientTransactionGetResponse(ClientTransactionGetResponse&& from) noexcept
    : ClientTransactionGetResponse() {
    *this = ::std::move(from);
  }

  inline ClientTransactionGetResponse& operator=(const ClientTransactionGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientTransactionGetResponse& operator=(ClientTransactionGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientTransactionGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientTransactionGetResponse* internal_default_instance() {
    return reinterpret_cast<const ClientTransactionGetResponse*>(
               &_ClientTransactionGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ClientTransactionGetResponse* other);
  friend void swap(ClientTransactionGetResponse& a, ClientTransactionGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientTransactionGetResponse* New() const final {
    return CreateMaybeMessage<ClientTransactionGetResponse>(nullptr);
  }

  ClientTransactionGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientTransactionGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientTransactionGetResponse& from);
  void MergeFrom(const ClientTransactionGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientTransactionGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientTransactionGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5ftransaction_2eproto);
    return ::descriptor_table_client_5ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientTransactionGetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientTransactionGetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientTransactionGetResponse_Status_OK;
  static constexpr Status INTERNAL_ERROR =
    ClientTransactionGetResponse_Status_INTERNAL_ERROR;
  static constexpr Status NO_RESOURCE =
    ClientTransactionGetResponse_Status_NO_RESOURCE;
  static constexpr Status INVALID_ID =
    ClientTransactionGetResponse_Status_INVALID_ID;
  static inline bool Status_IsValid(int value) {
    return ClientTransactionGetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientTransactionGetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientTransactionGetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientTransactionGetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientTransactionGetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientTransactionGetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientTransactionGetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Transaction transaction = 2;
  bool has_transaction() const;
  void clear_transaction();
  static const int kTransactionFieldNumber = 2;
  const ::Transaction& transaction() const;
  ::Transaction* release_transaction();
  ::Transaction* mutable_transaction();
  void set_allocated_transaction(::Transaction* transaction);

  // .ClientTransactionGetResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientTransactionGetResponse_Status status() const;
  void set_status(::ClientTransactionGetResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientTransactionGetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Transaction* transaction_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5ftransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientTransactionListRequest

// string head_id = 1;
inline void ClientTransactionListRequest::clear_head_id() {
  head_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientTransactionListRequest::head_id() const {
  // @@protoc_insertion_point(field_get:ClientTransactionListRequest.head_id)
  return head_id_.GetNoArena();
}
inline void ClientTransactionListRequest::set_head_id(const std::string& value) {
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientTransactionListRequest.head_id)
}
inline void ClientTransactionListRequest::set_head_id(std::string&& value) {
  
  head_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientTransactionListRequest.head_id)
}
inline void ClientTransactionListRequest::set_head_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientTransactionListRequest.head_id)
}
inline void ClientTransactionListRequest::set_head_id(const char* value, size_t size) {
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientTransactionListRequest.head_id)
}
inline std::string* ClientTransactionListRequest::mutable_head_id() {
  
  // @@protoc_insertion_point(field_mutable:ClientTransactionListRequest.head_id)
  return head_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientTransactionListRequest::release_head_id() {
  // @@protoc_insertion_point(field_release:ClientTransactionListRequest.head_id)
  
  return head_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientTransactionListRequest::set_allocated_head_id(std::string* head_id) {
  if (head_id != nullptr) {
    
  } else {
    
  }
  head_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head_id);
  // @@protoc_insertion_point(field_set_allocated:ClientTransactionListRequest.head_id)
}

// repeated string transaction_ids = 2;
inline int ClientTransactionListRequest::transaction_ids_size() const {
  return transaction_ids_.size();
}
inline void ClientTransactionListRequest::clear_transaction_ids() {
  transaction_ids_.Clear();
}
inline const std::string& ClientTransactionListRequest::transaction_ids(int index) const {
  // @@protoc_insertion_point(field_get:ClientTransactionListRequest.transaction_ids)
  return transaction_ids_.Get(index);
}
inline std::string* ClientTransactionListRequest::mutable_transaction_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ClientTransactionListRequest.transaction_ids)
  return transaction_ids_.Mutable(index);
}
inline void ClientTransactionListRequest::set_transaction_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientTransactionListRequest.transaction_ids)
  transaction_ids_.Mutable(index)->assign(value);
}
inline void ClientTransactionListRequest::set_transaction_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientTransactionListRequest.transaction_ids)
  transaction_ids_.Mutable(index)->assign(std::move(value));
}
inline void ClientTransactionListRequest::set_transaction_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientTransactionListRequest.transaction_ids)
}
inline void ClientTransactionListRequest::set_transaction_ids(int index, const char* value, size_t size) {
  transaction_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientTransactionListRequest.transaction_ids)
}
inline std::string* ClientTransactionListRequest::add_transaction_ids() {
  // @@protoc_insertion_point(field_add_mutable:ClientTransactionListRequest.transaction_ids)
  return transaction_ids_.Add();
}
inline void ClientTransactionListRequest::add_transaction_ids(const std::string& value) {
  transaction_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientTransactionListRequest.transaction_ids)
}
inline void ClientTransactionListRequest::add_transaction_ids(std::string&& value) {
  transaction_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientTransactionListRequest.transaction_ids)
}
inline void ClientTransactionListRequest::add_transaction_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientTransactionListRequest.transaction_ids)
}
inline void ClientTransactionListRequest::add_transaction_ids(const char* value, size_t size) {
  transaction_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientTransactionListRequest.transaction_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientTransactionListRequest::transaction_ids() const {
  // @@protoc_insertion_point(field_list:ClientTransactionListRequest.transaction_ids)
  return transaction_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientTransactionListRequest::mutable_transaction_ids() {
  // @@protoc_insertion_point(field_mutable_list:ClientTransactionListRequest.transaction_ids)
  return &transaction_ids_;
}

// .ClientPagingControls paging = 3;
inline bool ClientTransactionListRequest::has_paging() const {
  return this != internal_default_instance() && paging_ != nullptr;
}
inline const ::ClientPagingControls& ClientTransactionListRequest::paging() const {
  const ::ClientPagingControls* p = paging_;
  // @@protoc_insertion_point(field_get:ClientTransactionListRequest.paging)
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientPagingControls*>(
      &::_ClientPagingControls_default_instance_);
}
inline ::ClientPagingControls* ClientTransactionListRequest::release_paging() {
  // @@protoc_insertion_point(field_release:ClientTransactionListRequest.paging)
  
  ::ClientPagingControls* temp = paging_;
  paging_ = nullptr;
  return temp;
}
inline ::ClientPagingControls* ClientTransactionListRequest::mutable_paging() {
  
  if (paging_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientPagingControls>(GetArenaNoVirtual());
    paging_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ClientTransactionListRequest.paging)
  return paging_;
}
inline void ClientTransactionListRequest::set_allocated_paging(::ClientPagingControls* paging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(paging_);
  }
  if (paging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      paging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paging, submessage_arena);
    }
    
  } else {
    
  }
  paging_ = paging;
  // @@protoc_insertion_point(field_set_allocated:ClientTransactionListRequest.paging)
}

// repeated .ClientSortControls sorting = 4;
inline int ClientTransactionListRequest::sorting_size() const {
  return sorting_.size();
}
inline ::ClientSortControls* ClientTransactionListRequest::mutable_sorting(int index) {
  // @@protoc_insertion_point(field_mutable:ClientTransactionListRequest.sorting)
  return sorting_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >*
ClientTransactionListRequest::mutable_sorting() {
  // @@protoc_insertion_point(field_mutable_list:ClientTransactionListRequest.sorting)
  return &sorting_;
}
inline const ::ClientSortControls& ClientTransactionListRequest::sorting(int index) const {
  // @@protoc_insertion_point(field_get:ClientTransactionListRequest.sorting)
  return sorting_.Get(index);
}
inline ::ClientSortControls* ClientTransactionListRequest::add_sorting() {
  // @@protoc_insertion_point(field_add:ClientTransactionListRequest.sorting)
  return sorting_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientSortControls >&
ClientTransactionListRequest::sorting() const {
  // @@protoc_insertion_point(field_list:ClientTransactionListRequest.sorting)
  return sorting_;
}

// -------------------------------------------------------------------

// ClientTransactionListResponse

// .ClientTransactionListResponse.Status status = 1;
inline void ClientTransactionListResponse::clear_status() {
  status_ = 0;
}
inline ::ClientTransactionListResponse_Status ClientTransactionListResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientTransactionListResponse.status)
  return static_cast< ::ClientTransactionListResponse_Status >(status_);
}
inline void ClientTransactionListResponse::set_status(::ClientTransactionListResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientTransactionListResponse.status)
}

// repeated .Transaction transactions = 2;
inline int ClientTransactionListResponse::transactions_size() const {
  return transactions_.size();
}
inline ::Transaction* ClientTransactionListResponse::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:ClientTransactionListResponse.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Transaction >*
ClientTransactionListResponse::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:ClientTransactionListResponse.transactions)
  return &transactions_;
}
inline const ::Transaction& ClientTransactionListResponse::transactions(int index) const {
  // @@protoc_insertion_point(field_get:ClientTransactionListResponse.transactions)
  return transactions_.Get(index);
}
inline ::Transaction* ClientTransactionListResponse::add_transactions() {
  // @@protoc_insertion_point(field_add:ClientTransactionListResponse.transactions)
  return transactions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Transaction >&
ClientTransactionListResponse::transactions() const {
  // @@protoc_insertion_point(field_list:ClientTransactionListResponse.transactions)
  return transactions_;
}

// string head_id = 3;
inline void ClientTransactionListResponse::clear_head_id() {
  head_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientTransactionListResponse::head_id() const {
  // @@protoc_insertion_point(field_get:ClientTransactionListResponse.head_id)
  return head_id_.GetNoArena();
}
inline void ClientTransactionListResponse::set_head_id(const std::string& value) {
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientTransactionListResponse.head_id)
}
inline void ClientTransactionListResponse::set_head_id(std::string&& value) {
  
  head_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientTransactionListResponse.head_id)
}
inline void ClientTransactionListResponse::set_head_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientTransactionListResponse.head_id)
}
inline void ClientTransactionListResponse::set_head_id(const char* value, size_t size) {
  
  head_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientTransactionListResponse.head_id)
}
inline std::string* ClientTransactionListResponse::mutable_head_id() {
  
  // @@protoc_insertion_point(field_mutable:ClientTransactionListResponse.head_id)
  return head_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientTransactionListResponse::release_head_id() {
  // @@protoc_insertion_point(field_release:ClientTransactionListResponse.head_id)
  
  return head_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientTransactionListResponse::set_allocated_head_id(std::string* head_id) {
  if (head_id != nullptr) {
    
  } else {
    
  }
  head_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head_id);
  // @@protoc_insertion_point(field_set_allocated:ClientTransactionListResponse.head_id)
}

// .ClientPagingResponse paging = 4;
inline bool ClientTransactionListResponse::has_paging() const {
  return this != internal_default_instance() && paging_ != nullptr;
}
inline const ::ClientPagingResponse& ClientTransactionListResponse::paging() const {
  const ::ClientPagingResponse* p = paging_;
  // @@protoc_insertion_point(field_get:ClientTransactionListResponse.paging)
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientPagingResponse*>(
      &::_ClientPagingResponse_default_instance_);
}
inline ::ClientPagingResponse* ClientTransactionListResponse::release_paging() {
  // @@protoc_insertion_point(field_release:ClientTransactionListResponse.paging)
  
  ::ClientPagingResponse* temp = paging_;
  paging_ = nullptr;
  return temp;
}
inline ::ClientPagingResponse* ClientTransactionListResponse::mutable_paging() {
  
  if (paging_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientPagingResponse>(GetArenaNoVirtual());
    paging_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ClientTransactionListResponse.paging)
  return paging_;
}
inline void ClientTransactionListResponse::set_allocated_paging(::ClientPagingResponse* paging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(paging_);
  }
  if (paging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      paging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paging, submessage_arena);
    }
    
  } else {
    
  }
  paging_ = paging;
  // @@protoc_insertion_point(field_set_allocated:ClientTransactionListResponse.paging)
}

// -------------------------------------------------------------------

// ClientTransactionGetRequest

// string transaction_id = 1;
inline void ClientTransactionGetRequest::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientTransactionGetRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:ClientTransactionGetRequest.transaction_id)
  return transaction_id_.GetNoArena();
}
inline void ClientTransactionGetRequest::set_transaction_id(const std::string& value) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientTransactionGetRequest.transaction_id)
}
inline void ClientTransactionGetRequest::set_transaction_id(std::string&& value) {
  
  transaction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientTransactionGetRequest.transaction_id)
}
inline void ClientTransactionGetRequest::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientTransactionGetRequest.transaction_id)
}
inline void ClientTransactionGetRequest::set_transaction_id(const char* value, size_t size) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientTransactionGetRequest.transaction_id)
}
inline std::string* ClientTransactionGetRequest::mutable_transaction_id() {
  
  // @@protoc_insertion_point(field_mutable:ClientTransactionGetRequest.transaction_id)
  return transaction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientTransactionGetRequest::release_transaction_id() {
  // @@protoc_insertion_point(field_release:ClientTransactionGetRequest.transaction_id)
  
  return transaction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientTransactionGetRequest::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:ClientTransactionGetRequest.transaction_id)
}

// -------------------------------------------------------------------

// ClientTransactionGetResponse

// .ClientTransactionGetResponse.Status status = 1;
inline void ClientTransactionGetResponse::clear_status() {
  status_ = 0;
}
inline ::ClientTransactionGetResponse_Status ClientTransactionGetResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientTransactionGetResponse.status)
  return static_cast< ::ClientTransactionGetResponse_Status >(status_);
}
inline void ClientTransactionGetResponse::set_status(::ClientTransactionGetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientTransactionGetResponse.status)
}

// .Transaction transaction = 2;
inline bool ClientTransactionGetResponse::has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline const ::Transaction& ClientTransactionGetResponse::transaction() const {
  const ::Transaction* p = transaction_;
  // @@protoc_insertion_point(field_get:ClientTransactionGetResponse.transaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::Transaction*>(
      &::_Transaction_default_instance_);
}
inline ::Transaction* ClientTransactionGetResponse::release_transaction() {
  // @@protoc_insertion_point(field_release:ClientTransactionGetResponse.transaction)
  
  ::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::Transaction* ClientTransactionGetResponse::mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Transaction>(GetArenaNoVirtual());
    transaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ClientTransactionGetResponse.transaction)
  return transaction_;
}
inline void ClientTransactionGetResponse::set_allocated_transaction(::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:ClientTransactionGetResponse.transaction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClientTransactionListResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientTransactionListResponse_Status>() {
  return ::ClientTransactionListResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ClientTransactionGetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientTransactionGetResponse_Status>() {
  return ::ClientTransactionGetResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5ftransaction_2eproto
