// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction_receipt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transaction_5freceipt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transaction_5freceipt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "events.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transaction_5freceipt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transaction_5freceipt_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transaction_5freceipt_2eproto;
class StateChange;
class StateChangeDefaultTypeInternal;
extern StateChangeDefaultTypeInternal _StateChange_default_instance_;
class StateChangeList;
class StateChangeListDefaultTypeInternal;
extern StateChangeListDefaultTypeInternal _StateChangeList_default_instance_;
class TransactionReceipt;
class TransactionReceiptDefaultTypeInternal;
extern TransactionReceiptDefaultTypeInternal _TransactionReceipt_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::StateChange* Arena::CreateMaybeMessage<::StateChange>(Arena*);
template<> ::StateChangeList* Arena::CreateMaybeMessage<::StateChangeList>(Arena*);
template<> ::TransactionReceipt* Arena::CreateMaybeMessage<::TransactionReceipt>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum StateChange_Type : int {
  StateChange_Type_TYPE_UNSET = 0,
  StateChange_Type_SET = 1,
  StateChange_Type_DELETE = 2,
  StateChange_Type_StateChange_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StateChange_Type_StateChange_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StateChange_Type_IsValid(int value);
constexpr StateChange_Type StateChange_Type_Type_MIN = StateChange_Type_TYPE_UNSET;
constexpr StateChange_Type StateChange_Type_Type_MAX = StateChange_Type_DELETE;
constexpr int StateChange_Type_Type_ARRAYSIZE = StateChange_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateChange_Type_descriptor();
template<typename T>
inline const std::string& StateChange_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateChange_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateChange_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateChange_Type_descriptor(), enum_t_value);
}
inline bool StateChange_Type_Parse(
    const std::string& name, StateChange_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateChange_Type>(
    StateChange_Type_descriptor(), name, value);
}
// ===================================================================

class TransactionReceipt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransactionReceipt) */ {
 public:
  TransactionReceipt();
  virtual ~TransactionReceipt();

  TransactionReceipt(const TransactionReceipt& from);
  TransactionReceipt(TransactionReceipt&& from) noexcept
    : TransactionReceipt() {
    *this = ::std::move(from);
  }

  inline TransactionReceipt& operator=(const TransactionReceipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionReceipt& operator=(TransactionReceipt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionReceipt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionReceipt* internal_default_instance() {
    return reinterpret_cast<const TransactionReceipt*>(
               &_TransactionReceipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TransactionReceipt* other);
  friend void swap(TransactionReceipt& a, TransactionReceipt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionReceipt* New() const final {
    return CreateMaybeMessage<TransactionReceipt>(nullptr);
  }

  TransactionReceipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionReceipt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionReceipt& from);
  void MergeFrom(const TransactionReceipt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionReceipt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransactionReceipt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transaction_5freceipt_2eproto);
    return ::descriptor_table_transaction_5freceipt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .StateChange state_changes = 1;
  int state_changes_size() const;
  void clear_state_changes();
  static const int kStateChangesFieldNumber = 1;
  ::StateChange* mutable_state_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StateChange >*
      mutable_state_changes();
  const ::StateChange& state_changes(int index) const;
  ::StateChange* add_state_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StateChange >&
      state_changes() const;

  // repeated .Event events = 2;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 2;
  ::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >*
      mutable_events();
  const ::Event& events(int index) const;
  ::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >&
      events() const;

  // repeated bytes data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();

  // string transaction_id = 4;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 4;
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);

  // @@protoc_insertion_point(class_scope:TransactionReceipt)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StateChange > state_changes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event > events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_5freceipt_2eproto;
};
// -------------------------------------------------------------------

class StateChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StateChange) */ {
 public:
  StateChange();
  virtual ~StateChange();

  StateChange(const StateChange& from);
  StateChange(StateChange&& from) noexcept
    : StateChange() {
    *this = ::std::move(from);
  }

  inline StateChange& operator=(const StateChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateChange& operator=(StateChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateChange* internal_default_instance() {
    return reinterpret_cast<const StateChange*>(
               &_StateChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StateChange* other);
  friend void swap(StateChange& a, StateChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateChange* New() const final {
    return CreateMaybeMessage<StateChange>(nullptr);
  }

  StateChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateChange& from);
  void MergeFrom(const StateChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StateChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transaction_5freceipt_2eproto);
    return ::descriptor_table_transaction_5freceipt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StateChange_Type Type;
  static constexpr Type TYPE_UNSET =
    StateChange_Type_TYPE_UNSET;
  static constexpr Type SET =
    StateChange_Type_SET;
  static constexpr Type DELETE =
    StateChange_Type_DELETE;
  static inline bool Type_IsValid(int value) {
    return StateChange_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    StateChange_Type_Type_MIN;
  static constexpr Type Type_MAX =
    StateChange_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    StateChange_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return StateChange_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return StateChange_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return StateChange_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // .StateChange.Type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::StateChange_Type type() const;
  void set_type(::StateChange_Type value);

  // @@protoc_insertion_point(class_scope:StateChange)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_5freceipt_2eproto;
};
// -------------------------------------------------------------------

class StateChangeList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StateChangeList) */ {
 public:
  StateChangeList();
  virtual ~StateChangeList();

  StateChangeList(const StateChangeList& from);
  StateChangeList(StateChangeList&& from) noexcept
    : StateChangeList() {
    *this = ::std::move(from);
  }

  inline StateChangeList& operator=(const StateChangeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateChangeList& operator=(StateChangeList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateChangeList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateChangeList* internal_default_instance() {
    return reinterpret_cast<const StateChangeList*>(
               &_StateChangeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StateChangeList* other);
  friend void swap(StateChangeList& a, StateChangeList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateChangeList* New() const final {
    return CreateMaybeMessage<StateChangeList>(nullptr);
  }

  StateChangeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateChangeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateChangeList& from);
  void MergeFrom(const StateChangeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateChangeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StateChangeList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transaction_5freceipt_2eproto);
    return ::descriptor_table_transaction_5freceipt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .StateChange state_changes = 1;
  int state_changes_size() const;
  void clear_state_changes();
  static const int kStateChangesFieldNumber = 1;
  ::StateChange* mutable_state_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StateChange >*
      mutable_state_changes();
  const ::StateChange& state_changes(int index) const;
  ::StateChange* add_state_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StateChange >&
      state_changes() const;

  // @@protoc_insertion_point(class_scope:StateChangeList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StateChange > state_changes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_5freceipt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionReceipt

// repeated .StateChange state_changes = 1;
inline int TransactionReceipt::state_changes_size() const {
  return state_changes_.size();
}
inline void TransactionReceipt::clear_state_changes() {
  state_changes_.Clear();
}
inline ::StateChange* TransactionReceipt::mutable_state_changes(int index) {
  // @@protoc_insertion_point(field_mutable:TransactionReceipt.state_changes)
  return state_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StateChange >*
TransactionReceipt::mutable_state_changes() {
  // @@protoc_insertion_point(field_mutable_list:TransactionReceipt.state_changes)
  return &state_changes_;
}
inline const ::StateChange& TransactionReceipt::state_changes(int index) const {
  // @@protoc_insertion_point(field_get:TransactionReceipt.state_changes)
  return state_changes_.Get(index);
}
inline ::StateChange* TransactionReceipt::add_state_changes() {
  // @@protoc_insertion_point(field_add:TransactionReceipt.state_changes)
  return state_changes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StateChange >&
TransactionReceipt::state_changes() const {
  // @@protoc_insertion_point(field_list:TransactionReceipt.state_changes)
  return state_changes_;
}

// repeated .Event events = 2;
inline int TransactionReceipt::events_size() const {
  return events_.size();
}
inline ::Event* TransactionReceipt::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:TransactionReceipt.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >*
TransactionReceipt::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:TransactionReceipt.events)
  return &events_;
}
inline const ::Event& TransactionReceipt::events(int index) const {
  // @@protoc_insertion_point(field_get:TransactionReceipt.events)
  return events_.Get(index);
}
inline ::Event* TransactionReceipt::add_events() {
  // @@protoc_insertion_point(field_add:TransactionReceipt.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >&
TransactionReceipt::events() const {
  // @@protoc_insertion_point(field_list:TransactionReceipt.events)
  return events_;
}

// repeated bytes data = 3;
inline int TransactionReceipt::data_size() const {
  return data_.size();
}
inline void TransactionReceipt::clear_data() {
  data_.Clear();
}
inline const std::string& TransactionReceipt::data(int index) const {
  // @@protoc_insertion_point(field_get:TransactionReceipt.data)
  return data_.Get(index);
}
inline std::string* TransactionReceipt::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:TransactionReceipt.data)
  return data_.Mutable(index);
}
inline void TransactionReceipt::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TransactionReceipt.data)
  data_.Mutable(index)->assign(value);
}
inline void TransactionReceipt::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TransactionReceipt.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void TransactionReceipt::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TransactionReceipt.data)
}
inline void TransactionReceipt::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TransactionReceipt.data)
}
inline std::string* TransactionReceipt::add_data() {
  // @@protoc_insertion_point(field_add_mutable:TransactionReceipt.data)
  return data_.Add();
}
inline void TransactionReceipt::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TransactionReceipt.data)
}
inline void TransactionReceipt::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TransactionReceipt.data)
}
inline void TransactionReceipt::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TransactionReceipt.data)
}
inline void TransactionReceipt::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TransactionReceipt.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransactionReceipt::data() const {
  // @@protoc_insertion_point(field_list:TransactionReceipt.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransactionReceipt::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:TransactionReceipt.data)
  return &data_;
}

// string transaction_id = 4;
inline void TransactionReceipt::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionReceipt::transaction_id() const {
  // @@protoc_insertion_point(field_get:TransactionReceipt.transaction_id)
  return transaction_id_.GetNoArena();
}
inline void TransactionReceipt::set_transaction_id(const std::string& value) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransactionReceipt.transaction_id)
}
inline void TransactionReceipt::set_transaction_id(std::string&& value) {
  
  transaction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransactionReceipt.transaction_id)
}
inline void TransactionReceipt::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransactionReceipt.transaction_id)
}
inline void TransactionReceipt::set_transaction_id(const char* value, size_t size) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransactionReceipt.transaction_id)
}
inline std::string* TransactionReceipt::mutable_transaction_id() {
  
  // @@protoc_insertion_point(field_mutable:TransactionReceipt.transaction_id)
  return transaction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionReceipt::release_transaction_id() {
  // @@protoc_insertion_point(field_release:TransactionReceipt.transaction_id)
  
  return transaction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionReceipt::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:TransactionReceipt.transaction_id)
}

// -------------------------------------------------------------------

// StateChange

// string address = 1;
inline void StateChange::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StateChange::address() const {
  // @@protoc_insertion_point(field_get:StateChange.address)
  return address_.GetNoArena();
}
inline void StateChange::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StateChange.address)
}
inline void StateChange::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StateChange.address)
}
inline void StateChange::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StateChange.address)
}
inline void StateChange::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StateChange.address)
}
inline std::string* StateChange::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:StateChange.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StateChange::release_address() {
  // @@protoc_insertion_point(field_release:StateChange.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StateChange::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:StateChange.address)
}

// bytes value = 2;
inline void StateChange::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StateChange::value() const {
  // @@protoc_insertion_point(field_get:StateChange.value)
  return value_.GetNoArena();
}
inline void StateChange::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StateChange.value)
}
inline void StateChange::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StateChange.value)
}
inline void StateChange::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StateChange.value)
}
inline void StateChange::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StateChange.value)
}
inline std::string* StateChange::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:StateChange.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StateChange::release_value() {
  // @@protoc_insertion_point(field_release:StateChange.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StateChange::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:StateChange.value)
}

// .StateChange.Type type = 3;
inline void StateChange::clear_type() {
  type_ = 0;
}
inline ::StateChange_Type StateChange::type() const {
  // @@protoc_insertion_point(field_get:StateChange.type)
  return static_cast< ::StateChange_Type >(type_);
}
inline void StateChange::set_type(::StateChange_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:StateChange.type)
}

// -------------------------------------------------------------------

// StateChangeList

// repeated .StateChange state_changes = 1;
inline int StateChangeList::state_changes_size() const {
  return state_changes_.size();
}
inline void StateChangeList::clear_state_changes() {
  state_changes_.Clear();
}
inline ::StateChange* StateChangeList::mutable_state_changes(int index) {
  // @@protoc_insertion_point(field_mutable:StateChangeList.state_changes)
  return state_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StateChange >*
StateChangeList::mutable_state_changes() {
  // @@protoc_insertion_point(field_mutable_list:StateChangeList.state_changes)
  return &state_changes_;
}
inline const ::StateChange& StateChangeList::state_changes(int index) const {
  // @@protoc_insertion_point(field_get:StateChangeList.state_changes)
  return state_changes_.Get(index);
}
inline ::StateChange* StateChangeList::add_state_changes() {
  // @@protoc_insertion_point(field_add:StateChangeList.state_changes)
  return state_changes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StateChange >&
StateChangeList::state_changes() const {
  // @@protoc_insertion_point(field_list:StateChangeList.state_changes)
  return state_changes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::StateChange_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StateChange_Type>() {
  return ::StateChange_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transaction_5freceipt_2eproto
