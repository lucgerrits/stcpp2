// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: merkle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_merkle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_merkle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_merkle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_merkle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_merkle_2eproto;
class ChangeLogEntry;
class ChangeLogEntryDefaultTypeInternal;
extern ChangeLogEntryDefaultTypeInternal _ChangeLogEntry_default_instance_;
class ChangeLogEntry_Successor;
class ChangeLogEntry_SuccessorDefaultTypeInternal;
extern ChangeLogEntry_SuccessorDefaultTypeInternal _ChangeLogEntry_Successor_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChangeLogEntry* Arena::CreateMaybeMessage<::ChangeLogEntry>(Arena*);
template<> ::ChangeLogEntry_Successor* Arena::CreateMaybeMessage<::ChangeLogEntry_Successor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ChangeLogEntry_Successor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChangeLogEntry.Successor) */ {
 public:
  ChangeLogEntry_Successor();
  virtual ~ChangeLogEntry_Successor();

  ChangeLogEntry_Successor(const ChangeLogEntry_Successor& from);
  ChangeLogEntry_Successor(ChangeLogEntry_Successor&& from) noexcept
    : ChangeLogEntry_Successor() {
    *this = ::std::move(from);
  }

  inline ChangeLogEntry_Successor& operator=(const ChangeLogEntry_Successor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeLogEntry_Successor& operator=(ChangeLogEntry_Successor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeLogEntry_Successor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeLogEntry_Successor* internal_default_instance() {
    return reinterpret_cast<const ChangeLogEntry_Successor*>(
               &_ChangeLogEntry_Successor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ChangeLogEntry_Successor* other);
  friend void swap(ChangeLogEntry_Successor& a, ChangeLogEntry_Successor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeLogEntry_Successor* New() const final {
    return CreateMaybeMessage<ChangeLogEntry_Successor>(nullptr);
  }

  ChangeLogEntry_Successor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeLogEntry_Successor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeLogEntry_Successor& from);
  void MergeFrom(const ChangeLogEntry_Successor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeLogEntry_Successor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChangeLogEntry.Successor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_merkle_2eproto);
    return ::descriptor_table_merkle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes deletions = 2;
  int deletions_size() const;
  void clear_deletions();
  static const int kDeletionsFieldNumber = 2;
  const std::string& deletions(int index) const;
  std::string* mutable_deletions(int index);
  void set_deletions(int index, const std::string& value);
  void set_deletions(int index, std::string&& value);
  void set_deletions(int index, const char* value);
  void set_deletions(int index, const void* value, size_t size);
  std::string* add_deletions();
  void add_deletions(const std::string& value);
  void add_deletions(std::string&& value);
  void add_deletions(const char* value);
  void add_deletions(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deletions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deletions();

  // bytes successor = 1;
  void clear_successor();
  static const int kSuccessorFieldNumber = 1;
  const std::string& successor() const;
  void set_successor(const std::string& value);
  void set_successor(std::string&& value);
  void set_successor(const char* value);
  void set_successor(const void* value, size_t size);
  std::string* mutable_successor();
  std::string* release_successor();
  void set_allocated_successor(std::string* successor);

  // @@protoc_insertion_point(class_scope:ChangeLogEntry.Successor)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deletions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr successor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_merkle_2eproto;
};
// -------------------------------------------------------------------

class ChangeLogEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChangeLogEntry) */ {
 public:
  ChangeLogEntry();
  virtual ~ChangeLogEntry();

  ChangeLogEntry(const ChangeLogEntry& from);
  ChangeLogEntry(ChangeLogEntry&& from) noexcept
    : ChangeLogEntry() {
    *this = ::std::move(from);
  }

  inline ChangeLogEntry& operator=(const ChangeLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeLogEntry& operator=(ChangeLogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeLogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeLogEntry* internal_default_instance() {
    return reinterpret_cast<const ChangeLogEntry*>(
               &_ChangeLogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ChangeLogEntry* other);
  friend void swap(ChangeLogEntry& a, ChangeLogEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeLogEntry* New() const final {
    return CreateMaybeMessage<ChangeLogEntry>(nullptr);
  }

  ChangeLogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeLogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeLogEntry& from);
  void MergeFrom(const ChangeLogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeLogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChangeLogEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_merkle_2eproto);
    return ::descriptor_table_merkle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChangeLogEntry_Successor Successor;

  // accessors -------------------------------------------------------

  // repeated bytes additions = 2;
  int additions_size() const;
  void clear_additions();
  static const int kAdditionsFieldNumber = 2;
  const std::string& additions(int index) const;
  std::string* mutable_additions(int index);
  void set_additions(int index, const std::string& value);
  void set_additions(int index, std::string&& value);
  void set_additions(int index, const char* value);
  void set_additions(int index, const void* value, size_t size);
  std::string* add_additions();
  void add_additions(const std::string& value);
  void add_additions(std::string&& value);
  void add_additions(const char* value);
  void add_additions(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& additions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_additions();

  // repeated .ChangeLogEntry.Successor successors = 3;
  int successors_size() const;
  void clear_successors();
  static const int kSuccessorsFieldNumber = 3;
  ::ChangeLogEntry_Successor* mutable_successors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChangeLogEntry_Successor >*
      mutable_successors();
  const ::ChangeLogEntry_Successor& successors(int index) const;
  ::ChangeLogEntry_Successor* add_successors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChangeLogEntry_Successor >&
      successors() const;

  // bytes parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const void* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);

  // @@protoc_insertion_point(class_scope:ChangeLogEntry)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> additions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChangeLogEntry_Successor > successors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_merkle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChangeLogEntry_Successor

// bytes successor = 1;
inline void ChangeLogEntry_Successor::clear_successor() {
  successor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChangeLogEntry_Successor::successor() const {
  // @@protoc_insertion_point(field_get:ChangeLogEntry.Successor.successor)
  return successor_.GetNoArena();
}
inline void ChangeLogEntry_Successor::set_successor(const std::string& value) {
  
  successor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChangeLogEntry.Successor.successor)
}
inline void ChangeLogEntry_Successor::set_successor(std::string&& value) {
  
  successor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChangeLogEntry.Successor.successor)
}
inline void ChangeLogEntry_Successor::set_successor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  successor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChangeLogEntry.Successor.successor)
}
inline void ChangeLogEntry_Successor::set_successor(const void* value, size_t size) {
  
  successor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChangeLogEntry.Successor.successor)
}
inline std::string* ChangeLogEntry_Successor::mutable_successor() {
  
  // @@protoc_insertion_point(field_mutable:ChangeLogEntry.Successor.successor)
  return successor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChangeLogEntry_Successor::release_successor() {
  // @@protoc_insertion_point(field_release:ChangeLogEntry.Successor.successor)
  
  return successor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLogEntry_Successor::set_allocated_successor(std::string* successor) {
  if (successor != nullptr) {
    
  } else {
    
  }
  successor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), successor);
  // @@protoc_insertion_point(field_set_allocated:ChangeLogEntry.Successor.successor)
}

// repeated bytes deletions = 2;
inline int ChangeLogEntry_Successor::deletions_size() const {
  return deletions_.size();
}
inline void ChangeLogEntry_Successor::clear_deletions() {
  deletions_.Clear();
}
inline const std::string& ChangeLogEntry_Successor::deletions(int index) const {
  // @@protoc_insertion_point(field_get:ChangeLogEntry.Successor.deletions)
  return deletions_.Get(index);
}
inline std::string* ChangeLogEntry_Successor::mutable_deletions(int index) {
  // @@protoc_insertion_point(field_mutable:ChangeLogEntry.Successor.deletions)
  return deletions_.Mutable(index);
}
inline void ChangeLogEntry_Successor::set_deletions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ChangeLogEntry.Successor.deletions)
  deletions_.Mutable(index)->assign(value);
}
inline void ChangeLogEntry_Successor::set_deletions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ChangeLogEntry.Successor.deletions)
  deletions_.Mutable(index)->assign(std::move(value));
}
inline void ChangeLogEntry_Successor::set_deletions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deletions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ChangeLogEntry.Successor.deletions)
}
inline void ChangeLogEntry_Successor::set_deletions(int index, const void* value, size_t size) {
  deletions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ChangeLogEntry.Successor.deletions)
}
inline std::string* ChangeLogEntry_Successor::add_deletions() {
  // @@protoc_insertion_point(field_add_mutable:ChangeLogEntry.Successor.deletions)
  return deletions_.Add();
}
inline void ChangeLogEntry_Successor::add_deletions(const std::string& value) {
  deletions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ChangeLogEntry.Successor.deletions)
}
inline void ChangeLogEntry_Successor::add_deletions(std::string&& value) {
  deletions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ChangeLogEntry.Successor.deletions)
}
inline void ChangeLogEntry_Successor::add_deletions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deletions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ChangeLogEntry.Successor.deletions)
}
inline void ChangeLogEntry_Successor::add_deletions(const void* value, size_t size) {
  deletions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ChangeLogEntry.Successor.deletions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChangeLogEntry_Successor::deletions() const {
  // @@protoc_insertion_point(field_list:ChangeLogEntry.Successor.deletions)
  return deletions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChangeLogEntry_Successor::mutable_deletions() {
  // @@protoc_insertion_point(field_mutable_list:ChangeLogEntry.Successor.deletions)
  return &deletions_;
}

// -------------------------------------------------------------------

// ChangeLogEntry

// bytes parent = 1;
inline void ChangeLogEntry::clear_parent() {
  parent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChangeLogEntry::parent() const {
  // @@protoc_insertion_point(field_get:ChangeLogEntry.parent)
  return parent_.GetNoArena();
}
inline void ChangeLogEntry::set_parent(const std::string& value) {
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChangeLogEntry.parent)
}
inline void ChangeLogEntry::set_parent(std::string&& value) {
  
  parent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChangeLogEntry.parent)
}
inline void ChangeLogEntry::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChangeLogEntry.parent)
}
inline void ChangeLogEntry::set_parent(const void* value, size_t size) {
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChangeLogEntry.parent)
}
inline std::string* ChangeLogEntry::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:ChangeLogEntry.parent)
  return parent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChangeLogEntry::release_parent() {
  // @@protoc_insertion_point(field_release:ChangeLogEntry.parent)
  
  return parent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLogEntry::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:ChangeLogEntry.parent)
}

// repeated bytes additions = 2;
inline int ChangeLogEntry::additions_size() const {
  return additions_.size();
}
inline void ChangeLogEntry::clear_additions() {
  additions_.Clear();
}
inline const std::string& ChangeLogEntry::additions(int index) const {
  // @@protoc_insertion_point(field_get:ChangeLogEntry.additions)
  return additions_.Get(index);
}
inline std::string* ChangeLogEntry::mutable_additions(int index) {
  // @@protoc_insertion_point(field_mutable:ChangeLogEntry.additions)
  return additions_.Mutable(index);
}
inline void ChangeLogEntry::set_additions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ChangeLogEntry.additions)
  additions_.Mutable(index)->assign(value);
}
inline void ChangeLogEntry::set_additions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ChangeLogEntry.additions)
  additions_.Mutable(index)->assign(std::move(value));
}
inline void ChangeLogEntry::set_additions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ChangeLogEntry.additions)
}
inline void ChangeLogEntry::set_additions(int index, const void* value, size_t size) {
  additions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ChangeLogEntry.additions)
}
inline std::string* ChangeLogEntry::add_additions() {
  // @@protoc_insertion_point(field_add_mutable:ChangeLogEntry.additions)
  return additions_.Add();
}
inline void ChangeLogEntry::add_additions(const std::string& value) {
  additions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ChangeLogEntry.additions)
}
inline void ChangeLogEntry::add_additions(std::string&& value) {
  additions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ChangeLogEntry.additions)
}
inline void ChangeLogEntry::add_additions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ChangeLogEntry.additions)
}
inline void ChangeLogEntry::add_additions(const void* value, size_t size) {
  additions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ChangeLogEntry.additions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChangeLogEntry::additions() const {
  // @@protoc_insertion_point(field_list:ChangeLogEntry.additions)
  return additions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChangeLogEntry::mutable_additions() {
  // @@protoc_insertion_point(field_mutable_list:ChangeLogEntry.additions)
  return &additions_;
}

// repeated .ChangeLogEntry.Successor successors = 3;
inline int ChangeLogEntry::successors_size() const {
  return successors_.size();
}
inline void ChangeLogEntry::clear_successors() {
  successors_.Clear();
}
inline ::ChangeLogEntry_Successor* ChangeLogEntry::mutable_successors(int index) {
  // @@protoc_insertion_point(field_mutable:ChangeLogEntry.successors)
  return successors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChangeLogEntry_Successor >*
ChangeLogEntry::mutable_successors() {
  // @@protoc_insertion_point(field_mutable_list:ChangeLogEntry.successors)
  return &successors_;
}
inline const ::ChangeLogEntry_Successor& ChangeLogEntry::successors(int index) const {
  // @@protoc_insertion_point(field_get:ChangeLogEntry.successors)
  return successors_.Get(index);
}
inline ::ChangeLogEntry_Successor* ChangeLogEntry::add_successors() {
  // @@protoc_insertion_point(field_add:ChangeLogEntry.successors)
  return successors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChangeLogEntry_Successor >&
ChangeLogEntry::successors() const {
  // @@protoc_insertion_point(field_list:ChangeLogEntry.successors)
  return successors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_merkle_2eproto
