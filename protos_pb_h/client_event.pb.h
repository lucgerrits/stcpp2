// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "events.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fevent_2eproto;
class ClientEventsGetRequest;
class ClientEventsGetRequestDefaultTypeInternal;
extern ClientEventsGetRequestDefaultTypeInternal _ClientEventsGetRequest_default_instance_;
class ClientEventsGetResponse;
class ClientEventsGetResponseDefaultTypeInternal;
extern ClientEventsGetResponseDefaultTypeInternal _ClientEventsGetResponse_default_instance_;
class ClientEventsSubscribeRequest;
class ClientEventsSubscribeRequestDefaultTypeInternal;
extern ClientEventsSubscribeRequestDefaultTypeInternal _ClientEventsSubscribeRequest_default_instance_;
class ClientEventsSubscribeResponse;
class ClientEventsSubscribeResponseDefaultTypeInternal;
extern ClientEventsSubscribeResponseDefaultTypeInternal _ClientEventsSubscribeResponse_default_instance_;
class ClientEventsUnsubscribeRequest;
class ClientEventsUnsubscribeRequestDefaultTypeInternal;
extern ClientEventsUnsubscribeRequestDefaultTypeInternal _ClientEventsUnsubscribeRequest_default_instance_;
class ClientEventsUnsubscribeResponse;
class ClientEventsUnsubscribeResponseDefaultTypeInternal;
extern ClientEventsUnsubscribeResponseDefaultTypeInternal _ClientEventsUnsubscribeResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientEventsGetRequest* Arena::CreateMaybeMessage<::ClientEventsGetRequest>(Arena*);
template<> ::ClientEventsGetResponse* Arena::CreateMaybeMessage<::ClientEventsGetResponse>(Arena*);
template<> ::ClientEventsSubscribeRequest* Arena::CreateMaybeMessage<::ClientEventsSubscribeRequest>(Arena*);
template<> ::ClientEventsSubscribeResponse* Arena::CreateMaybeMessage<::ClientEventsSubscribeResponse>(Arena*);
template<> ::ClientEventsUnsubscribeRequest* Arena::CreateMaybeMessage<::ClientEventsUnsubscribeRequest>(Arena*);
template<> ::ClientEventsUnsubscribeResponse* Arena::CreateMaybeMessage<::ClientEventsUnsubscribeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ClientEventsSubscribeResponse_Status : int {
  ClientEventsSubscribeResponse_Status_STATUS_UNSET = 0,
  ClientEventsSubscribeResponse_Status_OK = 1,
  ClientEventsSubscribeResponse_Status_INVALID_FILTER = 2,
  ClientEventsSubscribeResponse_Status_UNKNOWN_BLOCK = 3,
  ClientEventsSubscribeResponse_Status_ClientEventsSubscribeResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientEventsSubscribeResponse_Status_ClientEventsSubscribeResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientEventsSubscribeResponse_Status_IsValid(int value);
constexpr ClientEventsSubscribeResponse_Status ClientEventsSubscribeResponse_Status_Status_MIN = ClientEventsSubscribeResponse_Status_STATUS_UNSET;
constexpr ClientEventsSubscribeResponse_Status ClientEventsSubscribeResponse_Status_Status_MAX = ClientEventsSubscribeResponse_Status_UNKNOWN_BLOCK;
constexpr int ClientEventsSubscribeResponse_Status_Status_ARRAYSIZE = ClientEventsSubscribeResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientEventsSubscribeResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientEventsSubscribeResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientEventsSubscribeResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientEventsSubscribeResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientEventsSubscribeResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientEventsSubscribeResponse_Status_Parse(
    const std::string& name, ClientEventsSubscribeResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientEventsSubscribeResponse_Status>(
    ClientEventsSubscribeResponse_Status_descriptor(), name, value);
}
enum ClientEventsUnsubscribeResponse_Status : int {
  ClientEventsUnsubscribeResponse_Status_STATUS_UNSET = 0,
  ClientEventsUnsubscribeResponse_Status_OK = 1,
  ClientEventsUnsubscribeResponse_Status_INTERNAL_ERROR = 2,
  ClientEventsUnsubscribeResponse_Status_ClientEventsUnsubscribeResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientEventsUnsubscribeResponse_Status_ClientEventsUnsubscribeResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientEventsUnsubscribeResponse_Status_IsValid(int value);
constexpr ClientEventsUnsubscribeResponse_Status ClientEventsUnsubscribeResponse_Status_Status_MIN = ClientEventsUnsubscribeResponse_Status_STATUS_UNSET;
constexpr ClientEventsUnsubscribeResponse_Status ClientEventsUnsubscribeResponse_Status_Status_MAX = ClientEventsUnsubscribeResponse_Status_INTERNAL_ERROR;
constexpr int ClientEventsUnsubscribeResponse_Status_Status_ARRAYSIZE = ClientEventsUnsubscribeResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientEventsUnsubscribeResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientEventsUnsubscribeResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientEventsUnsubscribeResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientEventsUnsubscribeResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientEventsUnsubscribeResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientEventsUnsubscribeResponse_Status_Parse(
    const std::string& name, ClientEventsUnsubscribeResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientEventsUnsubscribeResponse_Status>(
    ClientEventsUnsubscribeResponse_Status_descriptor(), name, value);
}
enum ClientEventsGetResponse_Status : int {
  ClientEventsGetResponse_Status_STATUS_UNSET = 0,
  ClientEventsGetResponse_Status_OK = 1,
  ClientEventsGetResponse_Status_INTERNAL_ERROR = 2,
  ClientEventsGetResponse_Status_INVALID_FILTER = 3,
  ClientEventsGetResponse_Status_UNKNOWN_BLOCK = 4,
  ClientEventsGetResponse_Status_ClientEventsGetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientEventsGetResponse_Status_ClientEventsGetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientEventsGetResponse_Status_IsValid(int value);
constexpr ClientEventsGetResponse_Status ClientEventsGetResponse_Status_Status_MIN = ClientEventsGetResponse_Status_STATUS_UNSET;
constexpr ClientEventsGetResponse_Status ClientEventsGetResponse_Status_Status_MAX = ClientEventsGetResponse_Status_UNKNOWN_BLOCK;
constexpr int ClientEventsGetResponse_Status_Status_ARRAYSIZE = ClientEventsGetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientEventsGetResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientEventsGetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientEventsGetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientEventsGetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientEventsGetResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientEventsGetResponse_Status_Parse(
    const std::string& name, ClientEventsGetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientEventsGetResponse_Status>(
    ClientEventsGetResponse_Status_descriptor(), name, value);
}
// ===================================================================

class ClientEventsSubscribeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientEventsSubscribeRequest) */ {
 public:
  ClientEventsSubscribeRequest();
  virtual ~ClientEventsSubscribeRequest();

  ClientEventsSubscribeRequest(const ClientEventsSubscribeRequest& from);
  ClientEventsSubscribeRequest(ClientEventsSubscribeRequest&& from) noexcept
    : ClientEventsSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline ClientEventsSubscribeRequest& operator=(const ClientEventsSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientEventsSubscribeRequest& operator=(ClientEventsSubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientEventsSubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientEventsSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const ClientEventsSubscribeRequest*>(
               &_ClientEventsSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientEventsSubscribeRequest* other);
  friend void swap(ClientEventsSubscribeRequest& a, ClientEventsSubscribeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientEventsSubscribeRequest* New() const final {
    return CreateMaybeMessage<ClientEventsSubscribeRequest>(nullptr);
  }

  ClientEventsSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientEventsSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientEventsSubscribeRequest& from);
  void MergeFrom(const ClientEventsSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientEventsSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientEventsSubscribeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fevent_2eproto);
    return ::descriptor_table_client_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EventSubscription subscriptions = 1;
  int subscriptions_size() const;
  void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  ::EventSubscription* mutable_subscriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventSubscription >*
      mutable_subscriptions();
  const ::EventSubscription& subscriptions(int index) const;
  ::EventSubscription* add_subscriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventSubscription >&
      subscriptions() const;

  // repeated string last_known_block_ids = 2;
  int last_known_block_ids_size() const;
  void clear_last_known_block_ids();
  static const int kLastKnownBlockIdsFieldNumber = 2;
  const std::string& last_known_block_ids(int index) const;
  std::string* mutable_last_known_block_ids(int index);
  void set_last_known_block_ids(int index, const std::string& value);
  void set_last_known_block_ids(int index, std::string&& value);
  void set_last_known_block_ids(int index, const char* value);
  void set_last_known_block_ids(int index, const char* value, size_t size);
  std::string* add_last_known_block_ids();
  void add_last_known_block_ids(const std::string& value);
  void add_last_known_block_ids(std::string&& value);
  void add_last_known_block_ids(const char* value);
  void add_last_known_block_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& last_known_block_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_last_known_block_ids();

  // @@protoc_insertion_point(class_scope:ClientEventsSubscribeRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventSubscription > subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> last_known_block_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ClientEventsSubscribeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientEventsSubscribeResponse) */ {
 public:
  ClientEventsSubscribeResponse();
  virtual ~ClientEventsSubscribeResponse();

  ClientEventsSubscribeResponse(const ClientEventsSubscribeResponse& from);
  ClientEventsSubscribeResponse(ClientEventsSubscribeResponse&& from) noexcept
    : ClientEventsSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline ClientEventsSubscribeResponse& operator=(const ClientEventsSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientEventsSubscribeResponse& operator=(ClientEventsSubscribeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientEventsSubscribeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientEventsSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const ClientEventsSubscribeResponse*>(
               &_ClientEventsSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientEventsSubscribeResponse* other);
  friend void swap(ClientEventsSubscribeResponse& a, ClientEventsSubscribeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientEventsSubscribeResponse* New() const final {
    return CreateMaybeMessage<ClientEventsSubscribeResponse>(nullptr);
  }

  ClientEventsSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientEventsSubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientEventsSubscribeResponse& from);
  void MergeFrom(const ClientEventsSubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientEventsSubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientEventsSubscribeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fevent_2eproto);
    return ::descriptor_table_client_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientEventsSubscribeResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientEventsSubscribeResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientEventsSubscribeResponse_Status_OK;
  static constexpr Status INVALID_FILTER =
    ClientEventsSubscribeResponse_Status_INVALID_FILTER;
  static constexpr Status UNKNOWN_BLOCK =
    ClientEventsSubscribeResponse_Status_UNKNOWN_BLOCK;
  static inline bool Status_IsValid(int value) {
    return ClientEventsSubscribeResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientEventsSubscribeResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientEventsSubscribeResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientEventsSubscribeResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientEventsSubscribeResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientEventsSubscribeResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientEventsSubscribeResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string response_message = 2;
  void clear_response_message();
  static const int kResponseMessageFieldNumber = 2;
  const std::string& response_message() const;
  void set_response_message(const std::string& value);
  void set_response_message(std::string&& value);
  void set_response_message(const char* value);
  void set_response_message(const char* value, size_t size);
  std::string* mutable_response_message();
  std::string* release_response_message();
  void set_allocated_response_message(std::string* response_message);

  // .ClientEventsSubscribeResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientEventsSubscribeResponse_Status status() const;
  void set_status(::ClientEventsSubscribeResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientEventsSubscribeResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_message_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ClientEventsUnsubscribeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientEventsUnsubscribeRequest) */ {
 public:
  ClientEventsUnsubscribeRequest();
  virtual ~ClientEventsUnsubscribeRequest();

  ClientEventsUnsubscribeRequest(const ClientEventsUnsubscribeRequest& from);
  ClientEventsUnsubscribeRequest(ClientEventsUnsubscribeRequest&& from) noexcept
    : ClientEventsUnsubscribeRequest() {
    *this = ::std::move(from);
  }

  inline ClientEventsUnsubscribeRequest& operator=(const ClientEventsUnsubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientEventsUnsubscribeRequest& operator=(ClientEventsUnsubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientEventsUnsubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientEventsUnsubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const ClientEventsUnsubscribeRequest*>(
               &_ClientEventsUnsubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClientEventsUnsubscribeRequest* other);
  friend void swap(ClientEventsUnsubscribeRequest& a, ClientEventsUnsubscribeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientEventsUnsubscribeRequest* New() const final {
    return CreateMaybeMessage<ClientEventsUnsubscribeRequest>(nullptr);
  }

  ClientEventsUnsubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientEventsUnsubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientEventsUnsubscribeRequest& from);
  void MergeFrom(const ClientEventsUnsubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientEventsUnsubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientEventsUnsubscribeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fevent_2eproto);
    return ::descriptor_table_client_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientEventsUnsubscribeRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ClientEventsUnsubscribeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientEventsUnsubscribeResponse) */ {
 public:
  ClientEventsUnsubscribeResponse();
  virtual ~ClientEventsUnsubscribeResponse();

  ClientEventsUnsubscribeResponse(const ClientEventsUnsubscribeResponse& from);
  ClientEventsUnsubscribeResponse(ClientEventsUnsubscribeResponse&& from) noexcept
    : ClientEventsUnsubscribeResponse() {
    *this = ::std::move(from);
  }

  inline ClientEventsUnsubscribeResponse& operator=(const ClientEventsUnsubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientEventsUnsubscribeResponse& operator=(ClientEventsUnsubscribeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientEventsUnsubscribeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientEventsUnsubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const ClientEventsUnsubscribeResponse*>(
               &_ClientEventsUnsubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ClientEventsUnsubscribeResponse* other);
  friend void swap(ClientEventsUnsubscribeResponse& a, ClientEventsUnsubscribeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientEventsUnsubscribeResponse* New() const final {
    return CreateMaybeMessage<ClientEventsUnsubscribeResponse>(nullptr);
  }

  ClientEventsUnsubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientEventsUnsubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientEventsUnsubscribeResponse& from);
  void MergeFrom(const ClientEventsUnsubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientEventsUnsubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientEventsUnsubscribeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fevent_2eproto);
    return ::descriptor_table_client_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientEventsUnsubscribeResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientEventsUnsubscribeResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientEventsUnsubscribeResponse_Status_OK;
  static constexpr Status INTERNAL_ERROR =
    ClientEventsUnsubscribeResponse_Status_INTERNAL_ERROR;
  static inline bool Status_IsValid(int value) {
    return ClientEventsUnsubscribeResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientEventsUnsubscribeResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientEventsUnsubscribeResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientEventsUnsubscribeResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientEventsUnsubscribeResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientEventsUnsubscribeResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientEventsUnsubscribeResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ClientEventsUnsubscribeResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientEventsUnsubscribeResponse_Status status() const;
  void set_status(::ClientEventsUnsubscribeResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientEventsUnsubscribeResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ClientEventsGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientEventsGetRequest) */ {
 public:
  ClientEventsGetRequest();
  virtual ~ClientEventsGetRequest();

  ClientEventsGetRequest(const ClientEventsGetRequest& from);
  ClientEventsGetRequest(ClientEventsGetRequest&& from) noexcept
    : ClientEventsGetRequest() {
    *this = ::std::move(from);
  }

  inline ClientEventsGetRequest& operator=(const ClientEventsGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientEventsGetRequest& operator=(ClientEventsGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientEventsGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientEventsGetRequest* internal_default_instance() {
    return reinterpret_cast<const ClientEventsGetRequest*>(
               &_ClientEventsGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ClientEventsGetRequest* other);
  friend void swap(ClientEventsGetRequest& a, ClientEventsGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientEventsGetRequest* New() const final {
    return CreateMaybeMessage<ClientEventsGetRequest>(nullptr);
  }

  ClientEventsGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientEventsGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientEventsGetRequest& from);
  void MergeFrom(const ClientEventsGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientEventsGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientEventsGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fevent_2eproto);
    return ::descriptor_table_client_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EventSubscription subscriptions = 1;
  int subscriptions_size() const;
  void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  ::EventSubscription* mutable_subscriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventSubscription >*
      mutable_subscriptions();
  const ::EventSubscription& subscriptions(int index) const;
  ::EventSubscription* add_subscriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventSubscription >&
      subscriptions() const;

  // repeated string block_ids = 2;
  int block_ids_size() const;
  void clear_block_ids();
  static const int kBlockIdsFieldNumber = 2;
  const std::string& block_ids(int index) const;
  std::string* mutable_block_ids(int index);
  void set_block_ids(int index, const std::string& value);
  void set_block_ids(int index, std::string&& value);
  void set_block_ids(int index, const char* value);
  void set_block_ids(int index, const char* value, size_t size);
  std::string* add_block_ids();
  void add_block_ids(const std::string& value);
  void add_block_ids(std::string&& value);
  void add_block_ids(const char* value);
  void add_block_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& block_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_block_ids();

  // @@protoc_insertion_point(class_scope:ClientEventsGetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventSubscription > subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> block_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ClientEventsGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientEventsGetResponse) */ {
 public:
  ClientEventsGetResponse();
  virtual ~ClientEventsGetResponse();

  ClientEventsGetResponse(const ClientEventsGetResponse& from);
  ClientEventsGetResponse(ClientEventsGetResponse&& from) noexcept
    : ClientEventsGetResponse() {
    *this = ::std::move(from);
  }

  inline ClientEventsGetResponse& operator=(const ClientEventsGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientEventsGetResponse& operator=(ClientEventsGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientEventsGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientEventsGetResponse* internal_default_instance() {
    return reinterpret_cast<const ClientEventsGetResponse*>(
               &_ClientEventsGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ClientEventsGetResponse* other);
  friend void swap(ClientEventsGetResponse& a, ClientEventsGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientEventsGetResponse* New() const final {
    return CreateMaybeMessage<ClientEventsGetResponse>(nullptr);
  }

  ClientEventsGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientEventsGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientEventsGetResponse& from);
  void MergeFrom(const ClientEventsGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientEventsGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientEventsGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fevent_2eproto);
    return ::descriptor_table_client_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientEventsGetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientEventsGetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientEventsGetResponse_Status_OK;
  static constexpr Status INTERNAL_ERROR =
    ClientEventsGetResponse_Status_INTERNAL_ERROR;
  static constexpr Status INVALID_FILTER =
    ClientEventsGetResponse_Status_INVALID_FILTER;
  static constexpr Status UNKNOWN_BLOCK =
    ClientEventsGetResponse_Status_UNKNOWN_BLOCK;
  static inline bool Status_IsValid(int value) {
    return ClientEventsGetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientEventsGetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientEventsGetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientEventsGetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientEventsGetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientEventsGetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientEventsGetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Event events = 2;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 2;
  ::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >*
      mutable_events();
  const ::Event& events(int index) const;
  ::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >&
      events() const;

  // .ClientEventsGetResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientEventsGetResponse_Status status() const;
  void set_status(::ClientEventsGetResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientEventsGetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event > events_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientEventsSubscribeRequest

// repeated .EventSubscription subscriptions = 1;
inline int ClientEventsSubscribeRequest::subscriptions_size() const {
  return subscriptions_.size();
}
inline ::EventSubscription* ClientEventsSubscribeRequest::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:ClientEventsSubscribeRequest.subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventSubscription >*
ClientEventsSubscribeRequest::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:ClientEventsSubscribeRequest.subscriptions)
  return &subscriptions_;
}
inline const ::EventSubscription& ClientEventsSubscribeRequest::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:ClientEventsSubscribeRequest.subscriptions)
  return subscriptions_.Get(index);
}
inline ::EventSubscription* ClientEventsSubscribeRequest::add_subscriptions() {
  // @@protoc_insertion_point(field_add:ClientEventsSubscribeRequest.subscriptions)
  return subscriptions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventSubscription >&
ClientEventsSubscribeRequest::subscriptions() const {
  // @@protoc_insertion_point(field_list:ClientEventsSubscribeRequest.subscriptions)
  return subscriptions_;
}

// repeated string last_known_block_ids = 2;
inline int ClientEventsSubscribeRequest::last_known_block_ids_size() const {
  return last_known_block_ids_.size();
}
inline void ClientEventsSubscribeRequest::clear_last_known_block_ids() {
  last_known_block_ids_.Clear();
}
inline const std::string& ClientEventsSubscribeRequest::last_known_block_ids(int index) const {
  // @@protoc_insertion_point(field_get:ClientEventsSubscribeRequest.last_known_block_ids)
  return last_known_block_ids_.Get(index);
}
inline std::string* ClientEventsSubscribeRequest::mutable_last_known_block_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ClientEventsSubscribeRequest.last_known_block_ids)
  return last_known_block_ids_.Mutable(index);
}
inline void ClientEventsSubscribeRequest::set_last_known_block_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientEventsSubscribeRequest.last_known_block_ids)
  last_known_block_ids_.Mutable(index)->assign(value);
}
inline void ClientEventsSubscribeRequest::set_last_known_block_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientEventsSubscribeRequest.last_known_block_ids)
  last_known_block_ids_.Mutable(index)->assign(std::move(value));
}
inline void ClientEventsSubscribeRequest::set_last_known_block_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  last_known_block_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientEventsSubscribeRequest.last_known_block_ids)
}
inline void ClientEventsSubscribeRequest::set_last_known_block_ids(int index, const char* value, size_t size) {
  last_known_block_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientEventsSubscribeRequest.last_known_block_ids)
}
inline std::string* ClientEventsSubscribeRequest::add_last_known_block_ids() {
  // @@protoc_insertion_point(field_add_mutable:ClientEventsSubscribeRequest.last_known_block_ids)
  return last_known_block_ids_.Add();
}
inline void ClientEventsSubscribeRequest::add_last_known_block_ids(const std::string& value) {
  last_known_block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientEventsSubscribeRequest.last_known_block_ids)
}
inline void ClientEventsSubscribeRequest::add_last_known_block_ids(std::string&& value) {
  last_known_block_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientEventsSubscribeRequest.last_known_block_ids)
}
inline void ClientEventsSubscribeRequest::add_last_known_block_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  last_known_block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientEventsSubscribeRequest.last_known_block_ids)
}
inline void ClientEventsSubscribeRequest::add_last_known_block_ids(const char* value, size_t size) {
  last_known_block_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientEventsSubscribeRequest.last_known_block_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientEventsSubscribeRequest::last_known_block_ids() const {
  // @@protoc_insertion_point(field_list:ClientEventsSubscribeRequest.last_known_block_ids)
  return last_known_block_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientEventsSubscribeRequest::mutable_last_known_block_ids() {
  // @@protoc_insertion_point(field_mutable_list:ClientEventsSubscribeRequest.last_known_block_ids)
  return &last_known_block_ids_;
}

// -------------------------------------------------------------------

// ClientEventsSubscribeResponse

// .ClientEventsSubscribeResponse.Status status = 1;
inline void ClientEventsSubscribeResponse::clear_status() {
  status_ = 0;
}
inline ::ClientEventsSubscribeResponse_Status ClientEventsSubscribeResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientEventsSubscribeResponse.status)
  return static_cast< ::ClientEventsSubscribeResponse_Status >(status_);
}
inline void ClientEventsSubscribeResponse::set_status(::ClientEventsSubscribeResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientEventsSubscribeResponse.status)
}

// string response_message = 2;
inline void ClientEventsSubscribeResponse::clear_response_message() {
  response_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientEventsSubscribeResponse::response_message() const {
  // @@protoc_insertion_point(field_get:ClientEventsSubscribeResponse.response_message)
  return response_message_.GetNoArena();
}
inline void ClientEventsSubscribeResponse::set_response_message(const std::string& value) {
  
  response_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientEventsSubscribeResponse.response_message)
}
inline void ClientEventsSubscribeResponse::set_response_message(std::string&& value) {
  
  response_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientEventsSubscribeResponse.response_message)
}
inline void ClientEventsSubscribeResponse::set_response_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientEventsSubscribeResponse.response_message)
}
inline void ClientEventsSubscribeResponse::set_response_message(const char* value, size_t size) {
  
  response_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientEventsSubscribeResponse.response_message)
}
inline std::string* ClientEventsSubscribeResponse::mutable_response_message() {
  
  // @@protoc_insertion_point(field_mutable:ClientEventsSubscribeResponse.response_message)
  return response_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientEventsSubscribeResponse::release_response_message() {
  // @@protoc_insertion_point(field_release:ClientEventsSubscribeResponse.response_message)
  
  return response_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientEventsSubscribeResponse::set_allocated_response_message(std::string* response_message) {
  if (response_message != nullptr) {
    
  } else {
    
  }
  response_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_message);
  // @@protoc_insertion_point(field_set_allocated:ClientEventsSubscribeResponse.response_message)
}

// -------------------------------------------------------------------

// ClientEventsUnsubscribeRequest

// -------------------------------------------------------------------

// ClientEventsUnsubscribeResponse

// .ClientEventsUnsubscribeResponse.Status status = 1;
inline void ClientEventsUnsubscribeResponse::clear_status() {
  status_ = 0;
}
inline ::ClientEventsUnsubscribeResponse_Status ClientEventsUnsubscribeResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientEventsUnsubscribeResponse.status)
  return static_cast< ::ClientEventsUnsubscribeResponse_Status >(status_);
}
inline void ClientEventsUnsubscribeResponse::set_status(::ClientEventsUnsubscribeResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientEventsUnsubscribeResponse.status)
}

// -------------------------------------------------------------------

// ClientEventsGetRequest

// repeated .EventSubscription subscriptions = 1;
inline int ClientEventsGetRequest::subscriptions_size() const {
  return subscriptions_.size();
}
inline ::EventSubscription* ClientEventsGetRequest::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:ClientEventsGetRequest.subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventSubscription >*
ClientEventsGetRequest::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:ClientEventsGetRequest.subscriptions)
  return &subscriptions_;
}
inline const ::EventSubscription& ClientEventsGetRequest::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:ClientEventsGetRequest.subscriptions)
  return subscriptions_.Get(index);
}
inline ::EventSubscription* ClientEventsGetRequest::add_subscriptions() {
  // @@protoc_insertion_point(field_add:ClientEventsGetRequest.subscriptions)
  return subscriptions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EventSubscription >&
ClientEventsGetRequest::subscriptions() const {
  // @@protoc_insertion_point(field_list:ClientEventsGetRequest.subscriptions)
  return subscriptions_;
}

// repeated string block_ids = 2;
inline int ClientEventsGetRequest::block_ids_size() const {
  return block_ids_.size();
}
inline void ClientEventsGetRequest::clear_block_ids() {
  block_ids_.Clear();
}
inline const std::string& ClientEventsGetRequest::block_ids(int index) const {
  // @@protoc_insertion_point(field_get:ClientEventsGetRequest.block_ids)
  return block_ids_.Get(index);
}
inline std::string* ClientEventsGetRequest::mutable_block_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ClientEventsGetRequest.block_ids)
  return block_ids_.Mutable(index);
}
inline void ClientEventsGetRequest::set_block_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientEventsGetRequest.block_ids)
  block_ids_.Mutable(index)->assign(value);
}
inline void ClientEventsGetRequest::set_block_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientEventsGetRequest.block_ids)
  block_ids_.Mutable(index)->assign(std::move(value));
}
inline void ClientEventsGetRequest::set_block_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientEventsGetRequest.block_ids)
}
inline void ClientEventsGetRequest::set_block_ids(int index, const char* value, size_t size) {
  block_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientEventsGetRequest.block_ids)
}
inline std::string* ClientEventsGetRequest::add_block_ids() {
  // @@protoc_insertion_point(field_add_mutable:ClientEventsGetRequest.block_ids)
  return block_ids_.Add();
}
inline void ClientEventsGetRequest::add_block_ids(const std::string& value) {
  block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientEventsGetRequest.block_ids)
}
inline void ClientEventsGetRequest::add_block_ids(std::string&& value) {
  block_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientEventsGetRequest.block_ids)
}
inline void ClientEventsGetRequest::add_block_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientEventsGetRequest.block_ids)
}
inline void ClientEventsGetRequest::add_block_ids(const char* value, size_t size) {
  block_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientEventsGetRequest.block_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientEventsGetRequest::block_ids() const {
  // @@protoc_insertion_point(field_list:ClientEventsGetRequest.block_ids)
  return block_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientEventsGetRequest::mutable_block_ids() {
  // @@protoc_insertion_point(field_mutable_list:ClientEventsGetRequest.block_ids)
  return &block_ids_;
}

// -------------------------------------------------------------------

// ClientEventsGetResponse

// .ClientEventsGetResponse.Status status = 1;
inline void ClientEventsGetResponse::clear_status() {
  status_ = 0;
}
inline ::ClientEventsGetResponse_Status ClientEventsGetResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientEventsGetResponse.status)
  return static_cast< ::ClientEventsGetResponse_Status >(status_);
}
inline void ClientEventsGetResponse::set_status(::ClientEventsGetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientEventsGetResponse.status)
}

// repeated .Event events = 2;
inline int ClientEventsGetResponse::events_size() const {
  return events_.size();
}
inline ::Event* ClientEventsGetResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:ClientEventsGetResponse.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >*
ClientEventsGetResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:ClientEventsGetResponse.events)
  return &events_;
}
inline const ::Event& ClientEventsGetResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:ClientEventsGetResponse.events)
  return events_.Get(index);
}
inline ::Event* ClientEventsGetResponse::add_events() {
  // @@protoc_insertion_point(field_add:ClientEventsGetResponse.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >&
ClientEventsGetResponse::events() const {
  // @@protoc_insertion_point(field_list:ClientEventsGetResponse.events)
  return events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClientEventsSubscribeResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientEventsSubscribeResponse_Status>() {
  return ::ClientEventsSubscribeResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ClientEventsUnsubscribeResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientEventsUnsubscribeResponse_Status>() {
  return ::ClientEventsUnsubscribeResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ClientEventsGetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientEventsGetResponse_Status>() {
  return ::ClientEventsGetResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fevent_2eproto
