// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consensus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_consensus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_consensus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_consensus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_consensus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[44]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_consensus_2eproto;
class ConsensusBlock;
class ConsensusBlockDefaultTypeInternal;
extern ConsensusBlockDefaultTypeInternal _ConsensusBlock_default_instance_;
class ConsensusBlocksGetRequest;
class ConsensusBlocksGetRequestDefaultTypeInternal;
extern ConsensusBlocksGetRequestDefaultTypeInternal _ConsensusBlocksGetRequest_default_instance_;
class ConsensusBlocksGetResponse;
class ConsensusBlocksGetResponseDefaultTypeInternal;
extern ConsensusBlocksGetResponseDefaultTypeInternal _ConsensusBlocksGetResponse_default_instance_;
class ConsensusBroadcastRequest;
class ConsensusBroadcastRequestDefaultTypeInternal;
extern ConsensusBroadcastRequestDefaultTypeInternal _ConsensusBroadcastRequest_default_instance_;
class ConsensusBroadcastResponse;
class ConsensusBroadcastResponseDefaultTypeInternal;
extern ConsensusBroadcastResponseDefaultTypeInternal _ConsensusBroadcastResponse_default_instance_;
class ConsensusCancelBlockRequest;
class ConsensusCancelBlockRequestDefaultTypeInternal;
extern ConsensusCancelBlockRequestDefaultTypeInternal _ConsensusCancelBlockRequest_default_instance_;
class ConsensusCancelBlockResponse;
class ConsensusCancelBlockResponseDefaultTypeInternal;
extern ConsensusCancelBlockResponseDefaultTypeInternal _ConsensusCancelBlockResponse_default_instance_;
class ConsensusChainHeadGetRequest;
class ConsensusChainHeadGetRequestDefaultTypeInternal;
extern ConsensusChainHeadGetRequestDefaultTypeInternal _ConsensusChainHeadGetRequest_default_instance_;
class ConsensusChainHeadGetResponse;
class ConsensusChainHeadGetResponseDefaultTypeInternal;
extern ConsensusChainHeadGetResponseDefaultTypeInternal _ConsensusChainHeadGetResponse_default_instance_;
class ConsensusCheckBlocksRequest;
class ConsensusCheckBlocksRequestDefaultTypeInternal;
extern ConsensusCheckBlocksRequestDefaultTypeInternal _ConsensusCheckBlocksRequest_default_instance_;
class ConsensusCheckBlocksResponse;
class ConsensusCheckBlocksResponseDefaultTypeInternal;
extern ConsensusCheckBlocksResponseDefaultTypeInternal _ConsensusCheckBlocksResponse_default_instance_;
class ConsensusCommitBlockRequest;
class ConsensusCommitBlockRequestDefaultTypeInternal;
extern ConsensusCommitBlockRequestDefaultTypeInternal _ConsensusCommitBlockRequest_default_instance_;
class ConsensusCommitBlockResponse;
class ConsensusCommitBlockResponseDefaultTypeInternal;
extern ConsensusCommitBlockResponseDefaultTypeInternal _ConsensusCommitBlockResponse_default_instance_;
class ConsensusFailBlockRequest;
class ConsensusFailBlockRequestDefaultTypeInternal;
extern ConsensusFailBlockRequestDefaultTypeInternal _ConsensusFailBlockRequest_default_instance_;
class ConsensusFailBlockResponse;
class ConsensusFailBlockResponseDefaultTypeInternal;
extern ConsensusFailBlockResponseDefaultTypeInternal _ConsensusFailBlockResponse_default_instance_;
class ConsensusFinalizeBlockRequest;
class ConsensusFinalizeBlockRequestDefaultTypeInternal;
extern ConsensusFinalizeBlockRequestDefaultTypeInternal _ConsensusFinalizeBlockRequest_default_instance_;
class ConsensusFinalizeBlockResponse;
class ConsensusFinalizeBlockResponseDefaultTypeInternal;
extern ConsensusFinalizeBlockResponseDefaultTypeInternal _ConsensusFinalizeBlockResponse_default_instance_;
class ConsensusIgnoreBlockRequest;
class ConsensusIgnoreBlockRequestDefaultTypeInternal;
extern ConsensusIgnoreBlockRequestDefaultTypeInternal _ConsensusIgnoreBlockRequest_default_instance_;
class ConsensusIgnoreBlockResponse;
class ConsensusIgnoreBlockResponseDefaultTypeInternal;
extern ConsensusIgnoreBlockResponseDefaultTypeInternal _ConsensusIgnoreBlockResponse_default_instance_;
class ConsensusInitializeBlockRequest;
class ConsensusInitializeBlockRequestDefaultTypeInternal;
extern ConsensusInitializeBlockRequestDefaultTypeInternal _ConsensusInitializeBlockRequest_default_instance_;
class ConsensusInitializeBlockResponse;
class ConsensusInitializeBlockResponseDefaultTypeInternal;
extern ConsensusInitializeBlockResponseDefaultTypeInternal _ConsensusInitializeBlockResponse_default_instance_;
class ConsensusNotifyAck;
class ConsensusNotifyAckDefaultTypeInternal;
extern ConsensusNotifyAckDefaultTypeInternal _ConsensusNotifyAck_default_instance_;
class ConsensusNotifyBlockCommit;
class ConsensusNotifyBlockCommitDefaultTypeInternal;
extern ConsensusNotifyBlockCommitDefaultTypeInternal _ConsensusNotifyBlockCommit_default_instance_;
class ConsensusNotifyBlockInvalid;
class ConsensusNotifyBlockInvalidDefaultTypeInternal;
extern ConsensusNotifyBlockInvalidDefaultTypeInternal _ConsensusNotifyBlockInvalid_default_instance_;
class ConsensusNotifyBlockNew;
class ConsensusNotifyBlockNewDefaultTypeInternal;
extern ConsensusNotifyBlockNewDefaultTypeInternal _ConsensusNotifyBlockNew_default_instance_;
class ConsensusNotifyBlockValid;
class ConsensusNotifyBlockValidDefaultTypeInternal;
extern ConsensusNotifyBlockValidDefaultTypeInternal _ConsensusNotifyBlockValid_default_instance_;
class ConsensusNotifyPeerConnected;
class ConsensusNotifyPeerConnectedDefaultTypeInternal;
extern ConsensusNotifyPeerConnectedDefaultTypeInternal _ConsensusNotifyPeerConnected_default_instance_;
class ConsensusNotifyPeerDisconnected;
class ConsensusNotifyPeerDisconnectedDefaultTypeInternal;
extern ConsensusNotifyPeerDisconnectedDefaultTypeInternal _ConsensusNotifyPeerDisconnected_default_instance_;
class ConsensusNotifyPeerMessage;
class ConsensusNotifyPeerMessageDefaultTypeInternal;
extern ConsensusNotifyPeerMessageDefaultTypeInternal _ConsensusNotifyPeerMessage_default_instance_;
class ConsensusPeerInfo;
class ConsensusPeerInfoDefaultTypeInternal;
extern ConsensusPeerInfoDefaultTypeInternal _ConsensusPeerInfo_default_instance_;
class ConsensusPeerMessage;
class ConsensusPeerMessageDefaultTypeInternal;
extern ConsensusPeerMessageDefaultTypeInternal _ConsensusPeerMessage_default_instance_;
class ConsensusPeerMessageHeader;
class ConsensusPeerMessageHeaderDefaultTypeInternal;
extern ConsensusPeerMessageHeaderDefaultTypeInternal _ConsensusPeerMessageHeader_default_instance_;
class ConsensusRegisterRequest;
class ConsensusRegisterRequestDefaultTypeInternal;
extern ConsensusRegisterRequestDefaultTypeInternal _ConsensusRegisterRequest_default_instance_;
class ConsensusRegisterResponse;
class ConsensusRegisterResponseDefaultTypeInternal;
extern ConsensusRegisterResponseDefaultTypeInternal _ConsensusRegisterResponse_default_instance_;
class ConsensusSendToRequest;
class ConsensusSendToRequestDefaultTypeInternal;
extern ConsensusSendToRequestDefaultTypeInternal _ConsensusSendToRequest_default_instance_;
class ConsensusSendToResponse;
class ConsensusSendToResponseDefaultTypeInternal;
extern ConsensusSendToResponseDefaultTypeInternal _ConsensusSendToResponse_default_instance_;
class ConsensusSettingsEntry;
class ConsensusSettingsEntryDefaultTypeInternal;
extern ConsensusSettingsEntryDefaultTypeInternal _ConsensusSettingsEntry_default_instance_;
class ConsensusSettingsGetRequest;
class ConsensusSettingsGetRequestDefaultTypeInternal;
extern ConsensusSettingsGetRequestDefaultTypeInternal _ConsensusSettingsGetRequest_default_instance_;
class ConsensusSettingsGetResponse;
class ConsensusSettingsGetResponseDefaultTypeInternal;
extern ConsensusSettingsGetResponseDefaultTypeInternal _ConsensusSettingsGetResponse_default_instance_;
class ConsensusStateEntry;
class ConsensusStateEntryDefaultTypeInternal;
extern ConsensusStateEntryDefaultTypeInternal _ConsensusStateEntry_default_instance_;
class ConsensusStateGetRequest;
class ConsensusStateGetRequestDefaultTypeInternal;
extern ConsensusStateGetRequestDefaultTypeInternal _ConsensusStateGetRequest_default_instance_;
class ConsensusStateGetResponse;
class ConsensusStateGetResponseDefaultTypeInternal;
extern ConsensusStateGetResponseDefaultTypeInternal _ConsensusStateGetResponse_default_instance_;
class ConsensusSummarizeBlockRequest;
class ConsensusSummarizeBlockRequestDefaultTypeInternal;
extern ConsensusSummarizeBlockRequestDefaultTypeInternal _ConsensusSummarizeBlockRequest_default_instance_;
class ConsensusSummarizeBlockResponse;
class ConsensusSummarizeBlockResponseDefaultTypeInternal;
extern ConsensusSummarizeBlockResponseDefaultTypeInternal _ConsensusSummarizeBlockResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConsensusBlock* Arena::CreateMaybeMessage<::ConsensusBlock>(Arena*);
template<> ::ConsensusBlocksGetRequest* Arena::CreateMaybeMessage<::ConsensusBlocksGetRequest>(Arena*);
template<> ::ConsensusBlocksGetResponse* Arena::CreateMaybeMessage<::ConsensusBlocksGetResponse>(Arena*);
template<> ::ConsensusBroadcastRequest* Arena::CreateMaybeMessage<::ConsensusBroadcastRequest>(Arena*);
template<> ::ConsensusBroadcastResponse* Arena::CreateMaybeMessage<::ConsensusBroadcastResponse>(Arena*);
template<> ::ConsensusCancelBlockRequest* Arena::CreateMaybeMessage<::ConsensusCancelBlockRequest>(Arena*);
template<> ::ConsensusCancelBlockResponse* Arena::CreateMaybeMessage<::ConsensusCancelBlockResponse>(Arena*);
template<> ::ConsensusChainHeadGetRequest* Arena::CreateMaybeMessage<::ConsensusChainHeadGetRequest>(Arena*);
template<> ::ConsensusChainHeadGetResponse* Arena::CreateMaybeMessage<::ConsensusChainHeadGetResponse>(Arena*);
template<> ::ConsensusCheckBlocksRequest* Arena::CreateMaybeMessage<::ConsensusCheckBlocksRequest>(Arena*);
template<> ::ConsensusCheckBlocksResponse* Arena::CreateMaybeMessage<::ConsensusCheckBlocksResponse>(Arena*);
template<> ::ConsensusCommitBlockRequest* Arena::CreateMaybeMessage<::ConsensusCommitBlockRequest>(Arena*);
template<> ::ConsensusCommitBlockResponse* Arena::CreateMaybeMessage<::ConsensusCommitBlockResponse>(Arena*);
template<> ::ConsensusFailBlockRequest* Arena::CreateMaybeMessage<::ConsensusFailBlockRequest>(Arena*);
template<> ::ConsensusFailBlockResponse* Arena::CreateMaybeMessage<::ConsensusFailBlockResponse>(Arena*);
template<> ::ConsensusFinalizeBlockRequest* Arena::CreateMaybeMessage<::ConsensusFinalizeBlockRequest>(Arena*);
template<> ::ConsensusFinalizeBlockResponse* Arena::CreateMaybeMessage<::ConsensusFinalizeBlockResponse>(Arena*);
template<> ::ConsensusIgnoreBlockRequest* Arena::CreateMaybeMessage<::ConsensusIgnoreBlockRequest>(Arena*);
template<> ::ConsensusIgnoreBlockResponse* Arena::CreateMaybeMessage<::ConsensusIgnoreBlockResponse>(Arena*);
template<> ::ConsensusInitializeBlockRequest* Arena::CreateMaybeMessage<::ConsensusInitializeBlockRequest>(Arena*);
template<> ::ConsensusInitializeBlockResponse* Arena::CreateMaybeMessage<::ConsensusInitializeBlockResponse>(Arena*);
template<> ::ConsensusNotifyAck* Arena::CreateMaybeMessage<::ConsensusNotifyAck>(Arena*);
template<> ::ConsensusNotifyBlockCommit* Arena::CreateMaybeMessage<::ConsensusNotifyBlockCommit>(Arena*);
template<> ::ConsensusNotifyBlockInvalid* Arena::CreateMaybeMessage<::ConsensusNotifyBlockInvalid>(Arena*);
template<> ::ConsensusNotifyBlockNew* Arena::CreateMaybeMessage<::ConsensusNotifyBlockNew>(Arena*);
template<> ::ConsensusNotifyBlockValid* Arena::CreateMaybeMessage<::ConsensusNotifyBlockValid>(Arena*);
template<> ::ConsensusNotifyPeerConnected* Arena::CreateMaybeMessage<::ConsensusNotifyPeerConnected>(Arena*);
template<> ::ConsensusNotifyPeerDisconnected* Arena::CreateMaybeMessage<::ConsensusNotifyPeerDisconnected>(Arena*);
template<> ::ConsensusNotifyPeerMessage* Arena::CreateMaybeMessage<::ConsensusNotifyPeerMessage>(Arena*);
template<> ::ConsensusPeerInfo* Arena::CreateMaybeMessage<::ConsensusPeerInfo>(Arena*);
template<> ::ConsensusPeerMessage* Arena::CreateMaybeMessage<::ConsensusPeerMessage>(Arena*);
template<> ::ConsensusPeerMessageHeader* Arena::CreateMaybeMessage<::ConsensusPeerMessageHeader>(Arena*);
template<> ::ConsensusRegisterRequest* Arena::CreateMaybeMessage<::ConsensusRegisterRequest>(Arena*);
template<> ::ConsensusRegisterResponse* Arena::CreateMaybeMessage<::ConsensusRegisterResponse>(Arena*);
template<> ::ConsensusSendToRequest* Arena::CreateMaybeMessage<::ConsensusSendToRequest>(Arena*);
template<> ::ConsensusSendToResponse* Arena::CreateMaybeMessage<::ConsensusSendToResponse>(Arena*);
template<> ::ConsensusSettingsEntry* Arena::CreateMaybeMessage<::ConsensusSettingsEntry>(Arena*);
template<> ::ConsensusSettingsGetRequest* Arena::CreateMaybeMessage<::ConsensusSettingsGetRequest>(Arena*);
template<> ::ConsensusSettingsGetResponse* Arena::CreateMaybeMessage<::ConsensusSettingsGetResponse>(Arena*);
template<> ::ConsensusStateEntry* Arena::CreateMaybeMessage<::ConsensusStateEntry>(Arena*);
template<> ::ConsensusStateGetRequest* Arena::CreateMaybeMessage<::ConsensusStateGetRequest>(Arena*);
template<> ::ConsensusStateGetResponse* Arena::CreateMaybeMessage<::ConsensusStateGetResponse>(Arena*);
template<> ::ConsensusSummarizeBlockRequest* Arena::CreateMaybeMessage<::ConsensusSummarizeBlockRequest>(Arena*);
template<> ::ConsensusSummarizeBlockResponse* Arena::CreateMaybeMessage<::ConsensusSummarizeBlockResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ConsensusRegisterResponse_Status : int {
  ConsensusRegisterResponse_Status_STATUS_UNSET = 0,
  ConsensusRegisterResponse_Status_OK = 1,
  ConsensusRegisterResponse_Status_BAD_REQUEST = 2,
  ConsensusRegisterResponse_Status_SERVICE_ERROR = 3,
  ConsensusRegisterResponse_Status_NOT_READY = 4,
  ConsensusRegisterResponse_Status_ConsensusRegisterResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusRegisterResponse_Status_ConsensusRegisterResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusRegisterResponse_Status_IsValid(int value);
constexpr ConsensusRegisterResponse_Status ConsensusRegisterResponse_Status_Status_MIN = ConsensusRegisterResponse_Status_STATUS_UNSET;
constexpr ConsensusRegisterResponse_Status ConsensusRegisterResponse_Status_Status_MAX = ConsensusRegisterResponse_Status_NOT_READY;
constexpr int ConsensusRegisterResponse_Status_Status_ARRAYSIZE = ConsensusRegisterResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusRegisterResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusRegisterResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusRegisterResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusRegisterResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusRegisterResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusRegisterResponse_Status_Parse(
    const std::string& name, ConsensusRegisterResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusRegisterResponse_Status>(
    ConsensusRegisterResponse_Status_descriptor(), name, value);
}
enum ConsensusSendToResponse_Status : int {
  ConsensusSendToResponse_Status_STATUS_UNSET = 0,
  ConsensusSendToResponse_Status_OK = 1,
  ConsensusSendToResponse_Status_BAD_REQUEST = 2,
  ConsensusSendToResponse_Status_SERVICE_ERROR = 3,
  ConsensusSendToResponse_Status_NOT_READY = 4,
  ConsensusSendToResponse_Status_UNKNOWN_PEER = 5,
  ConsensusSendToResponse_Status_ConsensusSendToResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusSendToResponse_Status_ConsensusSendToResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusSendToResponse_Status_IsValid(int value);
constexpr ConsensusSendToResponse_Status ConsensusSendToResponse_Status_Status_MIN = ConsensusSendToResponse_Status_STATUS_UNSET;
constexpr ConsensusSendToResponse_Status ConsensusSendToResponse_Status_Status_MAX = ConsensusSendToResponse_Status_UNKNOWN_PEER;
constexpr int ConsensusSendToResponse_Status_Status_ARRAYSIZE = ConsensusSendToResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusSendToResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusSendToResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusSendToResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusSendToResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusSendToResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusSendToResponse_Status_Parse(
    const std::string& name, ConsensusSendToResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusSendToResponse_Status>(
    ConsensusSendToResponse_Status_descriptor(), name, value);
}
enum ConsensusBroadcastResponse_Status : int {
  ConsensusBroadcastResponse_Status_STATUS_UNSET = 0,
  ConsensusBroadcastResponse_Status_OK = 1,
  ConsensusBroadcastResponse_Status_BAD_REQUEST = 2,
  ConsensusBroadcastResponse_Status_SERVICE_ERROR = 3,
  ConsensusBroadcastResponse_Status_NOT_READY = 4,
  ConsensusBroadcastResponse_Status_ConsensusBroadcastResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusBroadcastResponse_Status_ConsensusBroadcastResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusBroadcastResponse_Status_IsValid(int value);
constexpr ConsensusBroadcastResponse_Status ConsensusBroadcastResponse_Status_Status_MIN = ConsensusBroadcastResponse_Status_STATUS_UNSET;
constexpr ConsensusBroadcastResponse_Status ConsensusBroadcastResponse_Status_Status_MAX = ConsensusBroadcastResponse_Status_NOT_READY;
constexpr int ConsensusBroadcastResponse_Status_Status_ARRAYSIZE = ConsensusBroadcastResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusBroadcastResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusBroadcastResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusBroadcastResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusBroadcastResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusBroadcastResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusBroadcastResponse_Status_Parse(
    const std::string& name, ConsensusBroadcastResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusBroadcastResponse_Status>(
    ConsensusBroadcastResponse_Status_descriptor(), name, value);
}
enum ConsensusInitializeBlockResponse_Status : int {
  ConsensusInitializeBlockResponse_Status_STATUS_UNSET = 0,
  ConsensusInitializeBlockResponse_Status_OK = 1,
  ConsensusInitializeBlockResponse_Status_BAD_REQUEST = 2,
  ConsensusInitializeBlockResponse_Status_SERVICE_ERROR = 3,
  ConsensusInitializeBlockResponse_Status_NOT_READY = 4,
  ConsensusInitializeBlockResponse_Status_INVALID_STATE = 5,
  ConsensusInitializeBlockResponse_Status_UNKNOWN_BLOCK = 6,
  ConsensusInitializeBlockResponse_Status_ConsensusInitializeBlockResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusInitializeBlockResponse_Status_ConsensusInitializeBlockResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusInitializeBlockResponse_Status_IsValid(int value);
constexpr ConsensusInitializeBlockResponse_Status ConsensusInitializeBlockResponse_Status_Status_MIN = ConsensusInitializeBlockResponse_Status_STATUS_UNSET;
constexpr ConsensusInitializeBlockResponse_Status ConsensusInitializeBlockResponse_Status_Status_MAX = ConsensusInitializeBlockResponse_Status_UNKNOWN_BLOCK;
constexpr int ConsensusInitializeBlockResponse_Status_Status_ARRAYSIZE = ConsensusInitializeBlockResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusInitializeBlockResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusInitializeBlockResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusInitializeBlockResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusInitializeBlockResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusInitializeBlockResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusInitializeBlockResponse_Status_Parse(
    const std::string& name, ConsensusInitializeBlockResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusInitializeBlockResponse_Status>(
    ConsensusInitializeBlockResponse_Status_descriptor(), name, value);
}
enum ConsensusSummarizeBlockResponse_Status : int {
  ConsensusSummarizeBlockResponse_Status_STATUS_UNSET = 0,
  ConsensusSummarizeBlockResponse_Status_OK = 1,
  ConsensusSummarizeBlockResponse_Status_BAD_REQUEST = 2,
  ConsensusSummarizeBlockResponse_Status_SERVICE_ERROR = 3,
  ConsensusSummarizeBlockResponse_Status_NOT_READY = 4,
  ConsensusSummarizeBlockResponse_Status_INVALID_STATE = 5,
  ConsensusSummarizeBlockResponse_Status_BLOCK_NOT_READY = 6,
  ConsensusSummarizeBlockResponse_Status_ConsensusSummarizeBlockResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusSummarizeBlockResponse_Status_ConsensusSummarizeBlockResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusSummarizeBlockResponse_Status_IsValid(int value);
constexpr ConsensusSummarizeBlockResponse_Status ConsensusSummarizeBlockResponse_Status_Status_MIN = ConsensusSummarizeBlockResponse_Status_STATUS_UNSET;
constexpr ConsensusSummarizeBlockResponse_Status ConsensusSummarizeBlockResponse_Status_Status_MAX = ConsensusSummarizeBlockResponse_Status_BLOCK_NOT_READY;
constexpr int ConsensusSummarizeBlockResponse_Status_Status_ARRAYSIZE = ConsensusSummarizeBlockResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusSummarizeBlockResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusSummarizeBlockResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusSummarizeBlockResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusSummarizeBlockResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusSummarizeBlockResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusSummarizeBlockResponse_Status_Parse(
    const std::string& name, ConsensusSummarizeBlockResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusSummarizeBlockResponse_Status>(
    ConsensusSummarizeBlockResponse_Status_descriptor(), name, value);
}
enum ConsensusFinalizeBlockResponse_Status : int {
  ConsensusFinalizeBlockResponse_Status_STATUS_UNSET = 0,
  ConsensusFinalizeBlockResponse_Status_OK = 1,
  ConsensusFinalizeBlockResponse_Status_BAD_REQUEST = 2,
  ConsensusFinalizeBlockResponse_Status_SERVICE_ERROR = 3,
  ConsensusFinalizeBlockResponse_Status_NOT_READY = 4,
  ConsensusFinalizeBlockResponse_Status_INVALID_STATE = 5,
  ConsensusFinalizeBlockResponse_Status_BLOCK_NOT_READY = 6,
  ConsensusFinalizeBlockResponse_Status_ConsensusFinalizeBlockResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusFinalizeBlockResponse_Status_ConsensusFinalizeBlockResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusFinalizeBlockResponse_Status_IsValid(int value);
constexpr ConsensusFinalizeBlockResponse_Status ConsensusFinalizeBlockResponse_Status_Status_MIN = ConsensusFinalizeBlockResponse_Status_STATUS_UNSET;
constexpr ConsensusFinalizeBlockResponse_Status ConsensusFinalizeBlockResponse_Status_Status_MAX = ConsensusFinalizeBlockResponse_Status_BLOCK_NOT_READY;
constexpr int ConsensusFinalizeBlockResponse_Status_Status_ARRAYSIZE = ConsensusFinalizeBlockResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusFinalizeBlockResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusFinalizeBlockResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusFinalizeBlockResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusFinalizeBlockResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusFinalizeBlockResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusFinalizeBlockResponse_Status_Parse(
    const std::string& name, ConsensusFinalizeBlockResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusFinalizeBlockResponse_Status>(
    ConsensusFinalizeBlockResponse_Status_descriptor(), name, value);
}
enum ConsensusCancelBlockResponse_Status : int {
  ConsensusCancelBlockResponse_Status_STATUS_UNSET = 0,
  ConsensusCancelBlockResponse_Status_OK = 1,
  ConsensusCancelBlockResponse_Status_BAD_REQUEST = 2,
  ConsensusCancelBlockResponse_Status_SERVICE_ERROR = 3,
  ConsensusCancelBlockResponse_Status_NOT_READY = 4,
  ConsensusCancelBlockResponse_Status_INVALID_STATE = 5,
  ConsensusCancelBlockResponse_Status_ConsensusCancelBlockResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusCancelBlockResponse_Status_ConsensusCancelBlockResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusCancelBlockResponse_Status_IsValid(int value);
constexpr ConsensusCancelBlockResponse_Status ConsensusCancelBlockResponse_Status_Status_MIN = ConsensusCancelBlockResponse_Status_STATUS_UNSET;
constexpr ConsensusCancelBlockResponse_Status ConsensusCancelBlockResponse_Status_Status_MAX = ConsensusCancelBlockResponse_Status_INVALID_STATE;
constexpr int ConsensusCancelBlockResponse_Status_Status_ARRAYSIZE = ConsensusCancelBlockResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusCancelBlockResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusCancelBlockResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusCancelBlockResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusCancelBlockResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusCancelBlockResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusCancelBlockResponse_Status_Parse(
    const std::string& name, ConsensusCancelBlockResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusCancelBlockResponse_Status>(
    ConsensusCancelBlockResponse_Status_descriptor(), name, value);
}
enum ConsensusCheckBlocksResponse_Status : int {
  ConsensusCheckBlocksResponse_Status_STATUS_UNSET = 0,
  ConsensusCheckBlocksResponse_Status_OK = 1,
  ConsensusCheckBlocksResponse_Status_BAD_REQUEST = 2,
  ConsensusCheckBlocksResponse_Status_SERVICE_ERROR = 3,
  ConsensusCheckBlocksResponse_Status_NOT_READY = 4,
  ConsensusCheckBlocksResponse_Status_UNKNOWN_BLOCK = 5,
  ConsensusCheckBlocksResponse_Status_ConsensusCheckBlocksResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusCheckBlocksResponse_Status_ConsensusCheckBlocksResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusCheckBlocksResponse_Status_IsValid(int value);
constexpr ConsensusCheckBlocksResponse_Status ConsensusCheckBlocksResponse_Status_Status_MIN = ConsensusCheckBlocksResponse_Status_STATUS_UNSET;
constexpr ConsensusCheckBlocksResponse_Status ConsensusCheckBlocksResponse_Status_Status_MAX = ConsensusCheckBlocksResponse_Status_UNKNOWN_BLOCK;
constexpr int ConsensusCheckBlocksResponse_Status_Status_ARRAYSIZE = ConsensusCheckBlocksResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusCheckBlocksResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusCheckBlocksResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusCheckBlocksResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusCheckBlocksResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusCheckBlocksResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusCheckBlocksResponse_Status_Parse(
    const std::string& name, ConsensusCheckBlocksResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusCheckBlocksResponse_Status>(
    ConsensusCheckBlocksResponse_Status_descriptor(), name, value);
}
enum ConsensusCommitBlockResponse_Status : int {
  ConsensusCommitBlockResponse_Status_STATUS_UNSET = 0,
  ConsensusCommitBlockResponse_Status_OK = 1,
  ConsensusCommitBlockResponse_Status_BAD_REQUEST = 2,
  ConsensusCommitBlockResponse_Status_SERVICE_ERROR = 3,
  ConsensusCommitBlockResponse_Status_NOT_READY = 4,
  ConsensusCommitBlockResponse_Status_UNKNOWN_BLOCK = 5,
  ConsensusCommitBlockResponse_Status_ConsensusCommitBlockResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusCommitBlockResponse_Status_ConsensusCommitBlockResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusCommitBlockResponse_Status_IsValid(int value);
constexpr ConsensusCommitBlockResponse_Status ConsensusCommitBlockResponse_Status_Status_MIN = ConsensusCommitBlockResponse_Status_STATUS_UNSET;
constexpr ConsensusCommitBlockResponse_Status ConsensusCommitBlockResponse_Status_Status_MAX = ConsensusCommitBlockResponse_Status_UNKNOWN_BLOCK;
constexpr int ConsensusCommitBlockResponse_Status_Status_ARRAYSIZE = ConsensusCommitBlockResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusCommitBlockResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusCommitBlockResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusCommitBlockResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusCommitBlockResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusCommitBlockResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusCommitBlockResponse_Status_Parse(
    const std::string& name, ConsensusCommitBlockResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusCommitBlockResponse_Status>(
    ConsensusCommitBlockResponse_Status_descriptor(), name, value);
}
enum ConsensusIgnoreBlockResponse_Status : int {
  ConsensusIgnoreBlockResponse_Status_STATUS_UNSET = 0,
  ConsensusIgnoreBlockResponse_Status_OK = 1,
  ConsensusIgnoreBlockResponse_Status_BAD_REQUEST = 2,
  ConsensusIgnoreBlockResponse_Status_SERVICE_ERROR = 3,
  ConsensusIgnoreBlockResponse_Status_NOT_READY = 4,
  ConsensusIgnoreBlockResponse_Status_UNKNOWN_BLOCK = 5,
  ConsensusIgnoreBlockResponse_Status_ConsensusIgnoreBlockResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusIgnoreBlockResponse_Status_ConsensusIgnoreBlockResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusIgnoreBlockResponse_Status_IsValid(int value);
constexpr ConsensusIgnoreBlockResponse_Status ConsensusIgnoreBlockResponse_Status_Status_MIN = ConsensusIgnoreBlockResponse_Status_STATUS_UNSET;
constexpr ConsensusIgnoreBlockResponse_Status ConsensusIgnoreBlockResponse_Status_Status_MAX = ConsensusIgnoreBlockResponse_Status_UNKNOWN_BLOCK;
constexpr int ConsensusIgnoreBlockResponse_Status_Status_ARRAYSIZE = ConsensusIgnoreBlockResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusIgnoreBlockResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusIgnoreBlockResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusIgnoreBlockResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusIgnoreBlockResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusIgnoreBlockResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusIgnoreBlockResponse_Status_Parse(
    const std::string& name, ConsensusIgnoreBlockResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusIgnoreBlockResponse_Status>(
    ConsensusIgnoreBlockResponse_Status_descriptor(), name, value);
}
enum ConsensusFailBlockResponse_Status : int {
  ConsensusFailBlockResponse_Status_STATUS_UNSET = 0,
  ConsensusFailBlockResponse_Status_OK = 1,
  ConsensusFailBlockResponse_Status_BAD_REQUEST = 2,
  ConsensusFailBlockResponse_Status_SERVICE_ERROR = 3,
  ConsensusFailBlockResponse_Status_NOT_READY = 4,
  ConsensusFailBlockResponse_Status_UNKNOWN_BLOCK = 5,
  ConsensusFailBlockResponse_Status_ConsensusFailBlockResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusFailBlockResponse_Status_ConsensusFailBlockResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusFailBlockResponse_Status_IsValid(int value);
constexpr ConsensusFailBlockResponse_Status ConsensusFailBlockResponse_Status_Status_MIN = ConsensusFailBlockResponse_Status_STATUS_UNSET;
constexpr ConsensusFailBlockResponse_Status ConsensusFailBlockResponse_Status_Status_MAX = ConsensusFailBlockResponse_Status_UNKNOWN_BLOCK;
constexpr int ConsensusFailBlockResponse_Status_Status_ARRAYSIZE = ConsensusFailBlockResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusFailBlockResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusFailBlockResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusFailBlockResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusFailBlockResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusFailBlockResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusFailBlockResponse_Status_Parse(
    const std::string& name, ConsensusFailBlockResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusFailBlockResponse_Status>(
    ConsensusFailBlockResponse_Status_descriptor(), name, value);
}
enum ConsensusBlocksGetResponse_Status : int {
  ConsensusBlocksGetResponse_Status_STATUS_UNSET = 0,
  ConsensusBlocksGetResponse_Status_OK = 1,
  ConsensusBlocksGetResponse_Status_BAD_REQUEST = 2,
  ConsensusBlocksGetResponse_Status_SERVICE_ERROR = 3,
  ConsensusBlocksGetResponse_Status_NOT_READY = 4,
  ConsensusBlocksGetResponse_Status_UNKNOWN_BLOCK = 5,
  ConsensusBlocksGetResponse_Status_ConsensusBlocksGetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusBlocksGetResponse_Status_ConsensusBlocksGetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusBlocksGetResponse_Status_IsValid(int value);
constexpr ConsensusBlocksGetResponse_Status ConsensusBlocksGetResponse_Status_Status_MIN = ConsensusBlocksGetResponse_Status_STATUS_UNSET;
constexpr ConsensusBlocksGetResponse_Status ConsensusBlocksGetResponse_Status_Status_MAX = ConsensusBlocksGetResponse_Status_UNKNOWN_BLOCK;
constexpr int ConsensusBlocksGetResponse_Status_Status_ARRAYSIZE = ConsensusBlocksGetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusBlocksGetResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusBlocksGetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusBlocksGetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusBlocksGetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusBlocksGetResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusBlocksGetResponse_Status_Parse(
    const std::string& name, ConsensusBlocksGetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusBlocksGetResponse_Status>(
    ConsensusBlocksGetResponse_Status_descriptor(), name, value);
}
enum ConsensusChainHeadGetResponse_Status : int {
  ConsensusChainHeadGetResponse_Status_STATUS_UNSET = 0,
  ConsensusChainHeadGetResponse_Status_OK = 1,
  ConsensusChainHeadGetResponse_Status_BAD_REQUEST = 2,
  ConsensusChainHeadGetResponse_Status_SERVICE_ERROR = 3,
  ConsensusChainHeadGetResponse_Status_NOT_READY = 4,
  ConsensusChainHeadGetResponse_Status_NO_CHAIN_HEAD = 5,
  ConsensusChainHeadGetResponse_Status_ConsensusChainHeadGetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusChainHeadGetResponse_Status_ConsensusChainHeadGetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusChainHeadGetResponse_Status_IsValid(int value);
constexpr ConsensusChainHeadGetResponse_Status ConsensusChainHeadGetResponse_Status_Status_MIN = ConsensusChainHeadGetResponse_Status_STATUS_UNSET;
constexpr ConsensusChainHeadGetResponse_Status ConsensusChainHeadGetResponse_Status_Status_MAX = ConsensusChainHeadGetResponse_Status_NO_CHAIN_HEAD;
constexpr int ConsensusChainHeadGetResponse_Status_Status_ARRAYSIZE = ConsensusChainHeadGetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusChainHeadGetResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusChainHeadGetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusChainHeadGetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusChainHeadGetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusChainHeadGetResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusChainHeadGetResponse_Status_Parse(
    const std::string& name, ConsensusChainHeadGetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusChainHeadGetResponse_Status>(
    ConsensusChainHeadGetResponse_Status_descriptor(), name, value);
}
enum ConsensusSettingsGetResponse_Status : int {
  ConsensusSettingsGetResponse_Status_STATUS_UNSET = 0,
  ConsensusSettingsGetResponse_Status_OK = 1,
  ConsensusSettingsGetResponse_Status_BAD_REQUEST = 2,
  ConsensusSettingsGetResponse_Status_SERVICE_ERROR = 3,
  ConsensusSettingsGetResponse_Status_NOT_READY = 4,
  ConsensusSettingsGetResponse_Status_UNKNOWN_BLOCK = 5,
  ConsensusSettingsGetResponse_Status_ConsensusSettingsGetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusSettingsGetResponse_Status_ConsensusSettingsGetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusSettingsGetResponse_Status_IsValid(int value);
constexpr ConsensusSettingsGetResponse_Status ConsensusSettingsGetResponse_Status_Status_MIN = ConsensusSettingsGetResponse_Status_STATUS_UNSET;
constexpr ConsensusSettingsGetResponse_Status ConsensusSettingsGetResponse_Status_Status_MAX = ConsensusSettingsGetResponse_Status_UNKNOWN_BLOCK;
constexpr int ConsensusSettingsGetResponse_Status_Status_ARRAYSIZE = ConsensusSettingsGetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusSettingsGetResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusSettingsGetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusSettingsGetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusSettingsGetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusSettingsGetResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusSettingsGetResponse_Status_Parse(
    const std::string& name, ConsensusSettingsGetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusSettingsGetResponse_Status>(
    ConsensusSettingsGetResponse_Status_descriptor(), name, value);
}
enum ConsensusStateGetResponse_Status : int {
  ConsensusStateGetResponse_Status_STATUS_UNSET = 0,
  ConsensusStateGetResponse_Status_OK = 1,
  ConsensusStateGetResponse_Status_BAD_REQUEST = 2,
  ConsensusStateGetResponse_Status_SERVICE_ERROR = 3,
  ConsensusStateGetResponse_Status_NOT_READY = 4,
  ConsensusStateGetResponse_Status_UNKNOWN_BLOCK = 5,
  ConsensusStateGetResponse_Status_ConsensusStateGetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsensusStateGetResponse_Status_ConsensusStateGetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsensusStateGetResponse_Status_IsValid(int value);
constexpr ConsensusStateGetResponse_Status ConsensusStateGetResponse_Status_Status_MIN = ConsensusStateGetResponse_Status_STATUS_UNSET;
constexpr ConsensusStateGetResponse_Status ConsensusStateGetResponse_Status_Status_MAX = ConsensusStateGetResponse_Status_UNKNOWN_BLOCK;
constexpr int ConsensusStateGetResponse_Status_Status_ARRAYSIZE = ConsensusStateGetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusStateGetResponse_Status_descriptor();
template<typename T>
inline const std::string& ConsensusStateGetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsensusStateGetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsensusStateGetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsensusStateGetResponse_Status_descriptor(), enum_t_value);
}
inline bool ConsensusStateGetResponse_Status_Parse(
    const std::string& name, ConsensusStateGetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsensusStateGetResponse_Status>(
    ConsensusStateGetResponse_Status_descriptor(), name, value);
}
// ===================================================================

class ConsensusPeerMessageHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusPeerMessageHeader) */ {
 public:
  ConsensusPeerMessageHeader();
  virtual ~ConsensusPeerMessageHeader();

  ConsensusPeerMessageHeader(const ConsensusPeerMessageHeader& from);
  ConsensusPeerMessageHeader(ConsensusPeerMessageHeader&& from) noexcept
    : ConsensusPeerMessageHeader() {
    *this = ::std::move(from);
  }

  inline ConsensusPeerMessageHeader& operator=(const ConsensusPeerMessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusPeerMessageHeader& operator=(ConsensusPeerMessageHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusPeerMessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusPeerMessageHeader* internal_default_instance() {
    return reinterpret_cast<const ConsensusPeerMessageHeader*>(
               &_ConsensusPeerMessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConsensusPeerMessageHeader* other);
  friend void swap(ConsensusPeerMessageHeader& a, ConsensusPeerMessageHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusPeerMessageHeader* New() const final {
    return CreateMaybeMessage<ConsensusPeerMessageHeader>(nullptr);
  }

  ConsensusPeerMessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusPeerMessageHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusPeerMessageHeader& from);
  void MergeFrom(const ConsensusPeerMessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusPeerMessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusPeerMessageHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes signer_id = 1;
  void clear_signer_id();
  static const int kSignerIdFieldNumber = 1;
  const std::string& signer_id() const;
  void set_signer_id(const std::string& value);
  void set_signer_id(std::string&& value);
  void set_signer_id(const char* value);
  void set_signer_id(const void* value, size_t size);
  std::string* mutable_signer_id();
  std::string* release_signer_id();
  void set_allocated_signer_id(std::string* signer_id);

  // bytes content_sha512 = 2;
  void clear_content_sha512();
  static const int kContentSha512FieldNumber = 2;
  const std::string& content_sha512() const;
  void set_content_sha512(const std::string& value);
  void set_content_sha512(std::string&& value);
  void set_content_sha512(const char* value);
  void set_content_sha512(const void* value, size_t size);
  std::string* mutable_content_sha512();
  std::string* release_content_sha512();
  void set_allocated_content_sha512(std::string* content_sha512);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // string message_type = 5;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 5;
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);

  // @@protoc_insertion_point(class_scope:ConsensusPeerMessageHeader)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_sha512_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusPeerMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusPeerMessage) */ {
 public:
  ConsensusPeerMessage();
  virtual ~ConsensusPeerMessage();

  ConsensusPeerMessage(const ConsensusPeerMessage& from);
  ConsensusPeerMessage(ConsensusPeerMessage&& from) noexcept
    : ConsensusPeerMessage() {
    *this = ::std::move(from);
  }

  inline ConsensusPeerMessage& operator=(const ConsensusPeerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusPeerMessage& operator=(ConsensusPeerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusPeerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusPeerMessage* internal_default_instance() {
    return reinterpret_cast<const ConsensusPeerMessage*>(
               &_ConsensusPeerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ConsensusPeerMessage* other);
  friend void swap(ConsensusPeerMessage& a, ConsensusPeerMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusPeerMessage* New() const final {
    return CreateMaybeMessage<ConsensusPeerMessage>(nullptr);
  }

  ConsensusPeerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusPeerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusPeerMessage& from);
  void MergeFrom(const ConsensusPeerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusPeerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusPeerMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes header = 1;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const std::string& header() const;
  void set_header(const std::string& value);
  void set_header(std::string&& value);
  void set_header(const char* value);
  void set_header(const void* value, size_t size);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);

  // bytes content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // bytes header_signature = 3;
  void clear_header_signature();
  static const int kHeaderSignatureFieldNumber = 3;
  const std::string& header_signature() const;
  void set_header_signature(const std::string& value);
  void set_header_signature(std::string&& value);
  void set_header_signature(const char* value);
  void set_header_signature(const void* value, size_t size);
  std::string* mutable_header_signature();
  std::string* release_header_signature();
  void set_allocated_header_signature(std::string* header_signature);

  // @@protoc_insertion_point(class_scope:ConsensusPeerMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusBlock :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusBlock) */ {
 public:
  ConsensusBlock();
  virtual ~ConsensusBlock();

  ConsensusBlock(const ConsensusBlock& from);
  ConsensusBlock(ConsensusBlock&& from) noexcept
    : ConsensusBlock() {
    *this = ::std::move(from);
  }

  inline ConsensusBlock& operator=(const ConsensusBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusBlock& operator=(ConsensusBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusBlock* internal_default_instance() {
    return reinterpret_cast<const ConsensusBlock*>(
               &_ConsensusBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ConsensusBlock* other);
  friend void swap(ConsensusBlock& a, ConsensusBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusBlock* New() const final {
    return CreateMaybeMessage<ConsensusBlock>(nullptr);
  }

  ConsensusBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusBlock& from);
  void MergeFrom(const ConsensusBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const void* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);

  // bytes previous_id = 2;
  void clear_previous_id();
  static const int kPreviousIdFieldNumber = 2;
  const std::string& previous_id() const;
  void set_previous_id(const std::string& value);
  void set_previous_id(std::string&& value);
  void set_previous_id(const char* value);
  void set_previous_id(const void* value, size_t size);
  std::string* mutable_previous_id();
  std::string* release_previous_id();
  void set_allocated_previous_id(std::string* previous_id);

  // bytes signer_id = 3;
  void clear_signer_id();
  static const int kSignerIdFieldNumber = 3;
  const std::string& signer_id() const;
  void set_signer_id(const std::string& value);
  void set_signer_id(std::string&& value);
  void set_signer_id(const char* value);
  void set_signer_id(const void* value, size_t size);
  std::string* mutable_signer_id();
  std::string* release_signer_id();
  void set_allocated_signer_id(std::string* signer_id);

  // bytes payload = 5;
  void clear_payload();
  static const int kPayloadFieldNumber = 5;
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);

  // bytes summary = 6;
  void clear_summary();
  static const int kSummaryFieldNumber = 6;
  const std::string& summary() const;
  void set_summary(const std::string& value);
  void set_summary(std::string&& value);
  void set_summary(const char* value);
  void set_summary(const void* value, size_t size);
  std::string* mutable_summary();
  std::string* release_summary();
  void set_allocated_summary(std::string* summary);

  // uint64 block_num = 4;
  void clear_block_num();
  static const int kBlockNumFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_num() const;
  void set_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:ConsensusBlock)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusPeerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusPeerInfo) */ {
 public:
  ConsensusPeerInfo();
  virtual ~ConsensusPeerInfo();

  ConsensusPeerInfo(const ConsensusPeerInfo& from);
  ConsensusPeerInfo(ConsensusPeerInfo&& from) noexcept
    : ConsensusPeerInfo() {
    *this = ::std::move(from);
  }

  inline ConsensusPeerInfo& operator=(const ConsensusPeerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusPeerInfo& operator=(ConsensusPeerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusPeerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusPeerInfo* internal_default_instance() {
    return reinterpret_cast<const ConsensusPeerInfo*>(
               &_ConsensusPeerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConsensusPeerInfo* other);
  friend void swap(ConsensusPeerInfo& a, ConsensusPeerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusPeerInfo* New() const final {
    return CreateMaybeMessage<ConsensusPeerInfo>(nullptr);
  }

  ConsensusPeerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusPeerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusPeerInfo& from);
  void MergeFrom(const ConsensusPeerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusPeerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusPeerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes peer_id = 1;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 1;
  const std::string& peer_id() const;
  void set_peer_id(const std::string& value);
  void set_peer_id(std::string&& value);
  void set_peer_id(const char* value);
  void set_peer_id(const void* value, size_t size);
  std::string* mutable_peer_id();
  std::string* release_peer_id();
  void set_allocated_peer_id(std::string* peer_id);

  // @@protoc_insertion_point(class_scope:ConsensusPeerInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusSettingsEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusSettingsEntry) */ {
 public:
  ConsensusSettingsEntry();
  virtual ~ConsensusSettingsEntry();

  ConsensusSettingsEntry(const ConsensusSettingsEntry& from);
  ConsensusSettingsEntry(ConsensusSettingsEntry&& from) noexcept
    : ConsensusSettingsEntry() {
    *this = ::std::move(from);
  }

  inline ConsensusSettingsEntry& operator=(const ConsensusSettingsEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusSettingsEntry& operator=(ConsensusSettingsEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusSettingsEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusSettingsEntry* internal_default_instance() {
    return reinterpret_cast<const ConsensusSettingsEntry*>(
               &_ConsensusSettingsEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ConsensusSettingsEntry* other);
  friend void swap(ConsensusSettingsEntry& a, ConsensusSettingsEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusSettingsEntry* New() const final {
    return CreateMaybeMessage<ConsensusSettingsEntry>(nullptr);
  }

  ConsensusSettingsEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusSettingsEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusSettingsEntry& from);
  void MergeFrom(const ConsensusSettingsEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusSettingsEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusSettingsEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:ConsensusSettingsEntry)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusStateEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusStateEntry) */ {
 public:
  ConsensusStateEntry();
  virtual ~ConsensusStateEntry();

  ConsensusStateEntry(const ConsensusStateEntry& from);
  ConsensusStateEntry(ConsensusStateEntry&& from) noexcept
    : ConsensusStateEntry() {
    *this = ::std::move(from);
  }

  inline ConsensusStateEntry& operator=(const ConsensusStateEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusStateEntry& operator=(ConsensusStateEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusStateEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusStateEntry* internal_default_instance() {
    return reinterpret_cast<const ConsensusStateEntry*>(
               &_ConsensusStateEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ConsensusStateEntry* other);
  friend void swap(ConsensusStateEntry& a, ConsensusStateEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusStateEntry* New() const final {
    return CreateMaybeMessage<ConsensusStateEntry>(nullptr);
  }

  ConsensusStateEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusStateEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusStateEntry& from);
  void MergeFrom(const ConsensusStateEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusStateEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusStateEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:ConsensusStateEntry)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusRegisterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusRegisterRequest) */ {
 public:
  ConsensusRegisterRequest();
  virtual ~ConsensusRegisterRequest();

  ConsensusRegisterRequest(const ConsensusRegisterRequest& from);
  ConsensusRegisterRequest(ConsensusRegisterRequest&& from) noexcept
    : ConsensusRegisterRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusRegisterRequest& operator=(const ConsensusRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusRegisterRequest& operator=(ConsensusRegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusRegisterRequest*>(
               &_ConsensusRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ConsensusRegisterRequest* other);
  friend void swap(ConsensusRegisterRequest& a, ConsensusRegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusRegisterRequest* New() const final {
    return CreateMaybeMessage<ConsensusRegisterRequest>(nullptr);
  }

  ConsensusRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusRegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusRegisterRequest& from);
  void MergeFrom(const ConsensusRegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusRegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusRegisterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // @@protoc_insertion_point(class_scope:ConsensusRegisterRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusRegisterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusRegisterResponse) */ {
 public:
  ConsensusRegisterResponse();
  virtual ~ConsensusRegisterResponse();

  ConsensusRegisterResponse(const ConsensusRegisterResponse& from);
  ConsensusRegisterResponse(ConsensusRegisterResponse&& from) noexcept
    : ConsensusRegisterResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusRegisterResponse& operator=(const ConsensusRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusRegisterResponse& operator=(ConsensusRegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusRegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusRegisterResponse*>(
               &_ConsensusRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ConsensusRegisterResponse* other);
  friend void swap(ConsensusRegisterResponse& a, ConsensusRegisterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusRegisterResponse* New() const final {
    return CreateMaybeMessage<ConsensusRegisterResponse>(nullptr);
  }

  ConsensusRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusRegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusRegisterResponse& from);
  void MergeFrom(const ConsensusRegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusRegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusRegisterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusRegisterResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusRegisterResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusRegisterResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusRegisterResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusRegisterResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusRegisterResponse_Status_NOT_READY;
  static inline bool Status_IsValid(int value) {
    return ConsensusRegisterResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusRegisterResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusRegisterResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusRegisterResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusRegisterResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusRegisterResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusRegisterResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ConsensusPeerInfo peers = 3;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 3;
  ::ConsensusPeerInfo* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusPeerInfo >*
      mutable_peers();
  const ::ConsensusPeerInfo& peers(int index) const;
  ::ConsensusPeerInfo* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusPeerInfo >&
      peers() const;

  // .ConsensusBlock chain_head = 2;
  bool has_chain_head() const;
  void clear_chain_head();
  static const int kChainHeadFieldNumber = 2;
  const ::ConsensusBlock& chain_head() const;
  ::ConsensusBlock* release_chain_head();
  ::ConsensusBlock* mutable_chain_head();
  void set_allocated_chain_head(::ConsensusBlock* chain_head);

  // .ConsensusPeerInfo local_peer_info = 4;
  bool has_local_peer_info() const;
  void clear_local_peer_info();
  static const int kLocalPeerInfoFieldNumber = 4;
  const ::ConsensusPeerInfo& local_peer_info() const;
  ::ConsensusPeerInfo* release_local_peer_info();
  ::ConsensusPeerInfo* mutable_local_peer_info();
  void set_allocated_local_peer_info(::ConsensusPeerInfo* local_peer_info);

  // .ConsensusRegisterResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusRegisterResponse_Status status() const;
  void set_status(::ConsensusRegisterResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusRegisterResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusPeerInfo > peers_;
  ::ConsensusBlock* chain_head_;
  ::ConsensusPeerInfo* local_peer_info_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusNotifyPeerConnected :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusNotifyPeerConnected) */ {
 public:
  ConsensusNotifyPeerConnected();
  virtual ~ConsensusNotifyPeerConnected();

  ConsensusNotifyPeerConnected(const ConsensusNotifyPeerConnected& from);
  ConsensusNotifyPeerConnected(ConsensusNotifyPeerConnected&& from) noexcept
    : ConsensusNotifyPeerConnected() {
    *this = ::std::move(from);
  }

  inline ConsensusNotifyPeerConnected& operator=(const ConsensusNotifyPeerConnected& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusNotifyPeerConnected& operator=(ConsensusNotifyPeerConnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusNotifyPeerConnected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusNotifyPeerConnected* internal_default_instance() {
    return reinterpret_cast<const ConsensusNotifyPeerConnected*>(
               &_ConsensusNotifyPeerConnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ConsensusNotifyPeerConnected* other);
  friend void swap(ConsensusNotifyPeerConnected& a, ConsensusNotifyPeerConnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusNotifyPeerConnected* New() const final {
    return CreateMaybeMessage<ConsensusNotifyPeerConnected>(nullptr);
  }

  ConsensusNotifyPeerConnected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusNotifyPeerConnected>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusNotifyPeerConnected& from);
  void MergeFrom(const ConsensusNotifyPeerConnected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusNotifyPeerConnected* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusNotifyPeerConnected";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ConsensusPeerInfo peer_info = 1;
  bool has_peer_info() const;
  void clear_peer_info();
  static const int kPeerInfoFieldNumber = 1;
  const ::ConsensusPeerInfo& peer_info() const;
  ::ConsensusPeerInfo* release_peer_info();
  ::ConsensusPeerInfo* mutable_peer_info();
  void set_allocated_peer_info(::ConsensusPeerInfo* peer_info);

  // @@protoc_insertion_point(class_scope:ConsensusNotifyPeerConnected)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ConsensusPeerInfo* peer_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusNotifyPeerDisconnected :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusNotifyPeerDisconnected) */ {
 public:
  ConsensusNotifyPeerDisconnected();
  virtual ~ConsensusNotifyPeerDisconnected();

  ConsensusNotifyPeerDisconnected(const ConsensusNotifyPeerDisconnected& from);
  ConsensusNotifyPeerDisconnected(ConsensusNotifyPeerDisconnected&& from) noexcept
    : ConsensusNotifyPeerDisconnected() {
    *this = ::std::move(from);
  }

  inline ConsensusNotifyPeerDisconnected& operator=(const ConsensusNotifyPeerDisconnected& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusNotifyPeerDisconnected& operator=(ConsensusNotifyPeerDisconnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusNotifyPeerDisconnected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusNotifyPeerDisconnected* internal_default_instance() {
    return reinterpret_cast<const ConsensusNotifyPeerDisconnected*>(
               &_ConsensusNotifyPeerDisconnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ConsensusNotifyPeerDisconnected* other);
  friend void swap(ConsensusNotifyPeerDisconnected& a, ConsensusNotifyPeerDisconnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusNotifyPeerDisconnected* New() const final {
    return CreateMaybeMessage<ConsensusNotifyPeerDisconnected>(nullptr);
  }

  ConsensusNotifyPeerDisconnected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusNotifyPeerDisconnected>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusNotifyPeerDisconnected& from);
  void MergeFrom(const ConsensusNotifyPeerDisconnected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusNotifyPeerDisconnected* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusNotifyPeerDisconnected";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes peer_id = 1;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 1;
  const std::string& peer_id() const;
  void set_peer_id(const std::string& value);
  void set_peer_id(std::string&& value);
  void set_peer_id(const char* value);
  void set_peer_id(const void* value, size_t size);
  std::string* mutable_peer_id();
  std::string* release_peer_id();
  void set_allocated_peer_id(std::string* peer_id);

  // @@protoc_insertion_point(class_scope:ConsensusNotifyPeerDisconnected)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusNotifyPeerMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusNotifyPeerMessage) */ {
 public:
  ConsensusNotifyPeerMessage();
  virtual ~ConsensusNotifyPeerMessage();

  ConsensusNotifyPeerMessage(const ConsensusNotifyPeerMessage& from);
  ConsensusNotifyPeerMessage(ConsensusNotifyPeerMessage&& from) noexcept
    : ConsensusNotifyPeerMessage() {
    *this = ::std::move(from);
  }

  inline ConsensusNotifyPeerMessage& operator=(const ConsensusNotifyPeerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusNotifyPeerMessage& operator=(ConsensusNotifyPeerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusNotifyPeerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusNotifyPeerMessage* internal_default_instance() {
    return reinterpret_cast<const ConsensusNotifyPeerMessage*>(
               &_ConsensusNotifyPeerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ConsensusNotifyPeerMessage* other);
  friend void swap(ConsensusNotifyPeerMessage& a, ConsensusNotifyPeerMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusNotifyPeerMessage* New() const final {
    return CreateMaybeMessage<ConsensusNotifyPeerMessage>(nullptr);
  }

  ConsensusNotifyPeerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusNotifyPeerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusNotifyPeerMessage& from);
  void MergeFrom(const ConsensusNotifyPeerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusNotifyPeerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusNotifyPeerMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sender_id = 2;
  void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  const std::string& sender_id() const;
  void set_sender_id(const std::string& value);
  void set_sender_id(std::string&& value);
  void set_sender_id(const char* value);
  void set_sender_id(const void* value, size_t size);
  std::string* mutable_sender_id();
  std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);

  // .ConsensusPeerMessage message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::ConsensusPeerMessage& message() const;
  ::ConsensusPeerMessage* release_message();
  ::ConsensusPeerMessage* mutable_message();
  void set_allocated_message(::ConsensusPeerMessage* message);

  // @@protoc_insertion_point(class_scope:ConsensusNotifyPeerMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
  ::ConsensusPeerMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusNotifyBlockNew :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusNotifyBlockNew) */ {
 public:
  ConsensusNotifyBlockNew();
  virtual ~ConsensusNotifyBlockNew();

  ConsensusNotifyBlockNew(const ConsensusNotifyBlockNew& from);
  ConsensusNotifyBlockNew(ConsensusNotifyBlockNew&& from) noexcept
    : ConsensusNotifyBlockNew() {
    *this = ::std::move(from);
  }

  inline ConsensusNotifyBlockNew& operator=(const ConsensusNotifyBlockNew& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusNotifyBlockNew& operator=(ConsensusNotifyBlockNew&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusNotifyBlockNew& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusNotifyBlockNew* internal_default_instance() {
    return reinterpret_cast<const ConsensusNotifyBlockNew*>(
               &_ConsensusNotifyBlockNew_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ConsensusNotifyBlockNew* other);
  friend void swap(ConsensusNotifyBlockNew& a, ConsensusNotifyBlockNew& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusNotifyBlockNew* New() const final {
    return CreateMaybeMessage<ConsensusNotifyBlockNew>(nullptr);
  }

  ConsensusNotifyBlockNew* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusNotifyBlockNew>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusNotifyBlockNew& from);
  void MergeFrom(const ConsensusNotifyBlockNew& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusNotifyBlockNew* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusNotifyBlockNew";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ConsensusBlock block = 1;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  const ::ConsensusBlock& block() const;
  ::ConsensusBlock* release_block();
  ::ConsensusBlock* mutable_block();
  void set_allocated_block(::ConsensusBlock* block);

  // @@protoc_insertion_point(class_scope:ConsensusNotifyBlockNew)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ConsensusBlock* block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusNotifyBlockValid :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusNotifyBlockValid) */ {
 public:
  ConsensusNotifyBlockValid();
  virtual ~ConsensusNotifyBlockValid();

  ConsensusNotifyBlockValid(const ConsensusNotifyBlockValid& from);
  ConsensusNotifyBlockValid(ConsensusNotifyBlockValid&& from) noexcept
    : ConsensusNotifyBlockValid() {
    *this = ::std::move(from);
  }

  inline ConsensusNotifyBlockValid& operator=(const ConsensusNotifyBlockValid& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusNotifyBlockValid& operator=(ConsensusNotifyBlockValid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusNotifyBlockValid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusNotifyBlockValid* internal_default_instance() {
    return reinterpret_cast<const ConsensusNotifyBlockValid*>(
               &_ConsensusNotifyBlockValid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ConsensusNotifyBlockValid* other);
  friend void swap(ConsensusNotifyBlockValid& a, ConsensusNotifyBlockValid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusNotifyBlockValid* New() const final {
    return CreateMaybeMessage<ConsensusNotifyBlockValid>(nullptr);
  }

  ConsensusNotifyBlockValid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusNotifyBlockValid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusNotifyBlockValid& from);
  void MergeFrom(const ConsensusNotifyBlockValid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusNotifyBlockValid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusNotifyBlockValid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const void* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);

  // @@protoc_insertion_point(class_scope:ConsensusNotifyBlockValid)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusNotifyBlockInvalid :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusNotifyBlockInvalid) */ {
 public:
  ConsensusNotifyBlockInvalid();
  virtual ~ConsensusNotifyBlockInvalid();

  ConsensusNotifyBlockInvalid(const ConsensusNotifyBlockInvalid& from);
  ConsensusNotifyBlockInvalid(ConsensusNotifyBlockInvalid&& from) noexcept
    : ConsensusNotifyBlockInvalid() {
    *this = ::std::move(from);
  }

  inline ConsensusNotifyBlockInvalid& operator=(const ConsensusNotifyBlockInvalid& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusNotifyBlockInvalid& operator=(ConsensusNotifyBlockInvalid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusNotifyBlockInvalid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusNotifyBlockInvalid* internal_default_instance() {
    return reinterpret_cast<const ConsensusNotifyBlockInvalid*>(
               &_ConsensusNotifyBlockInvalid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ConsensusNotifyBlockInvalid* other);
  friend void swap(ConsensusNotifyBlockInvalid& a, ConsensusNotifyBlockInvalid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusNotifyBlockInvalid* New() const final {
    return CreateMaybeMessage<ConsensusNotifyBlockInvalid>(nullptr);
  }

  ConsensusNotifyBlockInvalid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusNotifyBlockInvalid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusNotifyBlockInvalid& from);
  void MergeFrom(const ConsensusNotifyBlockInvalid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusNotifyBlockInvalid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusNotifyBlockInvalid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const void* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);

  // @@protoc_insertion_point(class_scope:ConsensusNotifyBlockInvalid)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusNotifyBlockCommit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusNotifyBlockCommit) */ {
 public:
  ConsensusNotifyBlockCommit();
  virtual ~ConsensusNotifyBlockCommit();

  ConsensusNotifyBlockCommit(const ConsensusNotifyBlockCommit& from);
  ConsensusNotifyBlockCommit(ConsensusNotifyBlockCommit&& from) noexcept
    : ConsensusNotifyBlockCommit() {
    *this = ::std::move(from);
  }

  inline ConsensusNotifyBlockCommit& operator=(const ConsensusNotifyBlockCommit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusNotifyBlockCommit& operator=(ConsensusNotifyBlockCommit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusNotifyBlockCommit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusNotifyBlockCommit* internal_default_instance() {
    return reinterpret_cast<const ConsensusNotifyBlockCommit*>(
               &_ConsensusNotifyBlockCommit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ConsensusNotifyBlockCommit* other);
  friend void swap(ConsensusNotifyBlockCommit& a, ConsensusNotifyBlockCommit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusNotifyBlockCommit* New() const final {
    return CreateMaybeMessage<ConsensusNotifyBlockCommit>(nullptr);
  }

  ConsensusNotifyBlockCommit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusNotifyBlockCommit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusNotifyBlockCommit& from);
  void MergeFrom(const ConsensusNotifyBlockCommit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusNotifyBlockCommit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusNotifyBlockCommit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const void* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);

  // @@protoc_insertion_point(class_scope:ConsensusNotifyBlockCommit)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusNotifyAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusNotifyAck) */ {
 public:
  ConsensusNotifyAck();
  virtual ~ConsensusNotifyAck();

  ConsensusNotifyAck(const ConsensusNotifyAck& from);
  ConsensusNotifyAck(ConsensusNotifyAck&& from) noexcept
    : ConsensusNotifyAck() {
    *this = ::std::move(from);
  }

  inline ConsensusNotifyAck& operator=(const ConsensusNotifyAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusNotifyAck& operator=(ConsensusNotifyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusNotifyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusNotifyAck* internal_default_instance() {
    return reinterpret_cast<const ConsensusNotifyAck*>(
               &_ConsensusNotifyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ConsensusNotifyAck* other);
  friend void swap(ConsensusNotifyAck& a, ConsensusNotifyAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusNotifyAck* New() const final {
    return CreateMaybeMessage<ConsensusNotifyAck>(nullptr);
  }

  ConsensusNotifyAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusNotifyAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusNotifyAck& from);
  void MergeFrom(const ConsensusNotifyAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusNotifyAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusNotifyAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ConsensusNotifyAck)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusSendToRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusSendToRequest) */ {
 public:
  ConsensusSendToRequest();
  virtual ~ConsensusSendToRequest();

  ConsensusSendToRequest(const ConsensusSendToRequest& from);
  ConsensusSendToRequest(ConsensusSendToRequest&& from) noexcept
    : ConsensusSendToRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusSendToRequest& operator=(const ConsensusSendToRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusSendToRequest& operator=(ConsensusSendToRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusSendToRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusSendToRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusSendToRequest*>(
               &_ConsensusSendToRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ConsensusSendToRequest* other);
  friend void swap(ConsensusSendToRequest& a, ConsensusSendToRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusSendToRequest* New() const final {
    return CreateMaybeMessage<ConsensusSendToRequest>(nullptr);
  }

  ConsensusSendToRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusSendToRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusSendToRequest& from);
  void MergeFrom(const ConsensusSendToRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusSendToRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusSendToRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // bytes receiver_id = 2;
  void clear_receiver_id();
  static const int kReceiverIdFieldNumber = 2;
  const std::string& receiver_id() const;
  void set_receiver_id(const std::string& value);
  void set_receiver_id(std::string&& value);
  void set_receiver_id(const char* value);
  void set_receiver_id(const void* value, size_t size);
  std::string* mutable_receiver_id();
  std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);

  // string message_type = 3;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 3;
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);

  // @@protoc_insertion_point(class_scope:ConsensusSendToRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusSendToResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusSendToResponse) */ {
 public:
  ConsensusSendToResponse();
  virtual ~ConsensusSendToResponse();

  ConsensusSendToResponse(const ConsensusSendToResponse& from);
  ConsensusSendToResponse(ConsensusSendToResponse&& from) noexcept
    : ConsensusSendToResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusSendToResponse& operator=(const ConsensusSendToResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusSendToResponse& operator=(ConsensusSendToResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusSendToResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusSendToResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusSendToResponse*>(
               &_ConsensusSendToResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ConsensusSendToResponse* other);
  friend void swap(ConsensusSendToResponse& a, ConsensusSendToResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusSendToResponse* New() const final {
    return CreateMaybeMessage<ConsensusSendToResponse>(nullptr);
  }

  ConsensusSendToResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusSendToResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusSendToResponse& from);
  void MergeFrom(const ConsensusSendToResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusSendToResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusSendToResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusSendToResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusSendToResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusSendToResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusSendToResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusSendToResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusSendToResponse_Status_NOT_READY;
  static constexpr Status UNKNOWN_PEER =
    ConsensusSendToResponse_Status_UNKNOWN_PEER;
  static inline bool Status_IsValid(int value) {
    return ConsensusSendToResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusSendToResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusSendToResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusSendToResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusSendToResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusSendToResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusSendToResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ConsensusSendToResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusSendToResponse_Status status() const;
  void set_status(::ConsensusSendToResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusSendToResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusBroadcastRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusBroadcastRequest) */ {
 public:
  ConsensusBroadcastRequest();
  virtual ~ConsensusBroadcastRequest();

  ConsensusBroadcastRequest(const ConsensusBroadcastRequest& from);
  ConsensusBroadcastRequest(ConsensusBroadcastRequest&& from) noexcept
    : ConsensusBroadcastRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusBroadcastRequest& operator=(const ConsensusBroadcastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusBroadcastRequest& operator=(ConsensusBroadcastRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusBroadcastRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusBroadcastRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusBroadcastRequest*>(
               &_ConsensusBroadcastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ConsensusBroadcastRequest* other);
  friend void swap(ConsensusBroadcastRequest& a, ConsensusBroadcastRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusBroadcastRequest* New() const final {
    return CreateMaybeMessage<ConsensusBroadcastRequest>(nullptr);
  }

  ConsensusBroadcastRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusBroadcastRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusBroadcastRequest& from);
  void MergeFrom(const ConsensusBroadcastRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusBroadcastRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusBroadcastRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // string message_type = 2;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 2;
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);

  // @@protoc_insertion_point(class_scope:ConsensusBroadcastRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusBroadcastResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusBroadcastResponse) */ {
 public:
  ConsensusBroadcastResponse();
  virtual ~ConsensusBroadcastResponse();

  ConsensusBroadcastResponse(const ConsensusBroadcastResponse& from);
  ConsensusBroadcastResponse(ConsensusBroadcastResponse&& from) noexcept
    : ConsensusBroadcastResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusBroadcastResponse& operator=(const ConsensusBroadcastResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusBroadcastResponse& operator=(ConsensusBroadcastResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusBroadcastResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusBroadcastResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusBroadcastResponse*>(
               &_ConsensusBroadcastResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ConsensusBroadcastResponse* other);
  friend void swap(ConsensusBroadcastResponse& a, ConsensusBroadcastResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusBroadcastResponse* New() const final {
    return CreateMaybeMessage<ConsensusBroadcastResponse>(nullptr);
  }

  ConsensusBroadcastResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusBroadcastResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusBroadcastResponse& from);
  void MergeFrom(const ConsensusBroadcastResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusBroadcastResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusBroadcastResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusBroadcastResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusBroadcastResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusBroadcastResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusBroadcastResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusBroadcastResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusBroadcastResponse_Status_NOT_READY;
  static inline bool Status_IsValid(int value) {
    return ConsensusBroadcastResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusBroadcastResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusBroadcastResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusBroadcastResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusBroadcastResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusBroadcastResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusBroadcastResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ConsensusBroadcastResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusBroadcastResponse_Status status() const;
  void set_status(::ConsensusBroadcastResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusBroadcastResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusInitializeBlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusInitializeBlockRequest) */ {
 public:
  ConsensusInitializeBlockRequest();
  virtual ~ConsensusInitializeBlockRequest();

  ConsensusInitializeBlockRequest(const ConsensusInitializeBlockRequest& from);
  ConsensusInitializeBlockRequest(ConsensusInitializeBlockRequest&& from) noexcept
    : ConsensusInitializeBlockRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusInitializeBlockRequest& operator=(const ConsensusInitializeBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusInitializeBlockRequest& operator=(ConsensusInitializeBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusInitializeBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusInitializeBlockRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusInitializeBlockRequest*>(
               &_ConsensusInitializeBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ConsensusInitializeBlockRequest* other);
  friend void swap(ConsensusInitializeBlockRequest& a, ConsensusInitializeBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusInitializeBlockRequest* New() const final {
    return CreateMaybeMessage<ConsensusInitializeBlockRequest>(nullptr);
  }

  ConsensusInitializeBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusInitializeBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusInitializeBlockRequest& from);
  void MergeFrom(const ConsensusInitializeBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusInitializeBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusInitializeBlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes previous_id = 1;
  void clear_previous_id();
  static const int kPreviousIdFieldNumber = 1;
  const std::string& previous_id() const;
  void set_previous_id(const std::string& value);
  void set_previous_id(std::string&& value);
  void set_previous_id(const char* value);
  void set_previous_id(const void* value, size_t size);
  std::string* mutable_previous_id();
  std::string* release_previous_id();
  void set_allocated_previous_id(std::string* previous_id);

  // @@protoc_insertion_point(class_scope:ConsensusInitializeBlockRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusInitializeBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusInitializeBlockResponse) */ {
 public:
  ConsensusInitializeBlockResponse();
  virtual ~ConsensusInitializeBlockResponse();

  ConsensusInitializeBlockResponse(const ConsensusInitializeBlockResponse& from);
  ConsensusInitializeBlockResponse(ConsensusInitializeBlockResponse&& from) noexcept
    : ConsensusInitializeBlockResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusInitializeBlockResponse& operator=(const ConsensusInitializeBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusInitializeBlockResponse& operator=(ConsensusInitializeBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusInitializeBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusInitializeBlockResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusInitializeBlockResponse*>(
               &_ConsensusInitializeBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(ConsensusInitializeBlockResponse* other);
  friend void swap(ConsensusInitializeBlockResponse& a, ConsensusInitializeBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusInitializeBlockResponse* New() const final {
    return CreateMaybeMessage<ConsensusInitializeBlockResponse>(nullptr);
  }

  ConsensusInitializeBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusInitializeBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusInitializeBlockResponse& from);
  void MergeFrom(const ConsensusInitializeBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusInitializeBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusInitializeBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusInitializeBlockResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusInitializeBlockResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusInitializeBlockResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusInitializeBlockResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusInitializeBlockResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusInitializeBlockResponse_Status_NOT_READY;
  static constexpr Status INVALID_STATE =
    ConsensusInitializeBlockResponse_Status_INVALID_STATE;
  static constexpr Status UNKNOWN_BLOCK =
    ConsensusInitializeBlockResponse_Status_UNKNOWN_BLOCK;
  static inline bool Status_IsValid(int value) {
    return ConsensusInitializeBlockResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusInitializeBlockResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusInitializeBlockResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusInitializeBlockResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusInitializeBlockResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusInitializeBlockResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusInitializeBlockResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ConsensusInitializeBlockResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusInitializeBlockResponse_Status status() const;
  void set_status(::ConsensusInitializeBlockResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusInitializeBlockResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusSummarizeBlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusSummarizeBlockRequest) */ {
 public:
  ConsensusSummarizeBlockRequest();
  virtual ~ConsensusSummarizeBlockRequest();

  ConsensusSummarizeBlockRequest(const ConsensusSummarizeBlockRequest& from);
  ConsensusSummarizeBlockRequest(ConsensusSummarizeBlockRequest&& from) noexcept
    : ConsensusSummarizeBlockRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusSummarizeBlockRequest& operator=(const ConsensusSummarizeBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusSummarizeBlockRequest& operator=(ConsensusSummarizeBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusSummarizeBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusSummarizeBlockRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusSummarizeBlockRequest*>(
               &_ConsensusSummarizeBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(ConsensusSummarizeBlockRequest* other);
  friend void swap(ConsensusSummarizeBlockRequest& a, ConsensusSummarizeBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusSummarizeBlockRequest* New() const final {
    return CreateMaybeMessage<ConsensusSummarizeBlockRequest>(nullptr);
  }

  ConsensusSummarizeBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusSummarizeBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusSummarizeBlockRequest& from);
  void MergeFrom(const ConsensusSummarizeBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusSummarizeBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusSummarizeBlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ConsensusSummarizeBlockRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusSummarizeBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusSummarizeBlockResponse) */ {
 public:
  ConsensusSummarizeBlockResponse();
  virtual ~ConsensusSummarizeBlockResponse();

  ConsensusSummarizeBlockResponse(const ConsensusSummarizeBlockResponse& from);
  ConsensusSummarizeBlockResponse(ConsensusSummarizeBlockResponse&& from) noexcept
    : ConsensusSummarizeBlockResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusSummarizeBlockResponse& operator=(const ConsensusSummarizeBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusSummarizeBlockResponse& operator=(ConsensusSummarizeBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusSummarizeBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusSummarizeBlockResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusSummarizeBlockResponse*>(
               &_ConsensusSummarizeBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ConsensusSummarizeBlockResponse* other);
  friend void swap(ConsensusSummarizeBlockResponse& a, ConsensusSummarizeBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusSummarizeBlockResponse* New() const final {
    return CreateMaybeMessage<ConsensusSummarizeBlockResponse>(nullptr);
  }

  ConsensusSummarizeBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusSummarizeBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusSummarizeBlockResponse& from);
  void MergeFrom(const ConsensusSummarizeBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusSummarizeBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusSummarizeBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusSummarizeBlockResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusSummarizeBlockResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusSummarizeBlockResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusSummarizeBlockResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusSummarizeBlockResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusSummarizeBlockResponse_Status_NOT_READY;
  static constexpr Status INVALID_STATE =
    ConsensusSummarizeBlockResponse_Status_INVALID_STATE;
  static constexpr Status BLOCK_NOT_READY =
    ConsensusSummarizeBlockResponse_Status_BLOCK_NOT_READY;
  static inline bool Status_IsValid(int value) {
    return ConsensusSummarizeBlockResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusSummarizeBlockResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusSummarizeBlockResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusSummarizeBlockResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusSummarizeBlockResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusSummarizeBlockResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusSummarizeBlockResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes summary = 2;
  void clear_summary();
  static const int kSummaryFieldNumber = 2;
  const std::string& summary() const;
  void set_summary(const std::string& value);
  void set_summary(std::string&& value);
  void set_summary(const char* value);
  void set_summary(const void* value, size_t size);
  std::string* mutable_summary();
  std::string* release_summary();
  void set_allocated_summary(std::string* summary);

  // .ConsensusSummarizeBlockResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusSummarizeBlockResponse_Status status() const;
  void set_status(::ConsensusSummarizeBlockResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusSummarizeBlockResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusFinalizeBlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusFinalizeBlockRequest) */ {
 public:
  ConsensusFinalizeBlockRequest();
  virtual ~ConsensusFinalizeBlockRequest();

  ConsensusFinalizeBlockRequest(const ConsensusFinalizeBlockRequest& from);
  ConsensusFinalizeBlockRequest(ConsensusFinalizeBlockRequest&& from) noexcept
    : ConsensusFinalizeBlockRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusFinalizeBlockRequest& operator=(const ConsensusFinalizeBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusFinalizeBlockRequest& operator=(ConsensusFinalizeBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusFinalizeBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusFinalizeBlockRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusFinalizeBlockRequest*>(
               &_ConsensusFinalizeBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(ConsensusFinalizeBlockRequest* other);
  friend void swap(ConsensusFinalizeBlockRequest& a, ConsensusFinalizeBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusFinalizeBlockRequest* New() const final {
    return CreateMaybeMessage<ConsensusFinalizeBlockRequest>(nullptr);
  }

  ConsensusFinalizeBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusFinalizeBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusFinalizeBlockRequest& from);
  void MergeFrom(const ConsensusFinalizeBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusFinalizeBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusFinalizeBlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:ConsensusFinalizeBlockRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusFinalizeBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusFinalizeBlockResponse) */ {
 public:
  ConsensusFinalizeBlockResponse();
  virtual ~ConsensusFinalizeBlockResponse();

  ConsensusFinalizeBlockResponse(const ConsensusFinalizeBlockResponse& from);
  ConsensusFinalizeBlockResponse(ConsensusFinalizeBlockResponse&& from) noexcept
    : ConsensusFinalizeBlockResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusFinalizeBlockResponse& operator=(const ConsensusFinalizeBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusFinalizeBlockResponse& operator=(ConsensusFinalizeBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusFinalizeBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusFinalizeBlockResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusFinalizeBlockResponse*>(
               &_ConsensusFinalizeBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(ConsensusFinalizeBlockResponse* other);
  friend void swap(ConsensusFinalizeBlockResponse& a, ConsensusFinalizeBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusFinalizeBlockResponse* New() const final {
    return CreateMaybeMessage<ConsensusFinalizeBlockResponse>(nullptr);
  }

  ConsensusFinalizeBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusFinalizeBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusFinalizeBlockResponse& from);
  void MergeFrom(const ConsensusFinalizeBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusFinalizeBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusFinalizeBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusFinalizeBlockResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusFinalizeBlockResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusFinalizeBlockResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusFinalizeBlockResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusFinalizeBlockResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusFinalizeBlockResponse_Status_NOT_READY;
  static constexpr Status INVALID_STATE =
    ConsensusFinalizeBlockResponse_Status_INVALID_STATE;
  static constexpr Status BLOCK_NOT_READY =
    ConsensusFinalizeBlockResponse_Status_BLOCK_NOT_READY;
  static inline bool Status_IsValid(int value) {
    return ConsensusFinalizeBlockResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusFinalizeBlockResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusFinalizeBlockResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusFinalizeBlockResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusFinalizeBlockResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusFinalizeBlockResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusFinalizeBlockResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes block_id = 2;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 2;
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const void* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);

  // .ConsensusFinalizeBlockResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusFinalizeBlockResponse_Status status() const;
  void set_status(::ConsensusFinalizeBlockResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusFinalizeBlockResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusCancelBlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusCancelBlockRequest) */ {
 public:
  ConsensusCancelBlockRequest();
  virtual ~ConsensusCancelBlockRequest();

  ConsensusCancelBlockRequest(const ConsensusCancelBlockRequest& from);
  ConsensusCancelBlockRequest(ConsensusCancelBlockRequest&& from) noexcept
    : ConsensusCancelBlockRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusCancelBlockRequest& operator=(const ConsensusCancelBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusCancelBlockRequest& operator=(ConsensusCancelBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusCancelBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusCancelBlockRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusCancelBlockRequest*>(
               &_ConsensusCancelBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(ConsensusCancelBlockRequest* other);
  friend void swap(ConsensusCancelBlockRequest& a, ConsensusCancelBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusCancelBlockRequest* New() const final {
    return CreateMaybeMessage<ConsensusCancelBlockRequest>(nullptr);
  }

  ConsensusCancelBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusCancelBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusCancelBlockRequest& from);
  void MergeFrom(const ConsensusCancelBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusCancelBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusCancelBlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ConsensusCancelBlockRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusCancelBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusCancelBlockResponse) */ {
 public:
  ConsensusCancelBlockResponse();
  virtual ~ConsensusCancelBlockResponse();

  ConsensusCancelBlockResponse(const ConsensusCancelBlockResponse& from);
  ConsensusCancelBlockResponse(ConsensusCancelBlockResponse&& from) noexcept
    : ConsensusCancelBlockResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusCancelBlockResponse& operator=(const ConsensusCancelBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusCancelBlockResponse& operator=(ConsensusCancelBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusCancelBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusCancelBlockResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusCancelBlockResponse*>(
               &_ConsensusCancelBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(ConsensusCancelBlockResponse* other);
  friend void swap(ConsensusCancelBlockResponse& a, ConsensusCancelBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusCancelBlockResponse* New() const final {
    return CreateMaybeMessage<ConsensusCancelBlockResponse>(nullptr);
  }

  ConsensusCancelBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusCancelBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusCancelBlockResponse& from);
  void MergeFrom(const ConsensusCancelBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusCancelBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusCancelBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusCancelBlockResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusCancelBlockResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusCancelBlockResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusCancelBlockResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusCancelBlockResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusCancelBlockResponse_Status_NOT_READY;
  static constexpr Status INVALID_STATE =
    ConsensusCancelBlockResponse_Status_INVALID_STATE;
  static inline bool Status_IsValid(int value) {
    return ConsensusCancelBlockResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusCancelBlockResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusCancelBlockResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusCancelBlockResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusCancelBlockResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusCancelBlockResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusCancelBlockResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ConsensusCancelBlockResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusCancelBlockResponse_Status status() const;
  void set_status(::ConsensusCancelBlockResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusCancelBlockResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusCheckBlocksRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusCheckBlocksRequest) */ {
 public:
  ConsensusCheckBlocksRequest();
  virtual ~ConsensusCheckBlocksRequest();

  ConsensusCheckBlocksRequest(const ConsensusCheckBlocksRequest& from);
  ConsensusCheckBlocksRequest(ConsensusCheckBlocksRequest&& from) noexcept
    : ConsensusCheckBlocksRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusCheckBlocksRequest& operator=(const ConsensusCheckBlocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusCheckBlocksRequest& operator=(ConsensusCheckBlocksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusCheckBlocksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusCheckBlocksRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusCheckBlocksRequest*>(
               &_ConsensusCheckBlocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(ConsensusCheckBlocksRequest* other);
  friend void swap(ConsensusCheckBlocksRequest& a, ConsensusCheckBlocksRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusCheckBlocksRequest* New() const final {
    return CreateMaybeMessage<ConsensusCheckBlocksRequest>(nullptr);
  }

  ConsensusCheckBlocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusCheckBlocksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusCheckBlocksRequest& from);
  void MergeFrom(const ConsensusCheckBlocksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusCheckBlocksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusCheckBlocksRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes block_ids = 1;
  int block_ids_size() const;
  void clear_block_ids();
  static const int kBlockIdsFieldNumber = 1;
  const std::string& block_ids(int index) const;
  std::string* mutable_block_ids(int index);
  void set_block_ids(int index, const std::string& value);
  void set_block_ids(int index, std::string&& value);
  void set_block_ids(int index, const char* value);
  void set_block_ids(int index, const void* value, size_t size);
  std::string* add_block_ids();
  void add_block_ids(const std::string& value);
  void add_block_ids(std::string&& value);
  void add_block_ids(const char* value);
  void add_block_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& block_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_block_ids();

  // @@protoc_insertion_point(class_scope:ConsensusCheckBlocksRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> block_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusCheckBlocksResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusCheckBlocksResponse) */ {
 public:
  ConsensusCheckBlocksResponse();
  virtual ~ConsensusCheckBlocksResponse();

  ConsensusCheckBlocksResponse(const ConsensusCheckBlocksResponse& from);
  ConsensusCheckBlocksResponse(ConsensusCheckBlocksResponse&& from) noexcept
    : ConsensusCheckBlocksResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusCheckBlocksResponse& operator=(const ConsensusCheckBlocksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusCheckBlocksResponse& operator=(ConsensusCheckBlocksResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusCheckBlocksResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusCheckBlocksResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusCheckBlocksResponse*>(
               &_ConsensusCheckBlocksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(ConsensusCheckBlocksResponse* other);
  friend void swap(ConsensusCheckBlocksResponse& a, ConsensusCheckBlocksResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusCheckBlocksResponse* New() const final {
    return CreateMaybeMessage<ConsensusCheckBlocksResponse>(nullptr);
  }

  ConsensusCheckBlocksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusCheckBlocksResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusCheckBlocksResponse& from);
  void MergeFrom(const ConsensusCheckBlocksResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusCheckBlocksResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusCheckBlocksResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusCheckBlocksResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusCheckBlocksResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusCheckBlocksResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusCheckBlocksResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusCheckBlocksResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusCheckBlocksResponse_Status_NOT_READY;
  static constexpr Status UNKNOWN_BLOCK =
    ConsensusCheckBlocksResponse_Status_UNKNOWN_BLOCK;
  static inline bool Status_IsValid(int value) {
    return ConsensusCheckBlocksResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusCheckBlocksResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusCheckBlocksResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusCheckBlocksResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusCheckBlocksResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusCheckBlocksResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusCheckBlocksResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ConsensusCheckBlocksResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusCheckBlocksResponse_Status status() const;
  void set_status(::ConsensusCheckBlocksResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusCheckBlocksResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusCommitBlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusCommitBlockRequest) */ {
 public:
  ConsensusCommitBlockRequest();
  virtual ~ConsensusCommitBlockRequest();

  ConsensusCommitBlockRequest(const ConsensusCommitBlockRequest& from);
  ConsensusCommitBlockRequest(ConsensusCommitBlockRequest&& from) noexcept
    : ConsensusCommitBlockRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusCommitBlockRequest& operator=(const ConsensusCommitBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusCommitBlockRequest& operator=(ConsensusCommitBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusCommitBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusCommitBlockRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusCommitBlockRequest*>(
               &_ConsensusCommitBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(ConsensusCommitBlockRequest* other);
  friend void swap(ConsensusCommitBlockRequest& a, ConsensusCommitBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusCommitBlockRequest* New() const final {
    return CreateMaybeMessage<ConsensusCommitBlockRequest>(nullptr);
  }

  ConsensusCommitBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusCommitBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusCommitBlockRequest& from);
  void MergeFrom(const ConsensusCommitBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusCommitBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusCommitBlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const void* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);

  // @@protoc_insertion_point(class_scope:ConsensusCommitBlockRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusCommitBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusCommitBlockResponse) */ {
 public:
  ConsensusCommitBlockResponse();
  virtual ~ConsensusCommitBlockResponse();

  ConsensusCommitBlockResponse(const ConsensusCommitBlockResponse& from);
  ConsensusCommitBlockResponse(ConsensusCommitBlockResponse&& from) noexcept
    : ConsensusCommitBlockResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusCommitBlockResponse& operator=(const ConsensusCommitBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusCommitBlockResponse& operator=(ConsensusCommitBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusCommitBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusCommitBlockResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusCommitBlockResponse*>(
               &_ConsensusCommitBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(ConsensusCommitBlockResponse* other);
  friend void swap(ConsensusCommitBlockResponse& a, ConsensusCommitBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusCommitBlockResponse* New() const final {
    return CreateMaybeMessage<ConsensusCommitBlockResponse>(nullptr);
  }

  ConsensusCommitBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusCommitBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusCommitBlockResponse& from);
  void MergeFrom(const ConsensusCommitBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusCommitBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusCommitBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusCommitBlockResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusCommitBlockResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusCommitBlockResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusCommitBlockResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusCommitBlockResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusCommitBlockResponse_Status_NOT_READY;
  static constexpr Status UNKNOWN_BLOCK =
    ConsensusCommitBlockResponse_Status_UNKNOWN_BLOCK;
  static inline bool Status_IsValid(int value) {
    return ConsensusCommitBlockResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusCommitBlockResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusCommitBlockResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusCommitBlockResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusCommitBlockResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusCommitBlockResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusCommitBlockResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ConsensusCommitBlockResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusCommitBlockResponse_Status status() const;
  void set_status(::ConsensusCommitBlockResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusCommitBlockResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusIgnoreBlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusIgnoreBlockRequest) */ {
 public:
  ConsensusIgnoreBlockRequest();
  virtual ~ConsensusIgnoreBlockRequest();

  ConsensusIgnoreBlockRequest(const ConsensusIgnoreBlockRequest& from);
  ConsensusIgnoreBlockRequest(ConsensusIgnoreBlockRequest&& from) noexcept
    : ConsensusIgnoreBlockRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusIgnoreBlockRequest& operator=(const ConsensusIgnoreBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusIgnoreBlockRequest& operator=(ConsensusIgnoreBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusIgnoreBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusIgnoreBlockRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusIgnoreBlockRequest*>(
               &_ConsensusIgnoreBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(ConsensusIgnoreBlockRequest* other);
  friend void swap(ConsensusIgnoreBlockRequest& a, ConsensusIgnoreBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusIgnoreBlockRequest* New() const final {
    return CreateMaybeMessage<ConsensusIgnoreBlockRequest>(nullptr);
  }

  ConsensusIgnoreBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusIgnoreBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusIgnoreBlockRequest& from);
  void MergeFrom(const ConsensusIgnoreBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusIgnoreBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusIgnoreBlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const void* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);

  // @@protoc_insertion_point(class_scope:ConsensusIgnoreBlockRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusIgnoreBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusIgnoreBlockResponse) */ {
 public:
  ConsensusIgnoreBlockResponse();
  virtual ~ConsensusIgnoreBlockResponse();

  ConsensusIgnoreBlockResponse(const ConsensusIgnoreBlockResponse& from);
  ConsensusIgnoreBlockResponse(ConsensusIgnoreBlockResponse&& from) noexcept
    : ConsensusIgnoreBlockResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusIgnoreBlockResponse& operator=(const ConsensusIgnoreBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusIgnoreBlockResponse& operator=(ConsensusIgnoreBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusIgnoreBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusIgnoreBlockResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusIgnoreBlockResponse*>(
               &_ConsensusIgnoreBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(ConsensusIgnoreBlockResponse* other);
  friend void swap(ConsensusIgnoreBlockResponse& a, ConsensusIgnoreBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusIgnoreBlockResponse* New() const final {
    return CreateMaybeMessage<ConsensusIgnoreBlockResponse>(nullptr);
  }

  ConsensusIgnoreBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusIgnoreBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusIgnoreBlockResponse& from);
  void MergeFrom(const ConsensusIgnoreBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusIgnoreBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusIgnoreBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusIgnoreBlockResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusIgnoreBlockResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusIgnoreBlockResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusIgnoreBlockResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusIgnoreBlockResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusIgnoreBlockResponse_Status_NOT_READY;
  static constexpr Status UNKNOWN_BLOCK =
    ConsensusIgnoreBlockResponse_Status_UNKNOWN_BLOCK;
  static inline bool Status_IsValid(int value) {
    return ConsensusIgnoreBlockResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusIgnoreBlockResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusIgnoreBlockResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusIgnoreBlockResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusIgnoreBlockResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusIgnoreBlockResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusIgnoreBlockResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ConsensusIgnoreBlockResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusIgnoreBlockResponse_Status status() const;
  void set_status(::ConsensusIgnoreBlockResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusIgnoreBlockResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusFailBlockRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusFailBlockRequest) */ {
 public:
  ConsensusFailBlockRequest();
  virtual ~ConsensusFailBlockRequest();

  ConsensusFailBlockRequest(const ConsensusFailBlockRequest& from);
  ConsensusFailBlockRequest(ConsensusFailBlockRequest&& from) noexcept
    : ConsensusFailBlockRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusFailBlockRequest& operator=(const ConsensusFailBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusFailBlockRequest& operator=(ConsensusFailBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusFailBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusFailBlockRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusFailBlockRequest*>(
               &_ConsensusFailBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(ConsensusFailBlockRequest* other);
  friend void swap(ConsensusFailBlockRequest& a, ConsensusFailBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusFailBlockRequest* New() const final {
    return CreateMaybeMessage<ConsensusFailBlockRequest>(nullptr);
  }

  ConsensusFailBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusFailBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusFailBlockRequest& from);
  void MergeFrom(const ConsensusFailBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusFailBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusFailBlockRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const void* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);

  // @@protoc_insertion_point(class_scope:ConsensusFailBlockRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusFailBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusFailBlockResponse) */ {
 public:
  ConsensusFailBlockResponse();
  virtual ~ConsensusFailBlockResponse();

  ConsensusFailBlockResponse(const ConsensusFailBlockResponse& from);
  ConsensusFailBlockResponse(ConsensusFailBlockResponse&& from) noexcept
    : ConsensusFailBlockResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusFailBlockResponse& operator=(const ConsensusFailBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusFailBlockResponse& operator=(ConsensusFailBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusFailBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusFailBlockResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusFailBlockResponse*>(
               &_ConsensusFailBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(ConsensusFailBlockResponse* other);
  friend void swap(ConsensusFailBlockResponse& a, ConsensusFailBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusFailBlockResponse* New() const final {
    return CreateMaybeMessage<ConsensusFailBlockResponse>(nullptr);
  }

  ConsensusFailBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusFailBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusFailBlockResponse& from);
  void MergeFrom(const ConsensusFailBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusFailBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusFailBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusFailBlockResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusFailBlockResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusFailBlockResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusFailBlockResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusFailBlockResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusFailBlockResponse_Status_NOT_READY;
  static constexpr Status UNKNOWN_BLOCK =
    ConsensusFailBlockResponse_Status_UNKNOWN_BLOCK;
  static inline bool Status_IsValid(int value) {
    return ConsensusFailBlockResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusFailBlockResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusFailBlockResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusFailBlockResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusFailBlockResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusFailBlockResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusFailBlockResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ConsensusFailBlockResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusFailBlockResponse_Status status() const;
  void set_status(::ConsensusFailBlockResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusFailBlockResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusBlocksGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusBlocksGetRequest) */ {
 public:
  ConsensusBlocksGetRequest();
  virtual ~ConsensusBlocksGetRequest();

  ConsensusBlocksGetRequest(const ConsensusBlocksGetRequest& from);
  ConsensusBlocksGetRequest(ConsensusBlocksGetRequest&& from) noexcept
    : ConsensusBlocksGetRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusBlocksGetRequest& operator=(const ConsensusBlocksGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusBlocksGetRequest& operator=(ConsensusBlocksGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusBlocksGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusBlocksGetRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusBlocksGetRequest*>(
               &_ConsensusBlocksGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(ConsensusBlocksGetRequest* other);
  friend void swap(ConsensusBlocksGetRequest& a, ConsensusBlocksGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusBlocksGetRequest* New() const final {
    return CreateMaybeMessage<ConsensusBlocksGetRequest>(nullptr);
  }

  ConsensusBlocksGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusBlocksGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusBlocksGetRequest& from);
  void MergeFrom(const ConsensusBlocksGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusBlocksGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusBlocksGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes block_ids = 1;
  int block_ids_size() const;
  void clear_block_ids();
  static const int kBlockIdsFieldNumber = 1;
  const std::string& block_ids(int index) const;
  std::string* mutable_block_ids(int index);
  void set_block_ids(int index, const std::string& value);
  void set_block_ids(int index, std::string&& value);
  void set_block_ids(int index, const char* value);
  void set_block_ids(int index, const void* value, size_t size);
  std::string* add_block_ids();
  void add_block_ids(const std::string& value);
  void add_block_ids(std::string&& value);
  void add_block_ids(const char* value);
  void add_block_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& block_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_block_ids();

  // @@protoc_insertion_point(class_scope:ConsensusBlocksGetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> block_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusBlocksGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusBlocksGetResponse) */ {
 public:
  ConsensusBlocksGetResponse();
  virtual ~ConsensusBlocksGetResponse();

  ConsensusBlocksGetResponse(const ConsensusBlocksGetResponse& from);
  ConsensusBlocksGetResponse(ConsensusBlocksGetResponse&& from) noexcept
    : ConsensusBlocksGetResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusBlocksGetResponse& operator=(const ConsensusBlocksGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusBlocksGetResponse& operator=(ConsensusBlocksGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusBlocksGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusBlocksGetResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusBlocksGetResponse*>(
               &_ConsensusBlocksGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(ConsensusBlocksGetResponse* other);
  friend void swap(ConsensusBlocksGetResponse& a, ConsensusBlocksGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusBlocksGetResponse* New() const final {
    return CreateMaybeMessage<ConsensusBlocksGetResponse>(nullptr);
  }

  ConsensusBlocksGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusBlocksGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusBlocksGetResponse& from);
  void MergeFrom(const ConsensusBlocksGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusBlocksGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusBlocksGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusBlocksGetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusBlocksGetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusBlocksGetResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusBlocksGetResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusBlocksGetResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusBlocksGetResponse_Status_NOT_READY;
  static constexpr Status UNKNOWN_BLOCK =
    ConsensusBlocksGetResponse_Status_UNKNOWN_BLOCK;
  static inline bool Status_IsValid(int value) {
    return ConsensusBlocksGetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusBlocksGetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusBlocksGetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusBlocksGetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusBlocksGetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusBlocksGetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusBlocksGetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ConsensusBlock blocks = 2;
  int blocks_size() const;
  void clear_blocks();
  static const int kBlocksFieldNumber = 2;
  ::ConsensusBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusBlock >*
      mutable_blocks();
  const ::ConsensusBlock& blocks(int index) const;
  ::ConsensusBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusBlock >&
      blocks() const;

  // .ConsensusBlocksGetResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusBlocksGetResponse_Status status() const;
  void set_status(::ConsensusBlocksGetResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusBlocksGetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusBlock > blocks_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusChainHeadGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusChainHeadGetRequest) */ {
 public:
  ConsensusChainHeadGetRequest();
  virtual ~ConsensusChainHeadGetRequest();

  ConsensusChainHeadGetRequest(const ConsensusChainHeadGetRequest& from);
  ConsensusChainHeadGetRequest(ConsensusChainHeadGetRequest&& from) noexcept
    : ConsensusChainHeadGetRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusChainHeadGetRequest& operator=(const ConsensusChainHeadGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusChainHeadGetRequest& operator=(ConsensusChainHeadGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusChainHeadGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusChainHeadGetRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusChainHeadGetRequest*>(
               &_ConsensusChainHeadGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(ConsensusChainHeadGetRequest* other);
  friend void swap(ConsensusChainHeadGetRequest& a, ConsensusChainHeadGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusChainHeadGetRequest* New() const final {
    return CreateMaybeMessage<ConsensusChainHeadGetRequest>(nullptr);
  }

  ConsensusChainHeadGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusChainHeadGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusChainHeadGetRequest& from);
  void MergeFrom(const ConsensusChainHeadGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusChainHeadGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusChainHeadGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ConsensusChainHeadGetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusChainHeadGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusChainHeadGetResponse) */ {
 public:
  ConsensusChainHeadGetResponse();
  virtual ~ConsensusChainHeadGetResponse();

  ConsensusChainHeadGetResponse(const ConsensusChainHeadGetResponse& from);
  ConsensusChainHeadGetResponse(ConsensusChainHeadGetResponse&& from) noexcept
    : ConsensusChainHeadGetResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusChainHeadGetResponse& operator=(const ConsensusChainHeadGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusChainHeadGetResponse& operator=(ConsensusChainHeadGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusChainHeadGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusChainHeadGetResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusChainHeadGetResponse*>(
               &_ConsensusChainHeadGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(ConsensusChainHeadGetResponse* other);
  friend void swap(ConsensusChainHeadGetResponse& a, ConsensusChainHeadGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusChainHeadGetResponse* New() const final {
    return CreateMaybeMessage<ConsensusChainHeadGetResponse>(nullptr);
  }

  ConsensusChainHeadGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusChainHeadGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusChainHeadGetResponse& from);
  void MergeFrom(const ConsensusChainHeadGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusChainHeadGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusChainHeadGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusChainHeadGetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusChainHeadGetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusChainHeadGetResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusChainHeadGetResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusChainHeadGetResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusChainHeadGetResponse_Status_NOT_READY;
  static constexpr Status NO_CHAIN_HEAD =
    ConsensusChainHeadGetResponse_Status_NO_CHAIN_HEAD;
  static inline bool Status_IsValid(int value) {
    return ConsensusChainHeadGetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusChainHeadGetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusChainHeadGetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusChainHeadGetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusChainHeadGetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusChainHeadGetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusChainHeadGetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ConsensusBlock block = 2;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 2;
  const ::ConsensusBlock& block() const;
  ::ConsensusBlock* release_block();
  ::ConsensusBlock* mutable_block();
  void set_allocated_block(::ConsensusBlock* block);

  // .ConsensusChainHeadGetResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusChainHeadGetResponse_Status status() const;
  void set_status(::ConsensusChainHeadGetResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusChainHeadGetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ConsensusBlock* block_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusSettingsGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusSettingsGetRequest) */ {
 public:
  ConsensusSettingsGetRequest();
  virtual ~ConsensusSettingsGetRequest();

  ConsensusSettingsGetRequest(const ConsensusSettingsGetRequest& from);
  ConsensusSettingsGetRequest(ConsensusSettingsGetRequest&& from) noexcept
    : ConsensusSettingsGetRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusSettingsGetRequest& operator=(const ConsensusSettingsGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusSettingsGetRequest& operator=(ConsensusSettingsGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusSettingsGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusSettingsGetRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusSettingsGetRequest*>(
               &_ConsensusSettingsGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(ConsensusSettingsGetRequest* other);
  friend void swap(ConsensusSettingsGetRequest& a, ConsensusSettingsGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusSettingsGetRequest* New() const final {
    return CreateMaybeMessage<ConsensusSettingsGetRequest>(nullptr);
  }

  ConsensusSettingsGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusSettingsGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusSettingsGetRequest& from);
  void MergeFrom(const ConsensusSettingsGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusSettingsGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusSettingsGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string keys = 2;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 2;
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();

  // bytes block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const void* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);

  // @@protoc_insertion_point(class_scope:ConsensusSettingsGetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusSettingsGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusSettingsGetResponse) */ {
 public:
  ConsensusSettingsGetResponse();
  virtual ~ConsensusSettingsGetResponse();

  ConsensusSettingsGetResponse(const ConsensusSettingsGetResponse& from);
  ConsensusSettingsGetResponse(ConsensusSettingsGetResponse&& from) noexcept
    : ConsensusSettingsGetResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusSettingsGetResponse& operator=(const ConsensusSettingsGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusSettingsGetResponse& operator=(ConsensusSettingsGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusSettingsGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusSettingsGetResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusSettingsGetResponse*>(
               &_ConsensusSettingsGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(ConsensusSettingsGetResponse* other);
  friend void swap(ConsensusSettingsGetResponse& a, ConsensusSettingsGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusSettingsGetResponse* New() const final {
    return CreateMaybeMessage<ConsensusSettingsGetResponse>(nullptr);
  }

  ConsensusSettingsGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusSettingsGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusSettingsGetResponse& from);
  void MergeFrom(const ConsensusSettingsGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusSettingsGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusSettingsGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusSettingsGetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusSettingsGetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusSettingsGetResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusSettingsGetResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusSettingsGetResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusSettingsGetResponse_Status_NOT_READY;
  static constexpr Status UNKNOWN_BLOCK =
    ConsensusSettingsGetResponse_Status_UNKNOWN_BLOCK;
  static inline bool Status_IsValid(int value) {
    return ConsensusSettingsGetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusSettingsGetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusSettingsGetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusSettingsGetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusSettingsGetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusSettingsGetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusSettingsGetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ConsensusSettingsEntry entries = 2;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 2;
  ::ConsensusSettingsEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusSettingsEntry >*
      mutable_entries();
  const ::ConsensusSettingsEntry& entries(int index) const;
  ::ConsensusSettingsEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusSettingsEntry >&
      entries() const;

  // .ConsensusSettingsGetResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusSettingsGetResponse_Status status() const;
  void set_status(::ConsensusSettingsGetResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusSettingsGetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusSettingsEntry > entries_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusStateGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusStateGetRequest) */ {
 public:
  ConsensusStateGetRequest();
  virtual ~ConsensusStateGetRequest();

  ConsensusStateGetRequest(const ConsensusStateGetRequest& from);
  ConsensusStateGetRequest(ConsensusStateGetRequest&& from) noexcept
    : ConsensusStateGetRequest() {
    *this = ::std::move(from);
  }

  inline ConsensusStateGetRequest& operator=(const ConsensusStateGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusStateGetRequest& operator=(ConsensusStateGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusStateGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusStateGetRequest* internal_default_instance() {
    return reinterpret_cast<const ConsensusStateGetRequest*>(
               &_ConsensusStateGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(ConsensusStateGetRequest* other);
  friend void swap(ConsensusStateGetRequest& a, ConsensusStateGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusStateGetRequest* New() const final {
    return CreateMaybeMessage<ConsensusStateGetRequest>(nullptr);
  }

  ConsensusStateGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusStateGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusStateGetRequest& from);
  void MergeFrom(const ConsensusStateGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusStateGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusStateGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string addresses = 2;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 2;
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();

  // bytes block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const void* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);

  // @@protoc_insertion_point(class_scope:ConsensusStateGetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// -------------------------------------------------------------------

class ConsensusStateGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConsensusStateGetResponse) */ {
 public:
  ConsensusStateGetResponse();
  virtual ~ConsensusStateGetResponse();

  ConsensusStateGetResponse(const ConsensusStateGetResponse& from);
  ConsensusStateGetResponse(ConsensusStateGetResponse&& from) noexcept
    : ConsensusStateGetResponse() {
    *this = ::std::move(from);
  }

  inline ConsensusStateGetResponse& operator=(const ConsensusStateGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusStateGetResponse& operator=(ConsensusStateGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusStateGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusStateGetResponse* internal_default_instance() {
    return reinterpret_cast<const ConsensusStateGetResponse*>(
               &_ConsensusStateGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(ConsensusStateGetResponse* other);
  friend void swap(ConsensusStateGetResponse& a, ConsensusStateGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsensusStateGetResponse* New() const final {
    return CreateMaybeMessage<ConsensusStateGetResponse>(nullptr);
  }

  ConsensusStateGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusStateGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusStateGetResponse& from);
  void MergeFrom(const ConsensusStateGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusStateGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConsensusStateGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consensus_2eproto);
    return ::descriptor_table_consensus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsensusStateGetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ConsensusStateGetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ConsensusStateGetResponse_Status_OK;
  static constexpr Status BAD_REQUEST =
    ConsensusStateGetResponse_Status_BAD_REQUEST;
  static constexpr Status SERVICE_ERROR =
    ConsensusStateGetResponse_Status_SERVICE_ERROR;
  static constexpr Status NOT_READY =
    ConsensusStateGetResponse_Status_NOT_READY;
  static constexpr Status UNKNOWN_BLOCK =
    ConsensusStateGetResponse_Status_UNKNOWN_BLOCK;
  static inline bool Status_IsValid(int value) {
    return ConsensusStateGetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConsensusStateGetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConsensusStateGetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConsensusStateGetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConsensusStateGetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConsensusStateGetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ConsensusStateGetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ConsensusStateEntry entries = 2;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 2;
  ::ConsensusStateEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusStateEntry >*
      mutable_entries();
  const ::ConsensusStateEntry& entries(int index) const;
  ::ConsensusStateEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusStateEntry >&
      entries() const;

  // .ConsensusStateGetResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ConsensusStateGetResponse_Status status() const;
  void set_status(::ConsensusStateGetResponse_Status value);

  // @@protoc_insertion_point(class_scope:ConsensusStateGetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusStateEntry > entries_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consensus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConsensusPeerMessageHeader

// bytes signer_id = 1;
inline void ConsensusPeerMessageHeader::clear_signer_id() {
  signer_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusPeerMessageHeader::signer_id() const {
  // @@protoc_insertion_point(field_get:ConsensusPeerMessageHeader.signer_id)
  return signer_id_.GetNoArena();
}
inline void ConsensusPeerMessageHeader::set_signer_id(const std::string& value) {
  
  signer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusPeerMessageHeader.signer_id)
}
inline void ConsensusPeerMessageHeader::set_signer_id(std::string&& value) {
  
  signer_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusPeerMessageHeader.signer_id)
}
inline void ConsensusPeerMessageHeader::set_signer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusPeerMessageHeader.signer_id)
}
inline void ConsensusPeerMessageHeader::set_signer_id(const void* value, size_t size) {
  
  signer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusPeerMessageHeader.signer_id)
}
inline std::string* ConsensusPeerMessageHeader::mutable_signer_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusPeerMessageHeader.signer_id)
  return signer_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusPeerMessageHeader::release_signer_id() {
  // @@protoc_insertion_point(field_release:ConsensusPeerMessageHeader.signer_id)
  
  return signer_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusPeerMessageHeader::set_allocated_signer_id(std::string* signer_id) {
  if (signer_id != nullptr) {
    
  } else {
    
  }
  signer_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signer_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusPeerMessageHeader.signer_id)
}

// bytes content_sha512 = 2;
inline void ConsensusPeerMessageHeader::clear_content_sha512() {
  content_sha512_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusPeerMessageHeader::content_sha512() const {
  // @@protoc_insertion_point(field_get:ConsensusPeerMessageHeader.content_sha512)
  return content_sha512_.GetNoArena();
}
inline void ConsensusPeerMessageHeader::set_content_sha512(const std::string& value) {
  
  content_sha512_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusPeerMessageHeader.content_sha512)
}
inline void ConsensusPeerMessageHeader::set_content_sha512(std::string&& value) {
  
  content_sha512_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusPeerMessageHeader.content_sha512)
}
inline void ConsensusPeerMessageHeader::set_content_sha512(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_sha512_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusPeerMessageHeader.content_sha512)
}
inline void ConsensusPeerMessageHeader::set_content_sha512(const void* value, size_t size) {
  
  content_sha512_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusPeerMessageHeader.content_sha512)
}
inline std::string* ConsensusPeerMessageHeader::mutable_content_sha512() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusPeerMessageHeader.content_sha512)
  return content_sha512_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusPeerMessageHeader::release_content_sha512() {
  // @@protoc_insertion_point(field_release:ConsensusPeerMessageHeader.content_sha512)
  
  return content_sha512_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusPeerMessageHeader::set_allocated_content_sha512(std::string* content_sha512) {
  if (content_sha512 != nullptr) {
    
  } else {
    
  }
  content_sha512_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_sha512);
  // @@protoc_insertion_point(field_set_allocated:ConsensusPeerMessageHeader.content_sha512)
}

// string message_type = 5;
inline void ConsensusPeerMessageHeader::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusPeerMessageHeader::message_type() const {
  // @@protoc_insertion_point(field_get:ConsensusPeerMessageHeader.message_type)
  return message_type_.GetNoArena();
}
inline void ConsensusPeerMessageHeader::set_message_type(const std::string& value) {
  
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusPeerMessageHeader.message_type)
}
inline void ConsensusPeerMessageHeader::set_message_type(std::string&& value) {
  
  message_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusPeerMessageHeader.message_type)
}
inline void ConsensusPeerMessageHeader::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusPeerMessageHeader.message_type)
}
inline void ConsensusPeerMessageHeader::set_message_type(const char* value, size_t size) {
  
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusPeerMessageHeader.message_type)
}
inline std::string* ConsensusPeerMessageHeader::mutable_message_type() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusPeerMessageHeader.message_type)
  return message_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusPeerMessageHeader::release_message_type() {
  // @@protoc_insertion_point(field_release:ConsensusPeerMessageHeader.message_type)
  
  return message_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusPeerMessageHeader::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:ConsensusPeerMessageHeader.message_type)
}

// string name = 3;
inline void ConsensusPeerMessageHeader::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusPeerMessageHeader::name() const {
  // @@protoc_insertion_point(field_get:ConsensusPeerMessageHeader.name)
  return name_.GetNoArena();
}
inline void ConsensusPeerMessageHeader::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusPeerMessageHeader.name)
}
inline void ConsensusPeerMessageHeader::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusPeerMessageHeader.name)
}
inline void ConsensusPeerMessageHeader::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusPeerMessageHeader.name)
}
inline void ConsensusPeerMessageHeader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusPeerMessageHeader.name)
}
inline std::string* ConsensusPeerMessageHeader::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusPeerMessageHeader.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusPeerMessageHeader::release_name() {
  // @@protoc_insertion_point(field_release:ConsensusPeerMessageHeader.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusPeerMessageHeader::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ConsensusPeerMessageHeader.name)
}

// string version = 4;
inline void ConsensusPeerMessageHeader::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusPeerMessageHeader::version() const {
  // @@protoc_insertion_point(field_get:ConsensusPeerMessageHeader.version)
  return version_.GetNoArena();
}
inline void ConsensusPeerMessageHeader::set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusPeerMessageHeader.version)
}
inline void ConsensusPeerMessageHeader::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusPeerMessageHeader.version)
}
inline void ConsensusPeerMessageHeader::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusPeerMessageHeader.version)
}
inline void ConsensusPeerMessageHeader::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusPeerMessageHeader.version)
}
inline std::string* ConsensusPeerMessageHeader::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusPeerMessageHeader.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusPeerMessageHeader::release_version() {
  // @@protoc_insertion_point(field_release:ConsensusPeerMessageHeader.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusPeerMessageHeader::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:ConsensusPeerMessageHeader.version)
}

// -------------------------------------------------------------------

// ConsensusPeerMessage

// bytes header = 1;
inline void ConsensusPeerMessage::clear_header() {
  header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusPeerMessage::header() const {
  // @@protoc_insertion_point(field_get:ConsensusPeerMessage.header)
  return header_.GetNoArena();
}
inline void ConsensusPeerMessage::set_header(const std::string& value) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusPeerMessage.header)
}
inline void ConsensusPeerMessage::set_header(std::string&& value) {
  
  header_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusPeerMessage.header)
}
inline void ConsensusPeerMessage::set_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusPeerMessage.header)
}
inline void ConsensusPeerMessage::set_header(const void* value, size_t size) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusPeerMessage.header)
}
inline std::string* ConsensusPeerMessage::mutable_header() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusPeerMessage.header)
  return header_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusPeerMessage::release_header() {
  // @@protoc_insertion_point(field_release:ConsensusPeerMessage.header)
  
  return header_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusPeerMessage::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:ConsensusPeerMessage.header)
}

// bytes header_signature = 3;
inline void ConsensusPeerMessage::clear_header_signature() {
  header_signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusPeerMessage::header_signature() const {
  // @@protoc_insertion_point(field_get:ConsensusPeerMessage.header_signature)
  return header_signature_.GetNoArena();
}
inline void ConsensusPeerMessage::set_header_signature(const std::string& value) {
  
  header_signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusPeerMessage.header_signature)
}
inline void ConsensusPeerMessage::set_header_signature(std::string&& value) {
  
  header_signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusPeerMessage.header_signature)
}
inline void ConsensusPeerMessage::set_header_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusPeerMessage.header_signature)
}
inline void ConsensusPeerMessage::set_header_signature(const void* value, size_t size) {
  
  header_signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusPeerMessage.header_signature)
}
inline std::string* ConsensusPeerMessage::mutable_header_signature() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusPeerMessage.header_signature)
  return header_signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusPeerMessage::release_header_signature() {
  // @@protoc_insertion_point(field_release:ConsensusPeerMessage.header_signature)
  
  return header_signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusPeerMessage::set_allocated_header_signature(std::string* header_signature) {
  if (header_signature != nullptr) {
    
  } else {
    
  }
  header_signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header_signature);
  // @@protoc_insertion_point(field_set_allocated:ConsensusPeerMessage.header_signature)
}

// bytes content = 2;
inline void ConsensusPeerMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusPeerMessage::content() const {
  // @@protoc_insertion_point(field_get:ConsensusPeerMessage.content)
  return content_.GetNoArena();
}
inline void ConsensusPeerMessage::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusPeerMessage.content)
}
inline void ConsensusPeerMessage::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusPeerMessage.content)
}
inline void ConsensusPeerMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusPeerMessage.content)
}
inline void ConsensusPeerMessage::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusPeerMessage.content)
}
inline std::string* ConsensusPeerMessage::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusPeerMessage.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusPeerMessage::release_content() {
  // @@protoc_insertion_point(field_release:ConsensusPeerMessage.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusPeerMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ConsensusPeerMessage.content)
}

// -------------------------------------------------------------------

// ConsensusBlock

// bytes block_id = 1;
inline void ConsensusBlock::clear_block_id() {
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusBlock::block_id() const {
  // @@protoc_insertion_point(field_get:ConsensusBlock.block_id)
  return block_id_.GetNoArena();
}
inline void ConsensusBlock::set_block_id(const std::string& value) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusBlock.block_id)
}
inline void ConsensusBlock::set_block_id(std::string&& value) {
  
  block_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusBlock.block_id)
}
inline void ConsensusBlock::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusBlock.block_id)
}
inline void ConsensusBlock::set_block_id(const void* value, size_t size) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusBlock.block_id)
}
inline std::string* ConsensusBlock::mutable_block_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusBlock.block_id)
  return block_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusBlock::release_block_id() {
  // @@protoc_insertion_point(field_release:ConsensusBlock.block_id)
  
  return block_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusBlock::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusBlock.block_id)
}

// bytes previous_id = 2;
inline void ConsensusBlock::clear_previous_id() {
  previous_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusBlock::previous_id() const {
  // @@protoc_insertion_point(field_get:ConsensusBlock.previous_id)
  return previous_id_.GetNoArena();
}
inline void ConsensusBlock::set_previous_id(const std::string& value) {
  
  previous_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusBlock.previous_id)
}
inline void ConsensusBlock::set_previous_id(std::string&& value) {
  
  previous_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusBlock.previous_id)
}
inline void ConsensusBlock::set_previous_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previous_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusBlock.previous_id)
}
inline void ConsensusBlock::set_previous_id(const void* value, size_t size) {
  
  previous_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusBlock.previous_id)
}
inline std::string* ConsensusBlock::mutable_previous_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusBlock.previous_id)
  return previous_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusBlock::release_previous_id() {
  // @@protoc_insertion_point(field_release:ConsensusBlock.previous_id)
  
  return previous_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusBlock::set_allocated_previous_id(std::string* previous_id) {
  if (previous_id != nullptr) {
    
  } else {
    
  }
  previous_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusBlock.previous_id)
}

// bytes signer_id = 3;
inline void ConsensusBlock::clear_signer_id() {
  signer_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusBlock::signer_id() const {
  // @@protoc_insertion_point(field_get:ConsensusBlock.signer_id)
  return signer_id_.GetNoArena();
}
inline void ConsensusBlock::set_signer_id(const std::string& value) {
  
  signer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusBlock.signer_id)
}
inline void ConsensusBlock::set_signer_id(std::string&& value) {
  
  signer_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusBlock.signer_id)
}
inline void ConsensusBlock::set_signer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusBlock.signer_id)
}
inline void ConsensusBlock::set_signer_id(const void* value, size_t size) {
  
  signer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusBlock.signer_id)
}
inline std::string* ConsensusBlock::mutable_signer_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusBlock.signer_id)
  return signer_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusBlock::release_signer_id() {
  // @@protoc_insertion_point(field_release:ConsensusBlock.signer_id)
  
  return signer_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusBlock::set_allocated_signer_id(std::string* signer_id) {
  if (signer_id != nullptr) {
    
  } else {
    
  }
  signer_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signer_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusBlock.signer_id)
}

// uint64 block_num = 4;
inline void ConsensusBlock::clear_block_num() {
  block_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusBlock::block_num() const {
  // @@protoc_insertion_point(field_get:ConsensusBlock.block_num)
  return block_num_;
}
inline void ConsensusBlock::set_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_num_ = value;
  // @@protoc_insertion_point(field_set:ConsensusBlock.block_num)
}

// bytes payload = 5;
inline void ConsensusBlock::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusBlock::payload() const {
  // @@protoc_insertion_point(field_get:ConsensusBlock.payload)
  return payload_.GetNoArena();
}
inline void ConsensusBlock::set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusBlock.payload)
}
inline void ConsensusBlock::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusBlock.payload)
}
inline void ConsensusBlock::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusBlock.payload)
}
inline void ConsensusBlock::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusBlock.payload)
}
inline std::string* ConsensusBlock::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusBlock.payload)
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusBlock::release_payload() {
  // @@protoc_insertion_point(field_release:ConsensusBlock.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusBlock::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:ConsensusBlock.payload)
}

// bytes summary = 6;
inline void ConsensusBlock::clear_summary() {
  summary_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusBlock::summary() const {
  // @@protoc_insertion_point(field_get:ConsensusBlock.summary)
  return summary_.GetNoArena();
}
inline void ConsensusBlock::set_summary(const std::string& value) {
  
  summary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusBlock.summary)
}
inline void ConsensusBlock::set_summary(std::string&& value) {
  
  summary_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusBlock.summary)
}
inline void ConsensusBlock::set_summary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  summary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusBlock.summary)
}
inline void ConsensusBlock::set_summary(const void* value, size_t size) {
  
  summary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusBlock.summary)
}
inline std::string* ConsensusBlock::mutable_summary() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusBlock.summary)
  return summary_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusBlock::release_summary() {
  // @@protoc_insertion_point(field_release:ConsensusBlock.summary)
  
  return summary_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusBlock::set_allocated_summary(std::string* summary) {
  if (summary != nullptr) {
    
  } else {
    
  }
  summary_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), summary);
  // @@protoc_insertion_point(field_set_allocated:ConsensusBlock.summary)
}

// -------------------------------------------------------------------

// ConsensusPeerInfo

// bytes peer_id = 1;
inline void ConsensusPeerInfo::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusPeerInfo::peer_id() const {
  // @@protoc_insertion_point(field_get:ConsensusPeerInfo.peer_id)
  return peer_id_.GetNoArena();
}
inline void ConsensusPeerInfo::set_peer_id(const std::string& value) {
  
  peer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusPeerInfo.peer_id)
}
inline void ConsensusPeerInfo::set_peer_id(std::string&& value) {
  
  peer_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusPeerInfo.peer_id)
}
inline void ConsensusPeerInfo::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusPeerInfo.peer_id)
}
inline void ConsensusPeerInfo::set_peer_id(const void* value, size_t size) {
  
  peer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusPeerInfo.peer_id)
}
inline std::string* ConsensusPeerInfo::mutable_peer_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusPeerInfo.peer_id)
  return peer_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusPeerInfo::release_peer_id() {
  // @@protoc_insertion_point(field_release:ConsensusPeerInfo.peer_id)
  
  return peer_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusPeerInfo::set_allocated_peer_id(std::string* peer_id) {
  if (peer_id != nullptr) {
    
  } else {
    
  }
  peer_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusPeerInfo.peer_id)
}

// -------------------------------------------------------------------

// ConsensusSettingsEntry

// string key = 1;
inline void ConsensusSettingsEntry::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusSettingsEntry::key() const {
  // @@protoc_insertion_point(field_get:ConsensusSettingsEntry.key)
  return key_.GetNoArena();
}
inline void ConsensusSettingsEntry::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusSettingsEntry.key)
}
inline void ConsensusSettingsEntry::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusSettingsEntry.key)
}
inline void ConsensusSettingsEntry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusSettingsEntry.key)
}
inline void ConsensusSettingsEntry::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusSettingsEntry.key)
}
inline std::string* ConsensusSettingsEntry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusSettingsEntry.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusSettingsEntry::release_key() {
  // @@protoc_insertion_point(field_release:ConsensusSettingsEntry.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusSettingsEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ConsensusSettingsEntry.key)
}

// string value = 2;
inline void ConsensusSettingsEntry::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusSettingsEntry::value() const {
  // @@protoc_insertion_point(field_get:ConsensusSettingsEntry.value)
  return value_.GetNoArena();
}
inline void ConsensusSettingsEntry::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusSettingsEntry.value)
}
inline void ConsensusSettingsEntry::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusSettingsEntry.value)
}
inline void ConsensusSettingsEntry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusSettingsEntry.value)
}
inline void ConsensusSettingsEntry::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusSettingsEntry.value)
}
inline std::string* ConsensusSettingsEntry::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusSettingsEntry.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusSettingsEntry::release_value() {
  // @@protoc_insertion_point(field_release:ConsensusSettingsEntry.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusSettingsEntry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ConsensusSettingsEntry.value)
}

// -------------------------------------------------------------------

// ConsensusStateEntry

// string address = 1;
inline void ConsensusStateEntry::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusStateEntry::address() const {
  // @@protoc_insertion_point(field_get:ConsensusStateEntry.address)
  return address_.GetNoArena();
}
inline void ConsensusStateEntry::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusStateEntry.address)
}
inline void ConsensusStateEntry::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusStateEntry.address)
}
inline void ConsensusStateEntry::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusStateEntry.address)
}
inline void ConsensusStateEntry::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusStateEntry.address)
}
inline std::string* ConsensusStateEntry::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusStateEntry.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusStateEntry::release_address() {
  // @@protoc_insertion_point(field_release:ConsensusStateEntry.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusStateEntry::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ConsensusStateEntry.address)
}

// bytes data = 2;
inline void ConsensusStateEntry::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusStateEntry::data() const {
  // @@protoc_insertion_point(field_get:ConsensusStateEntry.data)
  return data_.GetNoArena();
}
inline void ConsensusStateEntry::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusStateEntry.data)
}
inline void ConsensusStateEntry::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusStateEntry.data)
}
inline void ConsensusStateEntry::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusStateEntry.data)
}
inline void ConsensusStateEntry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusStateEntry.data)
}
inline std::string* ConsensusStateEntry::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusStateEntry.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusStateEntry::release_data() {
  // @@protoc_insertion_point(field_release:ConsensusStateEntry.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusStateEntry::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ConsensusStateEntry.data)
}

// -------------------------------------------------------------------

// ConsensusRegisterRequest

// string name = 1;
inline void ConsensusRegisterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusRegisterRequest::name() const {
  // @@protoc_insertion_point(field_get:ConsensusRegisterRequest.name)
  return name_.GetNoArena();
}
inline void ConsensusRegisterRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusRegisterRequest.name)
}
inline void ConsensusRegisterRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusRegisterRequest.name)
}
inline void ConsensusRegisterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusRegisterRequest.name)
}
inline void ConsensusRegisterRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusRegisterRequest.name)
}
inline std::string* ConsensusRegisterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusRegisterRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusRegisterRequest::release_name() {
  // @@protoc_insertion_point(field_release:ConsensusRegisterRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusRegisterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ConsensusRegisterRequest.name)
}

// string version = 2;
inline void ConsensusRegisterRequest::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusRegisterRequest::version() const {
  // @@protoc_insertion_point(field_get:ConsensusRegisterRequest.version)
  return version_.GetNoArena();
}
inline void ConsensusRegisterRequest::set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusRegisterRequest.version)
}
inline void ConsensusRegisterRequest::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusRegisterRequest.version)
}
inline void ConsensusRegisterRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusRegisterRequest.version)
}
inline void ConsensusRegisterRequest::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusRegisterRequest.version)
}
inline std::string* ConsensusRegisterRequest::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusRegisterRequest.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusRegisterRequest::release_version() {
  // @@protoc_insertion_point(field_release:ConsensusRegisterRequest.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusRegisterRequest::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:ConsensusRegisterRequest.version)
}

// -------------------------------------------------------------------

// ConsensusRegisterResponse

// .ConsensusRegisterResponse.Status status = 1;
inline void ConsensusRegisterResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusRegisterResponse_Status ConsensusRegisterResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusRegisterResponse.status)
  return static_cast< ::ConsensusRegisterResponse_Status >(status_);
}
inline void ConsensusRegisterResponse::set_status(::ConsensusRegisterResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusRegisterResponse.status)
}

// .ConsensusBlock chain_head = 2;
inline bool ConsensusRegisterResponse::has_chain_head() const {
  return this != internal_default_instance() && chain_head_ != nullptr;
}
inline void ConsensusRegisterResponse::clear_chain_head() {
  if (GetArenaNoVirtual() == nullptr && chain_head_ != nullptr) {
    delete chain_head_;
  }
  chain_head_ = nullptr;
}
inline const ::ConsensusBlock& ConsensusRegisterResponse::chain_head() const {
  const ::ConsensusBlock* p = chain_head_;
  // @@protoc_insertion_point(field_get:ConsensusRegisterResponse.chain_head)
  return p != nullptr ? *p : *reinterpret_cast<const ::ConsensusBlock*>(
      &::_ConsensusBlock_default_instance_);
}
inline ::ConsensusBlock* ConsensusRegisterResponse::release_chain_head() {
  // @@protoc_insertion_point(field_release:ConsensusRegisterResponse.chain_head)
  
  ::ConsensusBlock* temp = chain_head_;
  chain_head_ = nullptr;
  return temp;
}
inline ::ConsensusBlock* ConsensusRegisterResponse::mutable_chain_head() {
  
  if (chain_head_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConsensusBlock>(GetArenaNoVirtual());
    chain_head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ConsensusRegisterResponse.chain_head)
  return chain_head_;
}
inline void ConsensusRegisterResponse::set_allocated_chain_head(::ConsensusBlock* chain_head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete chain_head_;
  }
  if (chain_head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chain_head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chain_head, submessage_arena);
    }
    
  } else {
    
  }
  chain_head_ = chain_head;
  // @@protoc_insertion_point(field_set_allocated:ConsensusRegisterResponse.chain_head)
}

// repeated .ConsensusPeerInfo peers = 3;
inline int ConsensusRegisterResponse::peers_size() const {
  return peers_.size();
}
inline void ConsensusRegisterResponse::clear_peers() {
  peers_.Clear();
}
inline ::ConsensusPeerInfo* ConsensusRegisterResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:ConsensusRegisterResponse.peers)
  return peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusPeerInfo >*
ConsensusRegisterResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:ConsensusRegisterResponse.peers)
  return &peers_;
}
inline const ::ConsensusPeerInfo& ConsensusRegisterResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:ConsensusRegisterResponse.peers)
  return peers_.Get(index);
}
inline ::ConsensusPeerInfo* ConsensusRegisterResponse::add_peers() {
  // @@protoc_insertion_point(field_add:ConsensusRegisterResponse.peers)
  return peers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusPeerInfo >&
ConsensusRegisterResponse::peers() const {
  // @@protoc_insertion_point(field_list:ConsensusRegisterResponse.peers)
  return peers_;
}

// .ConsensusPeerInfo local_peer_info = 4;
inline bool ConsensusRegisterResponse::has_local_peer_info() const {
  return this != internal_default_instance() && local_peer_info_ != nullptr;
}
inline void ConsensusRegisterResponse::clear_local_peer_info() {
  if (GetArenaNoVirtual() == nullptr && local_peer_info_ != nullptr) {
    delete local_peer_info_;
  }
  local_peer_info_ = nullptr;
}
inline const ::ConsensusPeerInfo& ConsensusRegisterResponse::local_peer_info() const {
  const ::ConsensusPeerInfo* p = local_peer_info_;
  // @@protoc_insertion_point(field_get:ConsensusRegisterResponse.local_peer_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::ConsensusPeerInfo*>(
      &::_ConsensusPeerInfo_default_instance_);
}
inline ::ConsensusPeerInfo* ConsensusRegisterResponse::release_local_peer_info() {
  // @@protoc_insertion_point(field_release:ConsensusRegisterResponse.local_peer_info)
  
  ::ConsensusPeerInfo* temp = local_peer_info_;
  local_peer_info_ = nullptr;
  return temp;
}
inline ::ConsensusPeerInfo* ConsensusRegisterResponse::mutable_local_peer_info() {
  
  if (local_peer_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConsensusPeerInfo>(GetArenaNoVirtual());
    local_peer_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ConsensusRegisterResponse.local_peer_info)
  return local_peer_info_;
}
inline void ConsensusRegisterResponse::set_allocated_local_peer_info(::ConsensusPeerInfo* local_peer_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_peer_info_;
  }
  if (local_peer_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_peer_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_peer_info, submessage_arena);
    }
    
  } else {
    
  }
  local_peer_info_ = local_peer_info;
  // @@protoc_insertion_point(field_set_allocated:ConsensusRegisterResponse.local_peer_info)
}

// -------------------------------------------------------------------

// ConsensusNotifyPeerConnected

// .ConsensusPeerInfo peer_info = 1;
inline bool ConsensusNotifyPeerConnected::has_peer_info() const {
  return this != internal_default_instance() && peer_info_ != nullptr;
}
inline void ConsensusNotifyPeerConnected::clear_peer_info() {
  if (GetArenaNoVirtual() == nullptr && peer_info_ != nullptr) {
    delete peer_info_;
  }
  peer_info_ = nullptr;
}
inline const ::ConsensusPeerInfo& ConsensusNotifyPeerConnected::peer_info() const {
  const ::ConsensusPeerInfo* p = peer_info_;
  // @@protoc_insertion_point(field_get:ConsensusNotifyPeerConnected.peer_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::ConsensusPeerInfo*>(
      &::_ConsensusPeerInfo_default_instance_);
}
inline ::ConsensusPeerInfo* ConsensusNotifyPeerConnected::release_peer_info() {
  // @@protoc_insertion_point(field_release:ConsensusNotifyPeerConnected.peer_info)
  
  ::ConsensusPeerInfo* temp = peer_info_;
  peer_info_ = nullptr;
  return temp;
}
inline ::ConsensusPeerInfo* ConsensusNotifyPeerConnected::mutable_peer_info() {
  
  if (peer_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConsensusPeerInfo>(GetArenaNoVirtual());
    peer_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ConsensusNotifyPeerConnected.peer_info)
  return peer_info_;
}
inline void ConsensusNotifyPeerConnected::set_allocated_peer_info(::ConsensusPeerInfo* peer_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peer_info_;
  }
  if (peer_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_info, submessage_arena);
    }
    
  } else {
    
  }
  peer_info_ = peer_info;
  // @@protoc_insertion_point(field_set_allocated:ConsensusNotifyPeerConnected.peer_info)
}

// -------------------------------------------------------------------

// ConsensusNotifyPeerDisconnected

// bytes peer_id = 1;
inline void ConsensusNotifyPeerDisconnected::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusNotifyPeerDisconnected::peer_id() const {
  // @@protoc_insertion_point(field_get:ConsensusNotifyPeerDisconnected.peer_id)
  return peer_id_.GetNoArena();
}
inline void ConsensusNotifyPeerDisconnected::set_peer_id(const std::string& value) {
  
  peer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusNotifyPeerDisconnected.peer_id)
}
inline void ConsensusNotifyPeerDisconnected::set_peer_id(std::string&& value) {
  
  peer_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusNotifyPeerDisconnected.peer_id)
}
inline void ConsensusNotifyPeerDisconnected::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusNotifyPeerDisconnected.peer_id)
}
inline void ConsensusNotifyPeerDisconnected::set_peer_id(const void* value, size_t size) {
  
  peer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusNotifyPeerDisconnected.peer_id)
}
inline std::string* ConsensusNotifyPeerDisconnected::mutable_peer_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusNotifyPeerDisconnected.peer_id)
  return peer_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusNotifyPeerDisconnected::release_peer_id() {
  // @@protoc_insertion_point(field_release:ConsensusNotifyPeerDisconnected.peer_id)
  
  return peer_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusNotifyPeerDisconnected::set_allocated_peer_id(std::string* peer_id) {
  if (peer_id != nullptr) {
    
  } else {
    
  }
  peer_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusNotifyPeerDisconnected.peer_id)
}

// -------------------------------------------------------------------

// ConsensusNotifyPeerMessage

// .ConsensusPeerMessage message = 1;
inline bool ConsensusNotifyPeerMessage::has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline void ConsensusNotifyPeerMessage::clear_message() {
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::ConsensusPeerMessage& ConsensusNotifyPeerMessage::message() const {
  const ::ConsensusPeerMessage* p = message_;
  // @@protoc_insertion_point(field_get:ConsensusNotifyPeerMessage.message)
  return p != nullptr ? *p : *reinterpret_cast<const ::ConsensusPeerMessage*>(
      &::_ConsensusPeerMessage_default_instance_);
}
inline ::ConsensusPeerMessage* ConsensusNotifyPeerMessage::release_message() {
  // @@protoc_insertion_point(field_release:ConsensusNotifyPeerMessage.message)
  
  ::ConsensusPeerMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::ConsensusPeerMessage* ConsensusNotifyPeerMessage::mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConsensusPeerMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ConsensusNotifyPeerMessage.message)
  return message_;
}
inline void ConsensusNotifyPeerMessage::set_allocated_message(::ConsensusPeerMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:ConsensusNotifyPeerMessage.message)
}

// bytes sender_id = 2;
inline void ConsensusNotifyPeerMessage::clear_sender_id() {
  sender_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusNotifyPeerMessage::sender_id() const {
  // @@protoc_insertion_point(field_get:ConsensusNotifyPeerMessage.sender_id)
  return sender_id_.GetNoArena();
}
inline void ConsensusNotifyPeerMessage::set_sender_id(const std::string& value) {
  
  sender_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusNotifyPeerMessage.sender_id)
}
inline void ConsensusNotifyPeerMessage::set_sender_id(std::string&& value) {
  
  sender_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusNotifyPeerMessage.sender_id)
}
inline void ConsensusNotifyPeerMessage::set_sender_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusNotifyPeerMessage.sender_id)
}
inline void ConsensusNotifyPeerMessage::set_sender_id(const void* value, size_t size) {
  
  sender_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusNotifyPeerMessage.sender_id)
}
inline std::string* ConsensusNotifyPeerMessage::mutable_sender_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusNotifyPeerMessage.sender_id)
  return sender_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusNotifyPeerMessage::release_sender_id() {
  // @@protoc_insertion_point(field_release:ConsensusNotifyPeerMessage.sender_id)
  
  return sender_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusNotifyPeerMessage::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  sender_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusNotifyPeerMessage.sender_id)
}

// -------------------------------------------------------------------

// ConsensusNotifyBlockNew

// .ConsensusBlock block = 1;
inline bool ConsensusNotifyBlockNew::has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline void ConsensusNotifyBlockNew::clear_block() {
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::ConsensusBlock& ConsensusNotifyBlockNew::block() const {
  const ::ConsensusBlock* p = block_;
  // @@protoc_insertion_point(field_get:ConsensusNotifyBlockNew.block)
  return p != nullptr ? *p : *reinterpret_cast<const ::ConsensusBlock*>(
      &::_ConsensusBlock_default_instance_);
}
inline ::ConsensusBlock* ConsensusNotifyBlockNew::release_block() {
  // @@protoc_insertion_point(field_release:ConsensusNotifyBlockNew.block)
  
  ::ConsensusBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::ConsensusBlock* ConsensusNotifyBlockNew::mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConsensusBlock>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ConsensusNotifyBlockNew.block)
  return block_;
}
inline void ConsensusNotifyBlockNew::set_allocated_block(::ConsensusBlock* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:ConsensusNotifyBlockNew.block)
}

// -------------------------------------------------------------------

// ConsensusNotifyBlockValid

// bytes block_id = 1;
inline void ConsensusNotifyBlockValid::clear_block_id() {
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusNotifyBlockValid::block_id() const {
  // @@protoc_insertion_point(field_get:ConsensusNotifyBlockValid.block_id)
  return block_id_.GetNoArena();
}
inline void ConsensusNotifyBlockValid::set_block_id(const std::string& value) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusNotifyBlockValid.block_id)
}
inline void ConsensusNotifyBlockValid::set_block_id(std::string&& value) {
  
  block_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusNotifyBlockValid.block_id)
}
inline void ConsensusNotifyBlockValid::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusNotifyBlockValid.block_id)
}
inline void ConsensusNotifyBlockValid::set_block_id(const void* value, size_t size) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusNotifyBlockValid.block_id)
}
inline std::string* ConsensusNotifyBlockValid::mutable_block_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusNotifyBlockValid.block_id)
  return block_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusNotifyBlockValid::release_block_id() {
  // @@protoc_insertion_point(field_release:ConsensusNotifyBlockValid.block_id)
  
  return block_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusNotifyBlockValid::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusNotifyBlockValid.block_id)
}

// -------------------------------------------------------------------

// ConsensusNotifyBlockInvalid

// bytes block_id = 1;
inline void ConsensusNotifyBlockInvalid::clear_block_id() {
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusNotifyBlockInvalid::block_id() const {
  // @@protoc_insertion_point(field_get:ConsensusNotifyBlockInvalid.block_id)
  return block_id_.GetNoArena();
}
inline void ConsensusNotifyBlockInvalid::set_block_id(const std::string& value) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusNotifyBlockInvalid.block_id)
}
inline void ConsensusNotifyBlockInvalid::set_block_id(std::string&& value) {
  
  block_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusNotifyBlockInvalid.block_id)
}
inline void ConsensusNotifyBlockInvalid::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusNotifyBlockInvalid.block_id)
}
inline void ConsensusNotifyBlockInvalid::set_block_id(const void* value, size_t size) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusNotifyBlockInvalid.block_id)
}
inline std::string* ConsensusNotifyBlockInvalid::mutable_block_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusNotifyBlockInvalid.block_id)
  return block_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusNotifyBlockInvalid::release_block_id() {
  // @@protoc_insertion_point(field_release:ConsensusNotifyBlockInvalid.block_id)
  
  return block_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusNotifyBlockInvalid::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusNotifyBlockInvalid.block_id)
}

// -------------------------------------------------------------------

// ConsensusNotifyBlockCommit

// bytes block_id = 1;
inline void ConsensusNotifyBlockCommit::clear_block_id() {
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusNotifyBlockCommit::block_id() const {
  // @@protoc_insertion_point(field_get:ConsensusNotifyBlockCommit.block_id)
  return block_id_.GetNoArena();
}
inline void ConsensusNotifyBlockCommit::set_block_id(const std::string& value) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusNotifyBlockCommit.block_id)
}
inline void ConsensusNotifyBlockCommit::set_block_id(std::string&& value) {
  
  block_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusNotifyBlockCommit.block_id)
}
inline void ConsensusNotifyBlockCommit::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusNotifyBlockCommit.block_id)
}
inline void ConsensusNotifyBlockCommit::set_block_id(const void* value, size_t size) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusNotifyBlockCommit.block_id)
}
inline std::string* ConsensusNotifyBlockCommit::mutable_block_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusNotifyBlockCommit.block_id)
  return block_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusNotifyBlockCommit::release_block_id() {
  // @@protoc_insertion_point(field_release:ConsensusNotifyBlockCommit.block_id)
  
  return block_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusNotifyBlockCommit::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusNotifyBlockCommit.block_id)
}

// -------------------------------------------------------------------

// ConsensusNotifyAck

// -------------------------------------------------------------------

// ConsensusSendToRequest

// bytes content = 1;
inline void ConsensusSendToRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusSendToRequest::content() const {
  // @@protoc_insertion_point(field_get:ConsensusSendToRequest.content)
  return content_.GetNoArena();
}
inline void ConsensusSendToRequest::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusSendToRequest.content)
}
inline void ConsensusSendToRequest::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusSendToRequest.content)
}
inline void ConsensusSendToRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusSendToRequest.content)
}
inline void ConsensusSendToRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusSendToRequest.content)
}
inline std::string* ConsensusSendToRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusSendToRequest.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusSendToRequest::release_content() {
  // @@protoc_insertion_point(field_release:ConsensusSendToRequest.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusSendToRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ConsensusSendToRequest.content)
}

// string message_type = 3;
inline void ConsensusSendToRequest::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusSendToRequest::message_type() const {
  // @@protoc_insertion_point(field_get:ConsensusSendToRequest.message_type)
  return message_type_.GetNoArena();
}
inline void ConsensusSendToRequest::set_message_type(const std::string& value) {
  
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusSendToRequest.message_type)
}
inline void ConsensusSendToRequest::set_message_type(std::string&& value) {
  
  message_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusSendToRequest.message_type)
}
inline void ConsensusSendToRequest::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusSendToRequest.message_type)
}
inline void ConsensusSendToRequest::set_message_type(const char* value, size_t size) {
  
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusSendToRequest.message_type)
}
inline std::string* ConsensusSendToRequest::mutable_message_type() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusSendToRequest.message_type)
  return message_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusSendToRequest::release_message_type() {
  // @@protoc_insertion_point(field_release:ConsensusSendToRequest.message_type)
  
  return message_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusSendToRequest::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:ConsensusSendToRequest.message_type)
}

// bytes receiver_id = 2;
inline void ConsensusSendToRequest::clear_receiver_id() {
  receiver_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusSendToRequest::receiver_id() const {
  // @@protoc_insertion_point(field_get:ConsensusSendToRequest.receiver_id)
  return receiver_id_.GetNoArena();
}
inline void ConsensusSendToRequest::set_receiver_id(const std::string& value) {
  
  receiver_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusSendToRequest.receiver_id)
}
inline void ConsensusSendToRequest::set_receiver_id(std::string&& value) {
  
  receiver_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusSendToRequest.receiver_id)
}
inline void ConsensusSendToRequest::set_receiver_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusSendToRequest.receiver_id)
}
inline void ConsensusSendToRequest::set_receiver_id(const void* value, size_t size) {
  
  receiver_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusSendToRequest.receiver_id)
}
inline std::string* ConsensusSendToRequest::mutable_receiver_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusSendToRequest.receiver_id)
  return receiver_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusSendToRequest::release_receiver_id() {
  // @@protoc_insertion_point(field_release:ConsensusSendToRequest.receiver_id)
  
  return receiver_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusSendToRequest::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  receiver_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusSendToRequest.receiver_id)
}

// -------------------------------------------------------------------

// ConsensusSendToResponse

// .ConsensusSendToResponse.Status status = 1;
inline void ConsensusSendToResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusSendToResponse_Status ConsensusSendToResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusSendToResponse.status)
  return static_cast< ::ConsensusSendToResponse_Status >(status_);
}
inline void ConsensusSendToResponse::set_status(::ConsensusSendToResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusSendToResponse.status)
}

// -------------------------------------------------------------------

// ConsensusBroadcastRequest

// bytes content = 1;
inline void ConsensusBroadcastRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusBroadcastRequest::content() const {
  // @@protoc_insertion_point(field_get:ConsensusBroadcastRequest.content)
  return content_.GetNoArena();
}
inline void ConsensusBroadcastRequest::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusBroadcastRequest.content)
}
inline void ConsensusBroadcastRequest::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusBroadcastRequest.content)
}
inline void ConsensusBroadcastRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusBroadcastRequest.content)
}
inline void ConsensusBroadcastRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusBroadcastRequest.content)
}
inline std::string* ConsensusBroadcastRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusBroadcastRequest.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusBroadcastRequest::release_content() {
  // @@protoc_insertion_point(field_release:ConsensusBroadcastRequest.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusBroadcastRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ConsensusBroadcastRequest.content)
}

// string message_type = 2;
inline void ConsensusBroadcastRequest::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusBroadcastRequest::message_type() const {
  // @@protoc_insertion_point(field_get:ConsensusBroadcastRequest.message_type)
  return message_type_.GetNoArena();
}
inline void ConsensusBroadcastRequest::set_message_type(const std::string& value) {
  
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusBroadcastRequest.message_type)
}
inline void ConsensusBroadcastRequest::set_message_type(std::string&& value) {
  
  message_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusBroadcastRequest.message_type)
}
inline void ConsensusBroadcastRequest::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusBroadcastRequest.message_type)
}
inline void ConsensusBroadcastRequest::set_message_type(const char* value, size_t size) {
  
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusBroadcastRequest.message_type)
}
inline std::string* ConsensusBroadcastRequest::mutable_message_type() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusBroadcastRequest.message_type)
  return message_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusBroadcastRequest::release_message_type() {
  // @@protoc_insertion_point(field_release:ConsensusBroadcastRequest.message_type)
  
  return message_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusBroadcastRequest::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:ConsensusBroadcastRequest.message_type)
}

// -------------------------------------------------------------------

// ConsensusBroadcastResponse

// .ConsensusBroadcastResponse.Status status = 1;
inline void ConsensusBroadcastResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusBroadcastResponse_Status ConsensusBroadcastResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusBroadcastResponse.status)
  return static_cast< ::ConsensusBroadcastResponse_Status >(status_);
}
inline void ConsensusBroadcastResponse::set_status(::ConsensusBroadcastResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusBroadcastResponse.status)
}

// -------------------------------------------------------------------

// ConsensusInitializeBlockRequest

// bytes previous_id = 1;
inline void ConsensusInitializeBlockRequest::clear_previous_id() {
  previous_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusInitializeBlockRequest::previous_id() const {
  // @@protoc_insertion_point(field_get:ConsensusInitializeBlockRequest.previous_id)
  return previous_id_.GetNoArena();
}
inline void ConsensusInitializeBlockRequest::set_previous_id(const std::string& value) {
  
  previous_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusInitializeBlockRequest.previous_id)
}
inline void ConsensusInitializeBlockRequest::set_previous_id(std::string&& value) {
  
  previous_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusInitializeBlockRequest.previous_id)
}
inline void ConsensusInitializeBlockRequest::set_previous_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previous_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusInitializeBlockRequest.previous_id)
}
inline void ConsensusInitializeBlockRequest::set_previous_id(const void* value, size_t size) {
  
  previous_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusInitializeBlockRequest.previous_id)
}
inline std::string* ConsensusInitializeBlockRequest::mutable_previous_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusInitializeBlockRequest.previous_id)
  return previous_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusInitializeBlockRequest::release_previous_id() {
  // @@protoc_insertion_point(field_release:ConsensusInitializeBlockRequest.previous_id)
  
  return previous_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusInitializeBlockRequest::set_allocated_previous_id(std::string* previous_id) {
  if (previous_id != nullptr) {
    
  } else {
    
  }
  previous_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusInitializeBlockRequest.previous_id)
}

// -------------------------------------------------------------------

// ConsensusInitializeBlockResponse

// .ConsensusInitializeBlockResponse.Status status = 1;
inline void ConsensusInitializeBlockResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusInitializeBlockResponse_Status ConsensusInitializeBlockResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusInitializeBlockResponse.status)
  return static_cast< ::ConsensusInitializeBlockResponse_Status >(status_);
}
inline void ConsensusInitializeBlockResponse::set_status(::ConsensusInitializeBlockResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusInitializeBlockResponse.status)
}

// -------------------------------------------------------------------

// ConsensusSummarizeBlockRequest

// -------------------------------------------------------------------

// ConsensusSummarizeBlockResponse

// .ConsensusSummarizeBlockResponse.Status status = 1;
inline void ConsensusSummarizeBlockResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusSummarizeBlockResponse_Status ConsensusSummarizeBlockResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusSummarizeBlockResponse.status)
  return static_cast< ::ConsensusSummarizeBlockResponse_Status >(status_);
}
inline void ConsensusSummarizeBlockResponse::set_status(::ConsensusSummarizeBlockResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusSummarizeBlockResponse.status)
}

// bytes summary = 2;
inline void ConsensusSummarizeBlockResponse::clear_summary() {
  summary_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusSummarizeBlockResponse::summary() const {
  // @@protoc_insertion_point(field_get:ConsensusSummarizeBlockResponse.summary)
  return summary_.GetNoArena();
}
inline void ConsensusSummarizeBlockResponse::set_summary(const std::string& value) {
  
  summary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusSummarizeBlockResponse.summary)
}
inline void ConsensusSummarizeBlockResponse::set_summary(std::string&& value) {
  
  summary_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusSummarizeBlockResponse.summary)
}
inline void ConsensusSummarizeBlockResponse::set_summary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  summary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusSummarizeBlockResponse.summary)
}
inline void ConsensusSummarizeBlockResponse::set_summary(const void* value, size_t size) {
  
  summary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusSummarizeBlockResponse.summary)
}
inline std::string* ConsensusSummarizeBlockResponse::mutable_summary() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusSummarizeBlockResponse.summary)
  return summary_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusSummarizeBlockResponse::release_summary() {
  // @@protoc_insertion_point(field_release:ConsensusSummarizeBlockResponse.summary)
  
  return summary_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusSummarizeBlockResponse::set_allocated_summary(std::string* summary) {
  if (summary != nullptr) {
    
  } else {
    
  }
  summary_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), summary);
  // @@protoc_insertion_point(field_set_allocated:ConsensusSummarizeBlockResponse.summary)
}

// -------------------------------------------------------------------

// ConsensusFinalizeBlockRequest

// bytes data = 1;
inline void ConsensusFinalizeBlockRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusFinalizeBlockRequest::data() const {
  // @@protoc_insertion_point(field_get:ConsensusFinalizeBlockRequest.data)
  return data_.GetNoArena();
}
inline void ConsensusFinalizeBlockRequest::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusFinalizeBlockRequest.data)
}
inline void ConsensusFinalizeBlockRequest::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusFinalizeBlockRequest.data)
}
inline void ConsensusFinalizeBlockRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusFinalizeBlockRequest.data)
}
inline void ConsensusFinalizeBlockRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusFinalizeBlockRequest.data)
}
inline std::string* ConsensusFinalizeBlockRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusFinalizeBlockRequest.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusFinalizeBlockRequest::release_data() {
  // @@protoc_insertion_point(field_release:ConsensusFinalizeBlockRequest.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusFinalizeBlockRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ConsensusFinalizeBlockRequest.data)
}

// -------------------------------------------------------------------

// ConsensusFinalizeBlockResponse

// .ConsensusFinalizeBlockResponse.Status status = 1;
inline void ConsensusFinalizeBlockResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusFinalizeBlockResponse_Status ConsensusFinalizeBlockResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusFinalizeBlockResponse.status)
  return static_cast< ::ConsensusFinalizeBlockResponse_Status >(status_);
}
inline void ConsensusFinalizeBlockResponse::set_status(::ConsensusFinalizeBlockResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusFinalizeBlockResponse.status)
}

// bytes block_id = 2;
inline void ConsensusFinalizeBlockResponse::clear_block_id() {
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusFinalizeBlockResponse::block_id() const {
  // @@protoc_insertion_point(field_get:ConsensusFinalizeBlockResponse.block_id)
  return block_id_.GetNoArena();
}
inline void ConsensusFinalizeBlockResponse::set_block_id(const std::string& value) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusFinalizeBlockResponse.block_id)
}
inline void ConsensusFinalizeBlockResponse::set_block_id(std::string&& value) {
  
  block_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusFinalizeBlockResponse.block_id)
}
inline void ConsensusFinalizeBlockResponse::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusFinalizeBlockResponse.block_id)
}
inline void ConsensusFinalizeBlockResponse::set_block_id(const void* value, size_t size) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusFinalizeBlockResponse.block_id)
}
inline std::string* ConsensusFinalizeBlockResponse::mutable_block_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusFinalizeBlockResponse.block_id)
  return block_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusFinalizeBlockResponse::release_block_id() {
  // @@protoc_insertion_point(field_release:ConsensusFinalizeBlockResponse.block_id)
  
  return block_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusFinalizeBlockResponse::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusFinalizeBlockResponse.block_id)
}

// -------------------------------------------------------------------

// ConsensusCancelBlockRequest

// -------------------------------------------------------------------

// ConsensusCancelBlockResponse

// .ConsensusCancelBlockResponse.Status status = 1;
inline void ConsensusCancelBlockResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusCancelBlockResponse_Status ConsensusCancelBlockResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusCancelBlockResponse.status)
  return static_cast< ::ConsensusCancelBlockResponse_Status >(status_);
}
inline void ConsensusCancelBlockResponse::set_status(::ConsensusCancelBlockResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusCancelBlockResponse.status)
}

// -------------------------------------------------------------------

// ConsensusCheckBlocksRequest

// repeated bytes block_ids = 1;
inline int ConsensusCheckBlocksRequest::block_ids_size() const {
  return block_ids_.size();
}
inline void ConsensusCheckBlocksRequest::clear_block_ids() {
  block_ids_.Clear();
}
inline const std::string& ConsensusCheckBlocksRequest::block_ids(int index) const {
  // @@protoc_insertion_point(field_get:ConsensusCheckBlocksRequest.block_ids)
  return block_ids_.Get(index);
}
inline std::string* ConsensusCheckBlocksRequest::mutable_block_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ConsensusCheckBlocksRequest.block_ids)
  return block_ids_.Mutable(index);
}
inline void ConsensusCheckBlocksRequest::set_block_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ConsensusCheckBlocksRequest.block_ids)
  block_ids_.Mutable(index)->assign(value);
}
inline void ConsensusCheckBlocksRequest::set_block_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ConsensusCheckBlocksRequest.block_ids)
  block_ids_.Mutable(index)->assign(std::move(value));
}
inline void ConsensusCheckBlocksRequest::set_block_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ConsensusCheckBlocksRequest.block_ids)
}
inline void ConsensusCheckBlocksRequest::set_block_ids(int index, const void* value, size_t size) {
  block_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ConsensusCheckBlocksRequest.block_ids)
}
inline std::string* ConsensusCheckBlocksRequest::add_block_ids() {
  // @@protoc_insertion_point(field_add_mutable:ConsensusCheckBlocksRequest.block_ids)
  return block_ids_.Add();
}
inline void ConsensusCheckBlocksRequest::add_block_ids(const std::string& value) {
  block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ConsensusCheckBlocksRequest.block_ids)
}
inline void ConsensusCheckBlocksRequest::add_block_ids(std::string&& value) {
  block_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ConsensusCheckBlocksRequest.block_ids)
}
inline void ConsensusCheckBlocksRequest::add_block_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ConsensusCheckBlocksRequest.block_ids)
}
inline void ConsensusCheckBlocksRequest::add_block_ids(const void* value, size_t size) {
  block_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ConsensusCheckBlocksRequest.block_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConsensusCheckBlocksRequest::block_ids() const {
  // @@protoc_insertion_point(field_list:ConsensusCheckBlocksRequest.block_ids)
  return block_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConsensusCheckBlocksRequest::mutable_block_ids() {
  // @@protoc_insertion_point(field_mutable_list:ConsensusCheckBlocksRequest.block_ids)
  return &block_ids_;
}

// -------------------------------------------------------------------

// ConsensusCheckBlocksResponse

// .ConsensusCheckBlocksResponse.Status status = 1;
inline void ConsensusCheckBlocksResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusCheckBlocksResponse_Status ConsensusCheckBlocksResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusCheckBlocksResponse.status)
  return static_cast< ::ConsensusCheckBlocksResponse_Status >(status_);
}
inline void ConsensusCheckBlocksResponse::set_status(::ConsensusCheckBlocksResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusCheckBlocksResponse.status)
}

// -------------------------------------------------------------------

// ConsensusCommitBlockRequest

// bytes block_id = 1;
inline void ConsensusCommitBlockRequest::clear_block_id() {
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusCommitBlockRequest::block_id() const {
  // @@protoc_insertion_point(field_get:ConsensusCommitBlockRequest.block_id)
  return block_id_.GetNoArena();
}
inline void ConsensusCommitBlockRequest::set_block_id(const std::string& value) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusCommitBlockRequest.block_id)
}
inline void ConsensusCommitBlockRequest::set_block_id(std::string&& value) {
  
  block_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusCommitBlockRequest.block_id)
}
inline void ConsensusCommitBlockRequest::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusCommitBlockRequest.block_id)
}
inline void ConsensusCommitBlockRequest::set_block_id(const void* value, size_t size) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusCommitBlockRequest.block_id)
}
inline std::string* ConsensusCommitBlockRequest::mutable_block_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusCommitBlockRequest.block_id)
  return block_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusCommitBlockRequest::release_block_id() {
  // @@protoc_insertion_point(field_release:ConsensusCommitBlockRequest.block_id)
  
  return block_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusCommitBlockRequest::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusCommitBlockRequest.block_id)
}

// -------------------------------------------------------------------

// ConsensusCommitBlockResponse

// .ConsensusCommitBlockResponse.Status status = 1;
inline void ConsensusCommitBlockResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusCommitBlockResponse_Status ConsensusCommitBlockResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusCommitBlockResponse.status)
  return static_cast< ::ConsensusCommitBlockResponse_Status >(status_);
}
inline void ConsensusCommitBlockResponse::set_status(::ConsensusCommitBlockResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusCommitBlockResponse.status)
}

// -------------------------------------------------------------------

// ConsensusIgnoreBlockRequest

// bytes block_id = 1;
inline void ConsensusIgnoreBlockRequest::clear_block_id() {
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusIgnoreBlockRequest::block_id() const {
  // @@protoc_insertion_point(field_get:ConsensusIgnoreBlockRequest.block_id)
  return block_id_.GetNoArena();
}
inline void ConsensusIgnoreBlockRequest::set_block_id(const std::string& value) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusIgnoreBlockRequest.block_id)
}
inline void ConsensusIgnoreBlockRequest::set_block_id(std::string&& value) {
  
  block_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusIgnoreBlockRequest.block_id)
}
inline void ConsensusIgnoreBlockRequest::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusIgnoreBlockRequest.block_id)
}
inline void ConsensusIgnoreBlockRequest::set_block_id(const void* value, size_t size) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusIgnoreBlockRequest.block_id)
}
inline std::string* ConsensusIgnoreBlockRequest::mutable_block_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusIgnoreBlockRequest.block_id)
  return block_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusIgnoreBlockRequest::release_block_id() {
  // @@protoc_insertion_point(field_release:ConsensusIgnoreBlockRequest.block_id)
  
  return block_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusIgnoreBlockRequest::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusIgnoreBlockRequest.block_id)
}

// -------------------------------------------------------------------

// ConsensusIgnoreBlockResponse

// .ConsensusIgnoreBlockResponse.Status status = 1;
inline void ConsensusIgnoreBlockResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusIgnoreBlockResponse_Status ConsensusIgnoreBlockResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusIgnoreBlockResponse.status)
  return static_cast< ::ConsensusIgnoreBlockResponse_Status >(status_);
}
inline void ConsensusIgnoreBlockResponse::set_status(::ConsensusIgnoreBlockResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusIgnoreBlockResponse.status)
}

// -------------------------------------------------------------------

// ConsensusFailBlockRequest

// bytes block_id = 1;
inline void ConsensusFailBlockRequest::clear_block_id() {
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusFailBlockRequest::block_id() const {
  // @@protoc_insertion_point(field_get:ConsensusFailBlockRequest.block_id)
  return block_id_.GetNoArena();
}
inline void ConsensusFailBlockRequest::set_block_id(const std::string& value) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusFailBlockRequest.block_id)
}
inline void ConsensusFailBlockRequest::set_block_id(std::string&& value) {
  
  block_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusFailBlockRequest.block_id)
}
inline void ConsensusFailBlockRequest::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusFailBlockRequest.block_id)
}
inline void ConsensusFailBlockRequest::set_block_id(const void* value, size_t size) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusFailBlockRequest.block_id)
}
inline std::string* ConsensusFailBlockRequest::mutable_block_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusFailBlockRequest.block_id)
  return block_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusFailBlockRequest::release_block_id() {
  // @@protoc_insertion_point(field_release:ConsensusFailBlockRequest.block_id)
  
  return block_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusFailBlockRequest::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusFailBlockRequest.block_id)
}

// -------------------------------------------------------------------

// ConsensusFailBlockResponse

// .ConsensusFailBlockResponse.Status status = 1;
inline void ConsensusFailBlockResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusFailBlockResponse_Status ConsensusFailBlockResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusFailBlockResponse.status)
  return static_cast< ::ConsensusFailBlockResponse_Status >(status_);
}
inline void ConsensusFailBlockResponse::set_status(::ConsensusFailBlockResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusFailBlockResponse.status)
}

// -------------------------------------------------------------------

// ConsensusBlocksGetRequest

// repeated bytes block_ids = 1;
inline int ConsensusBlocksGetRequest::block_ids_size() const {
  return block_ids_.size();
}
inline void ConsensusBlocksGetRequest::clear_block_ids() {
  block_ids_.Clear();
}
inline const std::string& ConsensusBlocksGetRequest::block_ids(int index) const {
  // @@protoc_insertion_point(field_get:ConsensusBlocksGetRequest.block_ids)
  return block_ids_.Get(index);
}
inline std::string* ConsensusBlocksGetRequest::mutable_block_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ConsensusBlocksGetRequest.block_ids)
  return block_ids_.Mutable(index);
}
inline void ConsensusBlocksGetRequest::set_block_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ConsensusBlocksGetRequest.block_ids)
  block_ids_.Mutable(index)->assign(value);
}
inline void ConsensusBlocksGetRequest::set_block_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ConsensusBlocksGetRequest.block_ids)
  block_ids_.Mutable(index)->assign(std::move(value));
}
inline void ConsensusBlocksGetRequest::set_block_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ConsensusBlocksGetRequest.block_ids)
}
inline void ConsensusBlocksGetRequest::set_block_ids(int index, const void* value, size_t size) {
  block_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ConsensusBlocksGetRequest.block_ids)
}
inline std::string* ConsensusBlocksGetRequest::add_block_ids() {
  // @@protoc_insertion_point(field_add_mutable:ConsensusBlocksGetRequest.block_ids)
  return block_ids_.Add();
}
inline void ConsensusBlocksGetRequest::add_block_ids(const std::string& value) {
  block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ConsensusBlocksGetRequest.block_ids)
}
inline void ConsensusBlocksGetRequest::add_block_ids(std::string&& value) {
  block_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ConsensusBlocksGetRequest.block_ids)
}
inline void ConsensusBlocksGetRequest::add_block_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ConsensusBlocksGetRequest.block_ids)
}
inline void ConsensusBlocksGetRequest::add_block_ids(const void* value, size_t size) {
  block_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ConsensusBlocksGetRequest.block_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConsensusBlocksGetRequest::block_ids() const {
  // @@protoc_insertion_point(field_list:ConsensusBlocksGetRequest.block_ids)
  return block_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConsensusBlocksGetRequest::mutable_block_ids() {
  // @@protoc_insertion_point(field_mutable_list:ConsensusBlocksGetRequest.block_ids)
  return &block_ids_;
}

// -------------------------------------------------------------------

// ConsensusBlocksGetResponse

// .ConsensusBlocksGetResponse.Status status = 1;
inline void ConsensusBlocksGetResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusBlocksGetResponse_Status ConsensusBlocksGetResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusBlocksGetResponse.status)
  return static_cast< ::ConsensusBlocksGetResponse_Status >(status_);
}
inline void ConsensusBlocksGetResponse::set_status(::ConsensusBlocksGetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusBlocksGetResponse.status)
}

// repeated .ConsensusBlock blocks = 2;
inline int ConsensusBlocksGetResponse::blocks_size() const {
  return blocks_.size();
}
inline void ConsensusBlocksGetResponse::clear_blocks() {
  blocks_.Clear();
}
inline ::ConsensusBlock* ConsensusBlocksGetResponse::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:ConsensusBlocksGetResponse.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusBlock >*
ConsensusBlocksGetResponse::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:ConsensusBlocksGetResponse.blocks)
  return &blocks_;
}
inline const ::ConsensusBlock& ConsensusBlocksGetResponse::blocks(int index) const {
  // @@protoc_insertion_point(field_get:ConsensusBlocksGetResponse.blocks)
  return blocks_.Get(index);
}
inline ::ConsensusBlock* ConsensusBlocksGetResponse::add_blocks() {
  // @@protoc_insertion_point(field_add:ConsensusBlocksGetResponse.blocks)
  return blocks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusBlock >&
ConsensusBlocksGetResponse::blocks() const {
  // @@protoc_insertion_point(field_list:ConsensusBlocksGetResponse.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// ConsensusChainHeadGetRequest

// -------------------------------------------------------------------

// ConsensusChainHeadGetResponse

// .ConsensusChainHeadGetResponse.Status status = 1;
inline void ConsensusChainHeadGetResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusChainHeadGetResponse_Status ConsensusChainHeadGetResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusChainHeadGetResponse.status)
  return static_cast< ::ConsensusChainHeadGetResponse_Status >(status_);
}
inline void ConsensusChainHeadGetResponse::set_status(::ConsensusChainHeadGetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusChainHeadGetResponse.status)
}

// .ConsensusBlock block = 2;
inline bool ConsensusChainHeadGetResponse::has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline void ConsensusChainHeadGetResponse::clear_block() {
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::ConsensusBlock& ConsensusChainHeadGetResponse::block() const {
  const ::ConsensusBlock* p = block_;
  // @@protoc_insertion_point(field_get:ConsensusChainHeadGetResponse.block)
  return p != nullptr ? *p : *reinterpret_cast<const ::ConsensusBlock*>(
      &::_ConsensusBlock_default_instance_);
}
inline ::ConsensusBlock* ConsensusChainHeadGetResponse::release_block() {
  // @@protoc_insertion_point(field_release:ConsensusChainHeadGetResponse.block)
  
  ::ConsensusBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::ConsensusBlock* ConsensusChainHeadGetResponse::mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConsensusBlock>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ConsensusChainHeadGetResponse.block)
  return block_;
}
inline void ConsensusChainHeadGetResponse::set_allocated_block(::ConsensusBlock* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:ConsensusChainHeadGetResponse.block)
}

// -------------------------------------------------------------------

// ConsensusSettingsGetRequest

// bytes block_id = 1;
inline void ConsensusSettingsGetRequest::clear_block_id() {
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusSettingsGetRequest::block_id() const {
  // @@protoc_insertion_point(field_get:ConsensusSettingsGetRequest.block_id)
  return block_id_.GetNoArena();
}
inline void ConsensusSettingsGetRequest::set_block_id(const std::string& value) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusSettingsGetRequest.block_id)
}
inline void ConsensusSettingsGetRequest::set_block_id(std::string&& value) {
  
  block_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusSettingsGetRequest.block_id)
}
inline void ConsensusSettingsGetRequest::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusSettingsGetRequest.block_id)
}
inline void ConsensusSettingsGetRequest::set_block_id(const void* value, size_t size) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusSettingsGetRequest.block_id)
}
inline std::string* ConsensusSettingsGetRequest::mutable_block_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusSettingsGetRequest.block_id)
  return block_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusSettingsGetRequest::release_block_id() {
  // @@protoc_insertion_point(field_release:ConsensusSettingsGetRequest.block_id)
  
  return block_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusSettingsGetRequest::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusSettingsGetRequest.block_id)
}

// repeated string keys = 2;
inline int ConsensusSettingsGetRequest::keys_size() const {
  return keys_.size();
}
inline void ConsensusSettingsGetRequest::clear_keys() {
  keys_.Clear();
}
inline const std::string& ConsensusSettingsGetRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:ConsensusSettingsGetRequest.keys)
  return keys_.Get(index);
}
inline std::string* ConsensusSettingsGetRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:ConsensusSettingsGetRequest.keys)
  return keys_.Mutable(index);
}
inline void ConsensusSettingsGetRequest::set_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ConsensusSettingsGetRequest.keys)
  keys_.Mutable(index)->assign(value);
}
inline void ConsensusSettingsGetRequest::set_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ConsensusSettingsGetRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
inline void ConsensusSettingsGetRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ConsensusSettingsGetRequest.keys)
}
inline void ConsensusSettingsGetRequest::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ConsensusSettingsGetRequest.keys)
}
inline std::string* ConsensusSettingsGetRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:ConsensusSettingsGetRequest.keys)
  return keys_.Add();
}
inline void ConsensusSettingsGetRequest::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ConsensusSettingsGetRequest.keys)
}
inline void ConsensusSettingsGetRequest::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ConsensusSettingsGetRequest.keys)
}
inline void ConsensusSettingsGetRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ConsensusSettingsGetRequest.keys)
}
inline void ConsensusSettingsGetRequest::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ConsensusSettingsGetRequest.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConsensusSettingsGetRequest::keys() const {
  // @@protoc_insertion_point(field_list:ConsensusSettingsGetRequest.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConsensusSettingsGetRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:ConsensusSettingsGetRequest.keys)
  return &keys_;
}

// -------------------------------------------------------------------

// ConsensusSettingsGetResponse

// .ConsensusSettingsGetResponse.Status status = 1;
inline void ConsensusSettingsGetResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusSettingsGetResponse_Status ConsensusSettingsGetResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusSettingsGetResponse.status)
  return static_cast< ::ConsensusSettingsGetResponse_Status >(status_);
}
inline void ConsensusSettingsGetResponse::set_status(::ConsensusSettingsGetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusSettingsGetResponse.status)
}

// repeated .ConsensusSettingsEntry entries = 2;
inline int ConsensusSettingsGetResponse::entries_size() const {
  return entries_.size();
}
inline void ConsensusSettingsGetResponse::clear_entries() {
  entries_.Clear();
}
inline ::ConsensusSettingsEntry* ConsensusSettingsGetResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:ConsensusSettingsGetResponse.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusSettingsEntry >*
ConsensusSettingsGetResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:ConsensusSettingsGetResponse.entries)
  return &entries_;
}
inline const ::ConsensusSettingsEntry& ConsensusSettingsGetResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:ConsensusSettingsGetResponse.entries)
  return entries_.Get(index);
}
inline ::ConsensusSettingsEntry* ConsensusSettingsGetResponse::add_entries() {
  // @@protoc_insertion_point(field_add:ConsensusSettingsGetResponse.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusSettingsEntry >&
ConsensusSettingsGetResponse::entries() const {
  // @@protoc_insertion_point(field_list:ConsensusSettingsGetResponse.entries)
  return entries_;
}

// -------------------------------------------------------------------

// ConsensusStateGetRequest

// bytes block_id = 1;
inline void ConsensusStateGetRequest::clear_block_id() {
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusStateGetRequest::block_id() const {
  // @@protoc_insertion_point(field_get:ConsensusStateGetRequest.block_id)
  return block_id_.GetNoArena();
}
inline void ConsensusStateGetRequest::set_block_id(const std::string& value) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConsensusStateGetRequest.block_id)
}
inline void ConsensusStateGetRequest::set_block_id(std::string&& value) {
  
  block_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConsensusStateGetRequest.block_id)
}
inline void ConsensusStateGetRequest::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConsensusStateGetRequest.block_id)
}
inline void ConsensusStateGetRequest::set_block_id(const void* value, size_t size) {
  
  block_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConsensusStateGetRequest.block_id)
}
inline std::string* ConsensusStateGetRequest::mutable_block_id() {
  
  // @@protoc_insertion_point(field_mutable:ConsensusStateGetRequest.block_id)
  return block_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusStateGetRequest::release_block_id() {
  // @@protoc_insertion_point(field_release:ConsensusStateGetRequest.block_id)
  
  return block_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusStateGetRequest::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id);
  // @@protoc_insertion_point(field_set_allocated:ConsensusStateGetRequest.block_id)
}

// repeated string addresses = 2;
inline int ConsensusStateGetRequest::addresses_size() const {
  return addresses_.size();
}
inline void ConsensusStateGetRequest::clear_addresses() {
  addresses_.Clear();
}
inline const std::string& ConsensusStateGetRequest::addresses(int index) const {
  // @@protoc_insertion_point(field_get:ConsensusStateGetRequest.addresses)
  return addresses_.Get(index);
}
inline std::string* ConsensusStateGetRequest::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:ConsensusStateGetRequest.addresses)
  return addresses_.Mutable(index);
}
inline void ConsensusStateGetRequest::set_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ConsensusStateGetRequest.addresses)
  addresses_.Mutable(index)->assign(value);
}
inline void ConsensusStateGetRequest::set_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ConsensusStateGetRequest.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
inline void ConsensusStateGetRequest::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ConsensusStateGetRequest.addresses)
}
inline void ConsensusStateGetRequest::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ConsensusStateGetRequest.addresses)
}
inline std::string* ConsensusStateGetRequest::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:ConsensusStateGetRequest.addresses)
  return addresses_.Add();
}
inline void ConsensusStateGetRequest::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ConsensusStateGetRequest.addresses)
}
inline void ConsensusStateGetRequest::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ConsensusStateGetRequest.addresses)
}
inline void ConsensusStateGetRequest::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ConsensusStateGetRequest.addresses)
}
inline void ConsensusStateGetRequest::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ConsensusStateGetRequest.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConsensusStateGetRequest::addresses() const {
  // @@protoc_insertion_point(field_list:ConsensusStateGetRequest.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConsensusStateGetRequest::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:ConsensusStateGetRequest.addresses)
  return &addresses_;
}

// -------------------------------------------------------------------

// ConsensusStateGetResponse

// .ConsensusStateGetResponse.Status status = 1;
inline void ConsensusStateGetResponse::clear_status() {
  status_ = 0;
}
inline ::ConsensusStateGetResponse_Status ConsensusStateGetResponse::status() const {
  // @@protoc_insertion_point(field_get:ConsensusStateGetResponse.status)
  return static_cast< ::ConsensusStateGetResponse_Status >(status_);
}
inline void ConsensusStateGetResponse::set_status(::ConsensusStateGetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ConsensusStateGetResponse.status)
}

// repeated .ConsensusStateEntry entries = 2;
inline int ConsensusStateGetResponse::entries_size() const {
  return entries_.size();
}
inline void ConsensusStateGetResponse::clear_entries() {
  entries_.Clear();
}
inline ::ConsensusStateEntry* ConsensusStateGetResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:ConsensusStateGetResponse.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusStateEntry >*
ConsensusStateGetResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:ConsensusStateGetResponse.entries)
  return &entries_;
}
inline const ::ConsensusStateEntry& ConsensusStateGetResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:ConsensusStateGetResponse.entries)
  return entries_.Get(index);
}
inline ::ConsensusStateEntry* ConsensusStateGetResponse::add_entries() {
  // @@protoc_insertion_point(field_add:ConsensusStateGetResponse.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConsensusStateEntry >&
ConsensusStateGetResponse::entries() const {
  // @@protoc_insertion_point(field_list:ConsensusStateGetResponse.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ConsensusRegisterResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusRegisterResponse_Status>() {
  return ::ConsensusRegisterResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusSendToResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusSendToResponse_Status>() {
  return ::ConsensusSendToResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusBroadcastResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusBroadcastResponse_Status>() {
  return ::ConsensusBroadcastResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusInitializeBlockResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusInitializeBlockResponse_Status>() {
  return ::ConsensusInitializeBlockResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusSummarizeBlockResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusSummarizeBlockResponse_Status>() {
  return ::ConsensusSummarizeBlockResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusFinalizeBlockResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusFinalizeBlockResponse_Status>() {
  return ::ConsensusFinalizeBlockResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusCancelBlockResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusCancelBlockResponse_Status>() {
  return ::ConsensusCancelBlockResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusCheckBlocksResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusCheckBlocksResponse_Status>() {
  return ::ConsensusCheckBlocksResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusCommitBlockResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusCommitBlockResponse_Status>() {
  return ::ConsensusCommitBlockResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusIgnoreBlockResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusIgnoreBlockResponse_Status>() {
  return ::ConsensusIgnoreBlockResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusFailBlockResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusFailBlockResponse_Status>() {
  return ::ConsensusFailBlockResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusBlocksGetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusBlocksGetResponse_Status>() {
  return ::ConsensusBlocksGetResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusChainHeadGetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusChainHeadGetResponse_Status>() {
  return ::ConsensusChainHeadGetResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusSettingsGetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusSettingsGetResponse_Status>() {
  return ::ConsensusSettingsGetResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::ConsensusStateGetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConsensusStateGetResponse_Status>() {
  return ::ConsensusStateGetResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_consensus_2eproto
