// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: batch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_batch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_batch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transaction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_batch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_batch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_batch_2eproto;
class Batch;
class BatchDefaultTypeInternal;
extern BatchDefaultTypeInternal _Batch_default_instance_;
class BatchHeader;
class BatchHeaderDefaultTypeInternal;
extern BatchHeaderDefaultTypeInternal _BatchHeader_default_instance_;
class BatchList;
class BatchListDefaultTypeInternal;
extern BatchListDefaultTypeInternal _BatchList_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Batch* Arena::CreateMaybeMessage<::Batch>(Arena*);
template<> ::BatchHeader* Arena::CreateMaybeMessage<::BatchHeader>(Arena*);
template<> ::BatchList* Arena::CreateMaybeMessage<::BatchList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class BatchHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BatchHeader) */ {
 public:
  BatchHeader();
  virtual ~BatchHeader();

  BatchHeader(const BatchHeader& from);
  BatchHeader(BatchHeader&& from) noexcept
    : BatchHeader() {
    *this = ::std::move(from);
  }

  inline BatchHeader& operator=(const BatchHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchHeader& operator=(BatchHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchHeader* internal_default_instance() {
    return reinterpret_cast<const BatchHeader*>(
               &_BatchHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BatchHeader* other);
  friend void swap(BatchHeader& a, BatchHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchHeader* New() const final {
    return CreateMaybeMessage<BatchHeader>(nullptr);
  }

  BatchHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchHeader& from);
  void MergeFrom(const BatchHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BatchHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_batch_2eproto);
    return ::descriptor_table_batch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string transaction_ids = 2;
  int transaction_ids_size() const;
  void clear_transaction_ids();
  static const int kTransactionIdsFieldNumber = 2;
  const std::string& transaction_ids(int index) const;
  std::string* mutable_transaction_ids(int index);
  void set_transaction_ids(int index, const std::string& value);
  void set_transaction_ids(int index, std::string&& value);
  void set_transaction_ids(int index, const char* value);
  void set_transaction_ids(int index, const char* value, size_t size);
  std::string* add_transaction_ids();
  void add_transaction_ids(const std::string& value);
  void add_transaction_ids(std::string&& value);
  void add_transaction_ids(const char* value);
  void add_transaction_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transaction_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transaction_ids();

  // string signer_public_key = 1;
  void clear_signer_public_key();
  static const int kSignerPublicKeyFieldNumber = 1;
  const std::string& signer_public_key() const;
  void set_signer_public_key(const std::string& value);
  void set_signer_public_key(std::string&& value);
  void set_signer_public_key(const char* value);
  void set_signer_public_key(const char* value, size_t size);
  std::string* mutable_signer_public_key();
  std::string* release_signer_public_key();
  void set_allocated_signer_public_key(std::string* signer_public_key);

  // @@protoc_insertion_point(class_scope:BatchHeader)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transaction_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_batch_2eproto;
};
// -------------------------------------------------------------------

class Batch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Batch) */ {
 public:
  Batch();
  virtual ~Batch();

  Batch(const Batch& from);
  Batch(Batch&& from) noexcept
    : Batch() {
    *this = ::std::move(from);
  }

  inline Batch& operator=(const Batch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Batch& operator=(Batch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Batch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Batch* internal_default_instance() {
    return reinterpret_cast<const Batch*>(
               &_Batch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Batch* other);
  friend void swap(Batch& a, Batch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Batch* New() const final {
    return CreateMaybeMessage<Batch>(nullptr);
  }

  Batch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Batch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Batch& from);
  void MergeFrom(const Batch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Batch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Batch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_batch_2eproto);
    return ::descriptor_table_batch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Transaction transactions = 3;
  int transactions_size() const;
  void clear_transactions();
  static const int kTransactionsFieldNumber = 3;
  ::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Transaction >*
      mutable_transactions();
  const ::Transaction& transactions(int index) const;
  ::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Transaction >&
      transactions() const;

  // bytes header = 1;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const std::string& header() const;
  void set_header(const std::string& value);
  void set_header(std::string&& value);
  void set_header(const char* value);
  void set_header(const void* value, size_t size);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);

  // string header_signature = 2;
  void clear_header_signature();
  static const int kHeaderSignatureFieldNumber = 2;
  const std::string& header_signature() const;
  void set_header_signature(const std::string& value);
  void set_header_signature(std::string&& value);
  void set_header_signature(const char* value);
  void set_header_signature(const char* value, size_t size);
  std::string* mutable_header_signature();
  std::string* release_header_signature();
  void set_allocated_header_signature(std::string* header_signature);

  // bool trace = 4;
  void clear_trace();
  static const int kTraceFieldNumber = 4;
  bool trace() const;
  void set_trace(bool value);

  // @@protoc_insertion_point(class_scope:Batch)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Transaction > transactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_signature_;
  bool trace_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_batch_2eproto;
};
// -------------------------------------------------------------------

class BatchList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BatchList) */ {
 public:
  BatchList();
  virtual ~BatchList();

  BatchList(const BatchList& from);
  BatchList(BatchList&& from) noexcept
    : BatchList() {
    *this = ::std::move(from);
  }

  inline BatchList& operator=(const BatchList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchList& operator=(BatchList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchList* internal_default_instance() {
    return reinterpret_cast<const BatchList*>(
               &_BatchList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BatchList* other);
  friend void swap(BatchList& a, BatchList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchList* New() const final {
    return CreateMaybeMessage<BatchList>(nullptr);
  }

  BatchList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchList& from);
  void MergeFrom(const BatchList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BatchList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_batch_2eproto);
    return ::descriptor_table_batch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Batch batches = 1;
  int batches_size() const;
  void clear_batches();
  static const int kBatchesFieldNumber = 1;
  ::Batch* mutable_batches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >*
      mutable_batches();
  const ::Batch& batches(int index) const;
  ::Batch* add_batches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >&
      batches() const;

  // @@protoc_insertion_point(class_scope:BatchList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch > batches_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_batch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatchHeader

// string signer_public_key = 1;
inline void BatchHeader::clear_signer_public_key() {
  signer_public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BatchHeader::signer_public_key() const {
  // @@protoc_insertion_point(field_get:BatchHeader.signer_public_key)
  return signer_public_key_.GetNoArena();
}
inline void BatchHeader::set_signer_public_key(const std::string& value) {
  
  signer_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BatchHeader.signer_public_key)
}
inline void BatchHeader::set_signer_public_key(std::string&& value) {
  
  signer_public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BatchHeader.signer_public_key)
}
inline void BatchHeader::set_signer_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signer_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BatchHeader.signer_public_key)
}
inline void BatchHeader::set_signer_public_key(const char* value, size_t size) {
  
  signer_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BatchHeader.signer_public_key)
}
inline std::string* BatchHeader::mutable_signer_public_key() {
  
  // @@protoc_insertion_point(field_mutable:BatchHeader.signer_public_key)
  return signer_public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BatchHeader::release_signer_public_key() {
  // @@protoc_insertion_point(field_release:BatchHeader.signer_public_key)
  
  return signer_public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BatchHeader::set_allocated_signer_public_key(std::string* signer_public_key) {
  if (signer_public_key != nullptr) {
    
  } else {
    
  }
  signer_public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signer_public_key);
  // @@protoc_insertion_point(field_set_allocated:BatchHeader.signer_public_key)
}

// repeated string transaction_ids = 2;
inline int BatchHeader::transaction_ids_size() const {
  return transaction_ids_.size();
}
inline void BatchHeader::clear_transaction_ids() {
  transaction_ids_.Clear();
}
inline const std::string& BatchHeader::transaction_ids(int index) const {
  // @@protoc_insertion_point(field_get:BatchHeader.transaction_ids)
  return transaction_ids_.Get(index);
}
inline std::string* BatchHeader::mutable_transaction_ids(int index) {
  // @@protoc_insertion_point(field_mutable:BatchHeader.transaction_ids)
  return transaction_ids_.Mutable(index);
}
inline void BatchHeader::set_transaction_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BatchHeader.transaction_ids)
  transaction_ids_.Mutable(index)->assign(value);
}
inline void BatchHeader::set_transaction_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BatchHeader.transaction_ids)
  transaction_ids_.Mutable(index)->assign(std::move(value));
}
inline void BatchHeader::set_transaction_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BatchHeader.transaction_ids)
}
inline void BatchHeader::set_transaction_ids(int index, const char* value, size_t size) {
  transaction_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BatchHeader.transaction_ids)
}
inline std::string* BatchHeader::add_transaction_ids() {
  // @@protoc_insertion_point(field_add_mutable:BatchHeader.transaction_ids)
  return transaction_ids_.Add();
}
inline void BatchHeader::add_transaction_ids(const std::string& value) {
  transaction_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BatchHeader.transaction_ids)
}
inline void BatchHeader::add_transaction_ids(std::string&& value) {
  transaction_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BatchHeader.transaction_ids)
}
inline void BatchHeader::add_transaction_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BatchHeader.transaction_ids)
}
inline void BatchHeader::add_transaction_ids(const char* value, size_t size) {
  transaction_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BatchHeader.transaction_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchHeader::transaction_ids() const {
  // @@protoc_insertion_point(field_list:BatchHeader.transaction_ids)
  return transaction_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatchHeader::mutable_transaction_ids() {
  // @@protoc_insertion_point(field_mutable_list:BatchHeader.transaction_ids)
  return &transaction_ids_;
}

// -------------------------------------------------------------------

// Batch

// bytes header = 1;
inline void Batch::clear_header() {
  header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Batch::header() const {
  // @@protoc_insertion_point(field_get:Batch.header)
  return header_.GetNoArena();
}
inline void Batch::set_header(const std::string& value) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Batch.header)
}
inline void Batch::set_header(std::string&& value) {
  
  header_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Batch.header)
}
inline void Batch::set_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Batch.header)
}
inline void Batch::set_header(const void* value, size_t size) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Batch.header)
}
inline std::string* Batch::mutable_header() {
  
  // @@protoc_insertion_point(field_mutable:Batch.header)
  return header_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Batch::release_header() {
  // @@protoc_insertion_point(field_release:Batch.header)
  
  return header_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Batch::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:Batch.header)
}

// string header_signature = 2;
inline void Batch::clear_header_signature() {
  header_signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Batch::header_signature() const {
  // @@protoc_insertion_point(field_get:Batch.header_signature)
  return header_signature_.GetNoArena();
}
inline void Batch::set_header_signature(const std::string& value) {
  
  header_signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Batch.header_signature)
}
inline void Batch::set_header_signature(std::string&& value) {
  
  header_signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Batch.header_signature)
}
inline void Batch::set_header_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Batch.header_signature)
}
inline void Batch::set_header_signature(const char* value, size_t size) {
  
  header_signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Batch.header_signature)
}
inline std::string* Batch::mutable_header_signature() {
  
  // @@protoc_insertion_point(field_mutable:Batch.header_signature)
  return header_signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Batch::release_header_signature() {
  // @@protoc_insertion_point(field_release:Batch.header_signature)
  
  return header_signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Batch::set_allocated_header_signature(std::string* header_signature) {
  if (header_signature != nullptr) {
    
  } else {
    
  }
  header_signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header_signature);
  // @@protoc_insertion_point(field_set_allocated:Batch.header_signature)
}

// repeated .Transaction transactions = 3;
inline int Batch::transactions_size() const {
  return transactions_.size();
}
inline ::Transaction* Batch::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:Batch.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Transaction >*
Batch::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:Batch.transactions)
  return &transactions_;
}
inline const ::Transaction& Batch::transactions(int index) const {
  // @@protoc_insertion_point(field_get:Batch.transactions)
  return transactions_.Get(index);
}
inline ::Transaction* Batch::add_transactions() {
  // @@protoc_insertion_point(field_add:Batch.transactions)
  return transactions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Transaction >&
Batch::transactions() const {
  // @@protoc_insertion_point(field_list:Batch.transactions)
  return transactions_;
}

// bool trace = 4;
inline void Batch::clear_trace() {
  trace_ = false;
}
inline bool Batch::trace() const {
  // @@protoc_insertion_point(field_get:Batch.trace)
  return trace_;
}
inline void Batch::set_trace(bool value) {
  
  trace_ = value;
  // @@protoc_insertion_point(field_set:Batch.trace)
}

// -------------------------------------------------------------------

// BatchList

// repeated .Batch batches = 1;
inline int BatchList::batches_size() const {
  return batches_.size();
}
inline void BatchList::clear_batches() {
  batches_.Clear();
}
inline ::Batch* BatchList::mutable_batches(int index) {
  // @@protoc_insertion_point(field_mutable:BatchList.batches)
  return batches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >*
BatchList::mutable_batches() {
  // @@protoc_insertion_point(field_mutable_list:BatchList.batches)
  return &batches_;
}
inline const ::Batch& BatchList::batches(int index) const {
  // @@protoc_insertion_point(field_get:BatchList.batches)
  return batches_.Get(index);
}
inline ::Batch* BatchList::add_batches() {
  // @@protoc_insertion_point(field_add:BatchList.batches)
  return batches_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Batch >&
BatchList::batches() const {
  // @@protoc_insertion_point(field_list:BatchList.batches)
  return batches_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_batch_2eproto
