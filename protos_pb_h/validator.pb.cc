// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: validator.proto

#include "validator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_validator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_validator_2eproto;
class MessageListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageList> _instance;
} _MessageList_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
static void InitDefaultsscc_info_Message_validator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Message_default_instance_;
    new (ptr) ::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_validator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Message_validator_2eproto}, {}};

static void InitDefaultsscc_info_MessageList_validator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MessageList_default_instance_;
    new (ptr) ::MessageList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MessageList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageList_validator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MessageList_validator_2eproto}, {
      &scc_info_Message_validator_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_validator_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_validator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_validator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_validator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MessageList, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Message, message_type_),
  PROTOBUF_FIELD_OFFSET(::Message, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::Message, content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MessageList)},
  { 6, -1, sizeof(::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessageList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Message_default_instance_),
};

const char descriptor_table_protodef_validator_2eproto[] =
  "\n\017validator.proto\")\n\013MessageList\022\032\n\010mess"
  "ages\030\001 \003(\0132\010.Message\"\200\037\n\007Message\022*\n\014mess"
  "age_type\030\001 \001(\0162\024.Message.MessageType\022\026\n\016"
  "correlation_id\030\002 \001(\t\022\017\n\007content\030\003 \001(\014\"\237\036"
  "\n\013MessageType\022\013\n\007DEFAULT\020\000\022\027\n\023TP_REGISTE"
  "R_REQUEST\020\001\022\030\n\024TP_REGISTER_RESPONSE\020\002\022\031\n"
  "\025TP_UNREGISTER_REQUEST\020\003\022\032\n\026TP_UNREGISTE"
  "R_RESPONSE\020\004\022\026\n\022TP_PROCESS_REQUEST\020\005\022\027\n\023"
  "TP_PROCESS_RESPONSE\020\006\022\030\n\024TP_STATE_GET_RE"
  "QUEST\020\007\022\031\n\025TP_STATE_GET_RESPONSE\020\010\022\030\n\024TP"
  "_STATE_SET_REQUEST\020\t\022\031\n\025TP_STATE_SET_RES"
  "PONSE\020\n\022\033\n\027TP_STATE_DELETE_REQUEST\020\013\022\034\n\030"
  "TP_STATE_DELETE_RESPONSE\020\014\022\037\n\033TP_RECEIPT"
  "_ADD_DATA_REQUEST\020\r\022 \n\034TP_RECEIPT_ADD_DA"
  "TA_RESPONSE\020\016\022\030\n\024TP_EVENT_ADD_REQUEST\020\017\022"
  "\031\n\025TP_EVENT_ADD_RESPONSE\020\020\022\037\n\033CLIENT_BAT"
  "CH_SUBMIT_REQUEST\020d\022 \n\034CLIENT_BATCH_SUBM"
  "IT_RESPONSE\020e\022\035\n\031CLIENT_BLOCK_LIST_REQUE"
  "ST\020f\022\036\n\032CLIENT_BLOCK_LIST_RESPONSE\020g\022\"\n\036"
  "CLIENT_BLOCK_GET_BY_ID_REQUEST\020h\022\035\n\031CLIE"
  "NT_BLOCK_GET_RESPONSE\020i\022\035\n\031CLIENT_BATCH_"
  "LIST_REQUEST\020j\022\036\n\032CLIENT_BATCH_LIST_RESP"
  "ONSE\020k\022\034\n\030CLIENT_BATCH_GET_REQUEST\020l\022\035\n\031"
  "CLIENT_BATCH_GET_RESPONSE\020m\022#\n\037CLIENT_TR"
  "ANSACTION_LIST_REQUEST\020n\022$\n CLIENT_TRANS"
  "ACTION_LIST_RESPONSE\020o\022\"\n\036CLIENT_TRANSAC"
  "TION_GET_REQUEST\020p\022#\n\037CLIENT_TRANSACTION"
  "_GET_RESPONSE\020q\022 \n\034CLIENT_STATE_CURRENT_"
  "REQUEST\020r\022!\n\035CLIENT_STATE_CURRENT_RESPON"
  "SE\020s\022\035\n\031CLIENT_STATE_LIST_REQUEST\020t\022\036\n\032C"
  "LIENT_STATE_LIST_RESPONSE\020u\022\034\n\030CLIENT_ST"
  "ATE_GET_REQUEST\020v\022\035\n\031CLIENT_STATE_GET_RE"
  "SPONSE\020w\022\037\n\033CLIENT_BATCH_STATUS_REQUEST\020"
  "x\022 \n\034CLIENT_BATCH_STATUS_RESPONSE\020y\022\036\n\032C"
  "LIENT_RECEIPT_GET_REQUEST\020z\022\037\n\033CLIENT_RE"
  "CEIPT_GET_RESPONSE\020{\022#\n\037CLIENT_BLOCK_GET"
  "_BY_NUM_REQUEST\020|\022\034\n\030CLIENT_PEERS_GET_RE"
  "QUEST\020}\022\035\n\031CLIENT_PEERS_GET_RESPONSE\020~\022."
  "\n*CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQ"
  "UEST\020\177\022)\n$CLIENT_BLOCK_GET_BY_BATCH_ID_R"
  "EQUEST\020\200\001\022\036\n\031CLIENT_STATUS_GET_REQUEST\020\201"
  "\001\022\037\n\032CLIENT_STATUS_GET_RESPONSE\020\202\001\022$\n\037CL"
  "IENT_EVENTS_SUBSCRIBE_REQUEST\020\364\003\022%\n CLIE"
  "NT_EVENTS_SUBSCRIBE_RESPONSE\020\365\003\022&\n!CLIEN"
  "T_EVENTS_UNSUBSCRIBE_REQUEST\020\366\003\022\'\n\"CLIEN"
  "T_EVENTS_UNSUBSCRIBE_RESPONSE\020\367\003\022\022\n\rCLIE"
  "NT_EVENTS\020\370\003\022\036\n\031CLIENT_EVENTS_GET_REQUES"
  "T\020\371\003\022\037\n\032CLIENT_EVENTS_GET_RESPONSE\020\372\003\022\023\n"
  "\016GOSSIP_MESSAGE\020\310\001\022\024\n\017GOSSIP_REGISTER\020\311\001"
  "\022\026\n\021GOSSIP_UNREGISTER\020\312\001\022\031\n\024GOSSIP_BLOCK"
  "_REQUEST\020\315\001\022\032\n\025GOSSIP_BLOCK_RESPONSE\020\316\001\022"
  "%\n GOSSIP_BATCH_BY_BATCH_ID_REQUEST\020\317\001\022+"
  "\n&GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST"
  "\020\320\001\022\032\n\025GOSSIP_BATCH_RESPONSE\020\321\001\022\035\n\030GOSSI"
  "P_GET_PEERS_REQUEST\020\322\001\022\036\n\031GOSSIP_GET_PEE"
  "RS_RESPONSE\020\323\001\022\035\n\030GOSSIP_CONSENSUS_MESSA"
  "GE\020\324\001\022\020\n\013NETWORK_ACK\020\254\002\022\024\n\017NETWORK_CONNE"
  "CT\020\255\002\022\027\n\022NETWORK_DISCONNECT\020\256\002\022&\n!AUTHOR"
  "IZATION_CONNECTION_RESPONSE\020\330\004\022\034\n\027AUTHOR"
  "IZATION_VIOLATION\020\331\004\022 \n\033AUTHORIZATION_TR"
  "UST_REQUEST\020\332\004\022!\n\034AUTHORIZATION_TRUST_RE"
  "SPONSE\020\333\004\022$\n\037AUTHORIZATION_CHALLENGE_REQ"
  "UEST\020\334\004\022%\n AUTHORIZATION_CHALLENGE_RESPO"
  "NSE\020\335\004\022#\n\036AUTHORIZATION_CHALLENGE_SUBMIT"
  "\020\336\004\022#\n\036AUTHORIZATION_CHALLENGE_RESULT\020\337\004"
  "\022\021\n\014PING_REQUEST\020\274\005\022\022\n\rPING_RESPONSE\020\275\005\022"
  "\037\n\032CONSENSUS_REGISTER_REQUEST\020\240\006\022 \n\033CONS"
  "ENSUS_REGISTER_RESPONSE\020\241\006\022\036\n\031CONSENSUS_"
  "SEND_TO_REQUEST\020\242\006\022\037\n\032CONSENSUS_SEND_TO_"
  "RESPONSE\020\243\006\022 \n\033CONSENSUS_BROADCAST_REQUE"
  "ST\020\244\006\022!\n\034CONSENSUS_BROADCAST_RESPONSE\020\245\006"
  "\022\'\n\"CONSENSUS_INITIALIZE_BLOCK_REQUEST\020\246"
  "\006\022(\n#CONSENSUS_INITIALIZE_BLOCK_RESPONSE"
  "\020\247\006\022%\n CONSENSUS_FINALIZE_BLOCK_REQUEST\020"
  "\250\006\022&\n!CONSENSUS_FINALIZE_BLOCK_RESPONSE\020"
  "\251\006\022&\n!CONSENSUS_SUMMARIZE_BLOCK_REQUEST\020"
  "\274\006\022\'\n\"CONSENSUS_SUMMARIZE_BLOCK_RESPONSE"
  "\020\275\006\022#\n\036CONSENSUS_CANCEL_BLOCK_REQUEST\020\252\006"
  "\022$\n\037CONSENSUS_CANCEL_BLOCK_RESPONSE\020\253\006\022#"
  "\n\036CONSENSUS_CHECK_BLOCKS_REQUEST\020\254\006\022$\n\037C"
  "ONSENSUS_CHECK_BLOCKS_RESPONSE\020\255\006\022#\n\036CON"
  "SENSUS_COMMIT_BLOCK_REQUEST\020\256\006\022$\n\037CONSEN"
  "SUS_COMMIT_BLOCK_RESPONSE\020\257\006\022#\n\036CONSENSU"
  "S_IGNORE_BLOCK_REQUEST\020\260\006\022$\n\037CONSENSUS_I"
  "GNORE_BLOCK_RESPONSE\020\261\006\022!\n\034CONSENSUS_FAI"
  "L_BLOCK_REQUEST\020\262\006\022\"\n\035CONSENSUS_FAIL_BLO"
  "CK_RESPONSE\020\263\006\022#\n\036CONSENSUS_SETTINGS_GET"
  "_REQUEST\020\264\006\022$\n\037CONSENSUS_SETTINGS_GET_RE"
  "SPONSE\020\265\006\022 \n\033CONSENSUS_STATE_GET_REQUEST"
  "\020\266\006\022!\n\034CONSENSUS_STATE_GET_RESPONSE\020\267\006\022!"
  "\n\034CONSENSUS_BLOCKS_GET_REQUEST\020\270\006\022\"\n\035CON"
  "SENSUS_BLOCKS_GET_RESPONSE\020\271\006\022%\n CONSENS"
  "US_CHAIN_HEAD_GET_REQUEST\020\272\006\022&\n!CONSENSU"
  "S_CHAIN_HEAD_GET_RESPONSE\020\273\006\022$\n\037CONSENSU"
  "S_NOTIFY_PEER_CONNECTED\020\204\007\022\'\n\"CONSENSUS_"
  "NOTIFY_PEER_DISCONNECTED\020\205\007\022\"\n\035CONSENSUS"
  "_NOTIFY_PEER_MESSAGE\020\206\007\022\037\n\032CONSENSUS_NOT"
  "IFY_BLOCK_NEW\020\207\007\022!\n\034CONSENSUS_NOTIFY_BLO"
  "CK_VALID\020\210\007\022#\n\036CONSENSUS_NOTIFY_BLOCK_IN"
  "VALID\020\211\007\022\"\n\035CONSENSUS_NOTIFY_BLOCK_COMMI"
  "T\020\212\007\022\031\n\024CONSENSUS_NOTIFY_ACK\020\347\007B(\n\025sawto"
  "oth.sdk.protobufP\001Z\rvalidator_pb2b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_validator_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_validator_2eproto_sccs[2] = {
  &scc_info_Message_validator_2eproto.base,
  &scc_info_MessageList_validator_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_validator_2eproto_once;
static bool descriptor_table_validator_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_validator_2eproto = {
  &descriptor_table_validator_2eproto_initialized, descriptor_table_protodef_validator_2eproto, "validator.proto", 4081,
  &descriptor_table_validator_2eproto_once, descriptor_table_validator_2eproto_sccs, descriptor_table_validator_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_validator_2eproto::offsets,
  file_level_metadata_validator_2eproto, 2, file_level_enum_descriptors_validator_2eproto, file_level_service_descriptors_validator_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_validator_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_validator_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_validator_2eproto);
  return file_level_enum_descriptors_validator_2eproto[0];
}
bool Message_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 200:
    case 201:
    case 202:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 300:
    case 301:
    case 302:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 700:
    case 701:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 826:
    case 827:
    case 828:
    case 829:
    case 900:
    case 901:
    case 902:
    case 903:
    case 904:
    case 905:
    case 906:
    case 999:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Message_MessageType Message::DEFAULT;
constexpr Message_MessageType Message::TP_REGISTER_REQUEST;
constexpr Message_MessageType Message::TP_REGISTER_RESPONSE;
constexpr Message_MessageType Message::TP_UNREGISTER_REQUEST;
constexpr Message_MessageType Message::TP_UNREGISTER_RESPONSE;
constexpr Message_MessageType Message::TP_PROCESS_REQUEST;
constexpr Message_MessageType Message::TP_PROCESS_RESPONSE;
constexpr Message_MessageType Message::TP_STATE_GET_REQUEST;
constexpr Message_MessageType Message::TP_STATE_GET_RESPONSE;
constexpr Message_MessageType Message::TP_STATE_SET_REQUEST;
constexpr Message_MessageType Message::TP_STATE_SET_RESPONSE;
constexpr Message_MessageType Message::TP_STATE_DELETE_REQUEST;
constexpr Message_MessageType Message::TP_STATE_DELETE_RESPONSE;
constexpr Message_MessageType Message::TP_RECEIPT_ADD_DATA_REQUEST;
constexpr Message_MessageType Message::TP_RECEIPT_ADD_DATA_RESPONSE;
constexpr Message_MessageType Message::TP_EVENT_ADD_REQUEST;
constexpr Message_MessageType Message::TP_EVENT_ADD_RESPONSE;
constexpr Message_MessageType Message::CLIENT_BATCH_SUBMIT_REQUEST;
constexpr Message_MessageType Message::CLIENT_BATCH_SUBMIT_RESPONSE;
constexpr Message_MessageType Message::CLIENT_BLOCK_LIST_REQUEST;
constexpr Message_MessageType Message::CLIENT_BLOCK_LIST_RESPONSE;
constexpr Message_MessageType Message::CLIENT_BLOCK_GET_BY_ID_REQUEST;
constexpr Message_MessageType Message::CLIENT_BLOCK_GET_RESPONSE;
constexpr Message_MessageType Message::CLIENT_BATCH_LIST_REQUEST;
constexpr Message_MessageType Message::CLIENT_BATCH_LIST_RESPONSE;
constexpr Message_MessageType Message::CLIENT_BATCH_GET_REQUEST;
constexpr Message_MessageType Message::CLIENT_BATCH_GET_RESPONSE;
constexpr Message_MessageType Message::CLIENT_TRANSACTION_LIST_REQUEST;
constexpr Message_MessageType Message::CLIENT_TRANSACTION_LIST_RESPONSE;
constexpr Message_MessageType Message::CLIENT_TRANSACTION_GET_REQUEST;
constexpr Message_MessageType Message::CLIENT_TRANSACTION_GET_RESPONSE;
constexpr Message_MessageType Message::CLIENT_STATE_CURRENT_REQUEST;
constexpr Message_MessageType Message::CLIENT_STATE_CURRENT_RESPONSE;
constexpr Message_MessageType Message::CLIENT_STATE_LIST_REQUEST;
constexpr Message_MessageType Message::CLIENT_STATE_LIST_RESPONSE;
constexpr Message_MessageType Message::CLIENT_STATE_GET_REQUEST;
constexpr Message_MessageType Message::CLIENT_STATE_GET_RESPONSE;
constexpr Message_MessageType Message::CLIENT_BATCH_STATUS_REQUEST;
constexpr Message_MessageType Message::CLIENT_BATCH_STATUS_RESPONSE;
constexpr Message_MessageType Message::CLIENT_RECEIPT_GET_REQUEST;
constexpr Message_MessageType Message::CLIENT_RECEIPT_GET_RESPONSE;
constexpr Message_MessageType Message::CLIENT_BLOCK_GET_BY_NUM_REQUEST;
constexpr Message_MessageType Message::CLIENT_PEERS_GET_REQUEST;
constexpr Message_MessageType Message::CLIENT_PEERS_GET_RESPONSE;
constexpr Message_MessageType Message::CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST;
constexpr Message_MessageType Message::CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST;
constexpr Message_MessageType Message::CLIENT_STATUS_GET_REQUEST;
constexpr Message_MessageType Message::CLIENT_STATUS_GET_RESPONSE;
constexpr Message_MessageType Message::CLIENT_EVENTS_SUBSCRIBE_REQUEST;
constexpr Message_MessageType Message::CLIENT_EVENTS_SUBSCRIBE_RESPONSE;
constexpr Message_MessageType Message::CLIENT_EVENTS_UNSUBSCRIBE_REQUEST;
constexpr Message_MessageType Message::CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE;
constexpr Message_MessageType Message::CLIENT_EVENTS;
constexpr Message_MessageType Message::CLIENT_EVENTS_GET_REQUEST;
constexpr Message_MessageType Message::CLIENT_EVENTS_GET_RESPONSE;
constexpr Message_MessageType Message::GOSSIP_MESSAGE;
constexpr Message_MessageType Message::GOSSIP_REGISTER;
constexpr Message_MessageType Message::GOSSIP_UNREGISTER;
constexpr Message_MessageType Message::GOSSIP_BLOCK_REQUEST;
constexpr Message_MessageType Message::GOSSIP_BLOCK_RESPONSE;
constexpr Message_MessageType Message::GOSSIP_BATCH_BY_BATCH_ID_REQUEST;
constexpr Message_MessageType Message::GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST;
constexpr Message_MessageType Message::GOSSIP_BATCH_RESPONSE;
constexpr Message_MessageType Message::GOSSIP_GET_PEERS_REQUEST;
constexpr Message_MessageType Message::GOSSIP_GET_PEERS_RESPONSE;
constexpr Message_MessageType Message::GOSSIP_CONSENSUS_MESSAGE;
constexpr Message_MessageType Message::NETWORK_ACK;
constexpr Message_MessageType Message::NETWORK_CONNECT;
constexpr Message_MessageType Message::NETWORK_DISCONNECT;
constexpr Message_MessageType Message::AUTHORIZATION_CONNECTION_RESPONSE;
constexpr Message_MessageType Message::AUTHORIZATION_VIOLATION;
constexpr Message_MessageType Message::AUTHORIZATION_TRUST_REQUEST;
constexpr Message_MessageType Message::AUTHORIZATION_TRUST_RESPONSE;
constexpr Message_MessageType Message::AUTHORIZATION_CHALLENGE_REQUEST;
constexpr Message_MessageType Message::AUTHORIZATION_CHALLENGE_RESPONSE;
constexpr Message_MessageType Message::AUTHORIZATION_CHALLENGE_SUBMIT;
constexpr Message_MessageType Message::AUTHORIZATION_CHALLENGE_RESULT;
constexpr Message_MessageType Message::PING_REQUEST;
constexpr Message_MessageType Message::PING_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_REGISTER_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_REGISTER_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_SEND_TO_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_SEND_TO_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_BROADCAST_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_BROADCAST_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_INITIALIZE_BLOCK_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_INITIALIZE_BLOCK_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_FINALIZE_BLOCK_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_FINALIZE_BLOCK_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_SUMMARIZE_BLOCK_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_SUMMARIZE_BLOCK_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_CANCEL_BLOCK_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_CANCEL_BLOCK_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_CHECK_BLOCKS_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_CHECK_BLOCKS_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_COMMIT_BLOCK_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_COMMIT_BLOCK_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_IGNORE_BLOCK_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_IGNORE_BLOCK_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_FAIL_BLOCK_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_FAIL_BLOCK_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_SETTINGS_GET_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_SETTINGS_GET_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_STATE_GET_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_STATE_GET_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_BLOCKS_GET_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_BLOCKS_GET_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_CHAIN_HEAD_GET_REQUEST;
constexpr Message_MessageType Message::CONSENSUS_CHAIN_HEAD_GET_RESPONSE;
constexpr Message_MessageType Message::CONSENSUS_NOTIFY_PEER_CONNECTED;
constexpr Message_MessageType Message::CONSENSUS_NOTIFY_PEER_DISCONNECTED;
constexpr Message_MessageType Message::CONSENSUS_NOTIFY_PEER_MESSAGE;
constexpr Message_MessageType Message::CONSENSUS_NOTIFY_BLOCK_NEW;
constexpr Message_MessageType Message::CONSENSUS_NOTIFY_BLOCK_VALID;
constexpr Message_MessageType Message::CONSENSUS_NOTIFY_BLOCK_INVALID;
constexpr Message_MessageType Message::CONSENSUS_NOTIFY_BLOCK_COMMIT;
constexpr Message_MessageType Message::CONSENSUS_NOTIFY_ACK;
constexpr Message_MessageType Message::MessageType_MIN;
constexpr Message_MessageType Message::MessageType_MAX;
constexpr int Message::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MessageList::InitAsDefaultInstance() {
}
class MessageList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageList::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageList::MessageList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageList)
}
MessageList::MessageList(const MessageList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MessageList)
}

void MessageList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageList_validator_2eproto.base);
}

MessageList::~MessageList() {
  // @@protoc_insertion_point(destructor:MessageList)
  SharedDtor();
}

void MessageList::SharedDtor() {
}

void MessageList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageList& MessageList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageList_validator_2eproto.base);
  return *internal_default_instance();
}


void MessageList::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Message messages = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_messages(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 10) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Message messages = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MessageList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Message messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->messages(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageList)
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Message messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->messages(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageList)
  return target;
}

size_t MessageList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Message messages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MessageList)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MessageList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MessageList)
    MergeFrom(*source);
  }
}

void MessageList::MergeFrom(const MessageList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void MessageList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MessageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageList::CopyFrom(const MessageList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageList::IsInitialized() const {
  return true;
}

void MessageList::Swap(MessageList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageList::InternalSwap(MessageList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&messages_)->InternalSwap(CastToBase(&other->messages_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message::InitAsDefaultInstance() {
}
class Message::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kMessageTypeFieldNumber;
const int Message::kCorrelationIdFieldNumber;
const int Message::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  correlation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.correlation_id().size() > 0) {
    correlation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.correlation_id_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  message_type_ = from.message_type_;
  // @@protoc_insertion_point(copy_constructor:Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_validator_2eproto.base);
  correlation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_ = 0;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Message)
  SharedDtor();
}

void Message::SharedDtor() {
  correlation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_validator_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correlation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Message.MessageType message_type = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_message_type(static_cast<::Message_MessageType>(val));
        break;
      }
      // string correlation_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_correlation_id(), ptr, ctx, "Message.correlation_id");
        CHK_(ptr);
        break;
      }
      // bytes content = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_content(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Message.MessageType message_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_message_type(static_cast< ::Message_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string correlation_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_correlation_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->correlation_id().data(), static_cast<int>(this->correlation_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Message.correlation_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Message.MessageType message_type = 1;
  if (this->message_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }

  // string correlation_id = 2;
  if (this->correlation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->correlation_id().data(), static_cast<int>(this->correlation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Message.correlation_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->correlation_id(), output);
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Message)
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Message.MessageType message_type = 1;
  if (this->message_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_type(), target);
  }

  // string correlation_id = 2;
  if (this->correlation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->correlation_id().data(), static_cast<int>(this->correlation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Message.correlation_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->correlation_id(), target);
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string correlation_id = 2;
  if (this->correlation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->correlation_id());
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // .Message.MessageType message_type = 1;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->message_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.correlation_id().size() > 0) {

    correlation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.correlation_id_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  correlation_id_.Swap(&other->correlation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_type_, other->message_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MessageList* Arena::CreateMaybeMessage< ::MessageList >(Arena* arena) {
  return Arena::CreateInternal< ::MessageList >(arena);
}
template<> PROTOBUF_NOINLINE ::Message* Arena::CreateMaybeMessage< ::Message >(Arena* arena) {
  return Arena::CreateInternal< ::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
