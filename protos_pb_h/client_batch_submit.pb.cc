// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_batch_submit.proto

#include "client_batch_submit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_batch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Batch_batch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fbatch_5fsubmit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientBatchStatus_client_5fbatch_5fsubmit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fbatch_5fsubmit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientBatchStatus_InvalidTransaction_client_5fbatch_5fsubmit_2eproto;
class ClientBatchStatus_InvalidTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBatchStatus_InvalidTransaction> _instance;
} _ClientBatchStatus_InvalidTransaction_default_instance_;
class ClientBatchStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBatchStatus> _instance;
} _ClientBatchStatus_default_instance_;
class ClientBatchSubmitRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBatchSubmitRequest> _instance;
} _ClientBatchSubmitRequest_default_instance_;
class ClientBatchSubmitResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBatchSubmitResponse> _instance;
} _ClientBatchSubmitResponse_default_instance_;
class ClientBatchStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBatchStatusRequest> _instance;
} _ClientBatchStatusRequest_default_instance_;
class ClientBatchStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientBatchStatusResponse> _instance;
} _ClientBatchStatusResponse_default_instance_;
static void InitDefaultsscc_info_ClientBatchStatus_client_5fbatch_5fsubmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBatchStatus_default_instance_;
    new (ptr) ::ClientBatchStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBatchStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientBatchStatus_client_5fbatch_5fsubmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClientBatchStatus_client_5fbatch_5fsubmit_2eproto}, {
      &scc_info_ClientBatchStatus_InvalidTransaction_client_5fbatch_5fsubmit_2eproto.base,}};

static void InitDefaultsscc_info_ClientBatchStatus_InvalidTransaction_client_5fbatch_5fsubmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBatchStatus_InvalidTransaction_default_instance_;
    new (ptr) ::ClientBatchStatus_InvalidTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBatchStatus_InvalidTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientBatchStatus_InvalidTransaction_client_5fbatch_5fsubmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientBatchStatus_InvalidTransaction_client_5fbatch_5fsubmit_2eproto}, {}};

static void InitDefaultsscc_info_ClientBatchStatusRequest_client_5fbatch_5fsubmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBatchStatusRequest_default_instance_;
    new (ptr) ::ClientBatchStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBatchStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientBatchStatusRequest_client_5fbatch_5fsubmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientBatchStatusRequest_client_5fbatch_5fsubmit_2eproto}, {}};

static void InitDefaultsscc_info_ClientBatchStatusResponse_client_5fbatch_5fsubmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBatchStatusResponse_default_instance_;
    new (ptr) ::ClientBatchStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBatchStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientBatchStatusResponse_client_5fbatch_5fsubmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClientBatchStatusResponse_client_5fbatch_5fsubmit_2eproto}, {
      &scc_info_ClientBatchStatus_client_5fbatch_5fsubmit_2eproto.base,}};

static void InitDefaultsscc_info_ClientBatchSubmitRequest_client_5fbatch_5fsubmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBatchSubmitRequest_default_instance_;
    new (ptr) ::ClientBatchSubmitRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBatchSubmitRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientBatchSubmitRequest_client_5fbatch_5fsubmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClientBatchSubmitRequest_client_5fbatch_5fsubmit_2eproto}, {
      &scc_info_Batch_batch_2eproto.base,}};

static void InitDefaultsscc_info_ClientBatchSubmitResponse_client_5fbatch_5fsubmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientBatchSubmitResponse_default_instance_;
    new (ptr) ::ClientBatchSubmitResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientBatchSubmitResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientBatchSubmitResponse_client_5fbatch_5fsubmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientBatchSubmitResponse_client_5fbatch_5fsubmit_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_5fbatch_5fsubmit_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_5fbatch_5fsubmit_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_5fbatch_5fsubmit_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_client_5fbatch_5fsubmit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatus_InvalidTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatus_InvalidTransaction, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatus_InvalidTransaction, message_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatus_InvalidTransaction, extended_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatus, batch_id_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatus, status_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatus, invalid_transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBatchSubmitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBatchSubmitRequest, batches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBatchSubmitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBatchSubmitResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatusRequest, batch_ids_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatusRequest, wait_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatusRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatusResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ClientBatchStatusResponse, batch_statuses_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ClientBatchStatus_InvalidTransaction)},
  { 8, -1, sizeof(::ClientBatchStatus)},
  { 16, -1, sizeof(::ClientBatchSubmitRequest)},
  { 22, -1, sizeof(::ClientBatchSubmitResponse)},
  { 28, -1, sizeof(::ClientBatchStatusRequest)},
  { 36, -1, sizeof(::ClientBatchStatusResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBatchStatus_InvalidTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBatchStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBatchSubmitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBatchSubmitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBatchStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientBatchStatusResponse_default_instance_),
};

const char descriptor_table_protodef_client_5fbatch_5fsubmit_2eproto[] =
  "\n\031client_batch_submit.proto\032\013batch.proto"
  "\"\275\002\n\021ClientBatchStatus\022\020\n\010batch_id\030\001 \001(\t"
  "\022)\n\006status\030\002 \001(\0162\031.ClientBatchStatus.Sta"
  "tus\022C\n\024invalid_transactions\030\003 \003(\0132%.Clie"
  "ntBatchStatus.InvalidTransaction\032T\n\022Inva"
  "lidTransaction\022\026\n\016transaction_id\030\001 \001(\t\022\017"
  "\n\007message\030\002 \001(\t\022\025\n\rextended_data\030\003 \001(\014\"P"
  "\n\006Status\022\020\n\014STATUS_UNSET\020\000\022\r\n\tCOMMITTED\020"
  "\001\022\013\n\007INVALID\020\002\022\013\n\007PENDING\020\003\022\013\n\007UNKNOWN\020\004"
  "\"3\n\030ClientBatchSubmitRequest\022\027\n\007batches\030"
  "\001 \003(\0132\006.Batch\"\251\001\n\031ClientBatchSubmitRespo"
  "nse\0221\n\006status\030\001 \001(\0162!.ClientBatchSubmitR"
  "esponse.Status\"Y\n\006Status\022\020\n\014STATUS_UNSET"
  "\020\000\022\006\n\002OK\020\001\022\022\n\016INTERNAL_ERROR\020\002\022\021\n\rINVALI"
  "D_BATCH\020\003\022\016\n\nQUEUE_FULL\020\004\"L\n\030ClientBatch"
  "StatusRequest\022\021\n\tbatch_ids\030\001 \003(\t\022\014\n\004wait"
  "\030\002 \001(\010\022\017\n\007timeout\030\003 \001(\r\"\323\001\n\031ClientBatchS"
  "tatusResponse\0221\n\006status\030\001 \001(\0162!.ClientBa"
  "tchStatusResponse.Status\022*\n\016batch_status"
  "es\030\002 \003(\0132\022.ClientBatchStatus\"W\n\006Status\022\020"
  "\n\014STATUS_UNSET\020\000\022\006\n\002OK\020\001\022\022\n\016INTERNAL_ERR"
  "OR\020\002\022\017\n\013NO_RESOURCE\020\005\022\016\n\nINVALID_ID\020\010B2\n"
  "\025sawtooth.sdk.protobufP\001Z\027client_batch_s"
  "ubmit_pb2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_client_5fbatch_5fsubmit_2eproto_deps[1] = {
  &::descriptor_table_batch_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_client_5fbatch_5fsubmit_2eproto_sccs[6] = {
  &scc_info_ClientBatchStatus_client_5fbatch_5fsubmit_2eproto.base,
  &scc_info_ClientBatchStatus_InvalidTransaction_client_5fbatch_5fsubmit_2eproto.base,
  &scc_info_ClientBatchStatusRequest_client_5fbatch_5fsubmit_2eproto.base,
  &scc_info_ClientBatchStatusResponse_client_5fbatch_5fsubmit_2eproto.base,
  &scc_info_ClientBatchSubmitRequest_client_5fbatch_5fsubmit_2eproto.base,
  &scc_info_ClientBatchSubmitResponse_client_5fbatch_5fsubmit_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_5fbatch_5fsubmit_2eproto_once;
static bool descriptor_table_client_5fbatch_5fsubmit_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fbatch_5fsubmit_2eproto = {
  &descriptor_table_client_5fbatch_5fsubmit_2eproto_initialized, descriptor_table_protodef_client_5fbatch_5fsubmit_2eproto, "client_batch_submit.proto", 937,
  &descriptor_table_client_5fbatch_5fsubmit_2eproto_once, descriptor_table_client_5fbatch_5fsubmit_2eproto_sccs, descriptor_table_client_5fbatch_5fsubmit_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_client_5fbatch_5fsubmit_2eproto::offsets,
  file_level_metadata_client_5fbatch_5fsubmit_2eproto, 6, file_level_enum_descriptors_client_5fbatch_5fsubmit_2eproto, file_level_service_descriptors_client_5fbatch_5fsubmit_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_client_5fbatch_5fsubmit_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_client_5fbatch_5fsubmit_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBatchStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fbatch_5fsubmit_2eproto);
  return file_level_enum_descriptors_client_5fbatch_5fsubmit_2eproto[0];
}
bool ClientBatchStatus_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientBatchStatus_Status ClientBatchStatus::STATUS_UNSET;
constexpr ClientBatchStatus_Status ClientBatchStatus::COMMITTED;
constexpr ClientBatchStatus_Status ClientBatchStatus::INVALID;
constexpr ClientBatchStatus_Status ClientBatchStatus::PENDING;
constexpr ClientBatchStatus_Status ClientBatchStatus::UNKNOWN;
constexpr ClientBatchStatus_Status ClientBatchStatus::Status_MIN;
constexpr ClientBatchStatus_Status ClientBatchStatus::Status_MAX;
constexpr int ClientBatchStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBatchSubmitResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fbatch_5fsubmit_2eproto);
  return file_level_enum_descriptors_client_5fbatch_5fsubmit_2eproto[1];
}
bool ClientBatchSubmitResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientBatchSubmitResponse_Status ClientBatchSubmitResponse::STATUS_UNSET;
constexpr ClientBatchSubmitResponse_Status ClientBatchSubmitResponse::OK;
constexpr ClientBatchSubmitResponse_Status ClientBatchSubmitResponse::INTERNAL_ERROR;
constexpr ClientBatchSubmitResponse_Status ClientBatchSubmitResponse::INVALID_BATCH;
constexpr ClientBatchSubmitResponse_Status ClientBatchSubmitResponse::QUEUE_FULL;
constexpr ClientBatchSubmitResponse_Status ClientBatchSubmitResponse::Status_MIN;
constexpr ClientBatchSubmitResponse_Status ClientBatchSubmitResponse::Status_MAX;
constexpr int ClientBatchSubmitResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientBatchStatusResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fbatch_5fsubmit_2eproto);
  return file_level_enum_descriptors_client_5fbatch_5fsubmit_2eproto[2];
}
bool ClientBatchStatusResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 5:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientBatchStatusResponse_Status ClientBatchStatusResponse::STATUS_UNSET;
constexpr ClientBatchStatusResponse_Status ClientBatchStatusResponse::OK;
constexpr ClientBatchStatusResponse_Status ClientBatchStatusResponse::INTERNAL_ERROR;
constexpr ClientBatchStatusResponse_Status ClientBatchStatusResponse::NO_RESOURCE;
constexpr ClientBatchStatusResponse_Status ClientBatchStatusResponse::INVALID_ID;
constexpr ClientBatchStatusResponse_Status ClientBatchStatusResponse::Status_MIN;
constexpr ClientBatchStatusResponse_Status ClientBatchStatusResponse::Status_MAX;
constexpr int ClientBatchStatusResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ClientBatchStatus_InvalidTransaction::InitAsDefaultInstance() {
}
class ClientBatchStatus_InvalidTransaction::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBatchStatus_InvalidTransaction::kTransactionIdFieldNumber;
const int ClientBatchStatus_InvalidTransaction::kMessageFieldNumber;
const int ClientBatchStatus_InvalidTransaction::kExtendedDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBatchStatus_InvalidTransaction::ClientBatchStatus_InvalidTransaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBatchStatus.InvalidTransaction)
}
ClientBatchStatus_InvalidTransaction::ClientBatchStatus_InvalidTransaction(const ClientBatchStatus_InvalidTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.transaction_id().size() > 0) {
    transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  extended_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.extended_data().size() > 0) {
    extended_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extended_data_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientBatchStatus.InvalidTransaction)
}

void ClientBatchStatus_InvalidTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBatchStatus_InvalidTransaction_client_5fbatch_5fsubmit_2eproto.base);
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extended_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientBatchStatus_InvalidTransaction::~ClientBatchStatus_InvalidTransaction() {
  // @@protoc_insertion_point(destructor:ClientBatchStatus.InvalidTransaction)
  SharedDtor();
}

void ClientBatchStatus_InvalidTransaction::SharedDtor() {
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extended_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientBatchStatus_InvalidTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBatchStatus_InvalidTransaction& ClientBatchStatus_InvalidTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBatchStatus_InvalidTransaction_client_5fbatch_5fsubmit_2eproto.base);
  return *internal_default_instance();
}


void ClientBatchStatus_InvalidTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBatchStatus.InvalidTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extended_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBatchStatus_InvalidTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transaction_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_transaction_id(), ptr, ctx, "ClientBatchStatus.InvalidTransaction.transaction_id");
        CHK_(ptr);
        break;
      }
      // string message = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_message(), ptr, ctx, "ClientBatchStatus.InvalidTransaction.message");
        CHK_(ptr);
        break;
      }
      // bytes extended_data = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extended_data(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBatchStatus_InvalidTransaction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBatchStatus.InvalidTransaction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string transaction_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->transaction_id().data(), static_cast<int>(this->transaction_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBatchStatus.InvalidTransaction.transaction_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBatchStatus.InvalidTransaction.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes extended_data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extended_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBatchStatus.InvalidTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBatchStatus.InvalidTransaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBatchStatus_InvalidTransaction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBatchStatus.InvalidTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transaction_id = 1;
  if (this->transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transaction_id().data(), static_cast<int>(this->transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchStatus.InvalidTransaction.transaction_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transaction_id(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchStatus.InvalidTransaction.message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // bytes extended_data = 3;
  if (this->extended_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->extended_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBatchStatus.InvalidTransaction)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBatchStatus_InvalidTransaction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBatchStatus.InvalidTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transaction_id = 1;
  if (this->transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transaction_id().data(), static_cast<int>(this->transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchStatus.InvalidTransaction.transaction_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->transaction_id(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchStatus.InvalidTransaction.message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // bytes extended_data = 3;
  if (this->extended_data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->extended_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBatchStatus.InvalidTransaction)
  return target;
}

size_t ClientBatchStatus_InvalidTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBatchStatus.InvalidTransaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transaction_id = 1;
  if (this->transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->transaction_id());
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  // bytes extended_data = 3;
  if (this->extended_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->extended_data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBatchStatus_InvalidTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBatchStatus.InvalidTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBatchStatus_InvalidTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBatchStatus_InvalidTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBatchStatus.InvalidTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBatchStatus.InvalidTransaction)
    MergeFrom(*source);
  }
}

void ClientBatchStatus_InvalidTransaction::MergeFrom(const ClientBatchStatus_InvalidTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBatchStatus.InvalidTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction_id().size() > 0) {

    transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.extended_data().size() > 0) {

    extended_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extended_data_);
  }
}

void ClientBatchStatus_InvalidTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBatchStatus.InvalidTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBatchStatus_InvalidTransaction::CopyFrom(const ClientBatchStatus_InvalidTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBatchStatus.InvalidTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBatchStatus_InvalidTransaction::IsInitialized() const {
  return true;
}

void ClientBatchStatus_InvalidTransaction::Swap(ClientBatchStatus_InvalidTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBatchStatus_InvalidTransaction::InternalSwap(ClientBatchStatus_InvalidTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transaction_id_.Swap(&other->transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extended_data_.Swap(&other->extended_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBatchStatus_InvalidTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBatchStatus::InitAsDefaultInstance() {
}
class ClientBatchStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBatchStatus::kBatchIdFieldNumber;
const int ClientBatchStatus::kStatusFieldNumber;
const int ClientBatchStatus::kInvalidTransactionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBatchStatus::ClientBatchStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBatchStatus)
}
ClientBatchStatus::ClientBatchStatus(const ClientBatchStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      invalid_transactions_(from.invalid_transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  batch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.batch_id().size() > 0) {
    batch_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.batch_id_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ClientBatchStatus)
}

void ClientBatchStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBatchStatus_client_5fbatch_5fsubmit_2eproto.base);
  batch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

ClientBatchStatus::~ClientBatchStatus() {
  // @@protoc_insertion_point(destructor:ClientBatchStatus)
  SharedDtor();
}

void ClientBatchStatus::SharedDtor() {
  batch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientBatchStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBatchStatus& ClientBatchStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBatchStatus_client_5fbatch_5fsubmit_2eproto.base);
  return *internal_default_instance();
}


void ClientBatchStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBatchStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invalid_transactions_.Clear();
  batch_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBatchStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string batch_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_batch_id(), ptr, ctx, "ClientBatchStatus.batch_id");
        CHK_(ptr);
        break;
      }
      // .ClientBatchStatus.Status status = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ClientBatchStatus_Status>(val));
        break;
      }
      // repeated .ClientBatchStatus.InvalidTransaction invalid_transactions = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_invalid_transactions(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 26) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBatchStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBatchStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string batch_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_batch_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->batch_id().data(), static_cast<int>(this->batch_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBatchStatus.batch_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ClientBatchStatus.Status status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ClientBatchStatus_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ClientBatchStatus.InvalidTransaction invalid_transactions = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_invalid_transactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBatchStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBatchStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBatchStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBatchStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string batch_id = 1;
  if (this->batch_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->batch_id().data(), static_cast<int>(this->batch_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchStatus.batch_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->batch_id(), output);
  }

  // .ClientBatchStatus.Status status = 2;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated .ClientBatchStatus.InvalidTransaction invalid_transactions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->invalid_transactions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->invalid_transactions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBatchStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBatchStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBatchStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string batch_id = 1;
  if (this->batch_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->batch_id().data(), static_cast<int>(this->batch_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchStatus.batch_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->batch_id(), target);
  }

  // .ClientBatchStatus.Status status = 2;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // repeated .ClientBatchStatus.InvalidTransaction invalid_transactions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->invalid_transactions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->invalid_transactions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBatchStatus)
  return target;
}

size_t ClientBatchStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBatchStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ClientBatchStatus.InvalidTransaction invalid_transactions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->invalid_transactions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->invalid_transactions(static_cast<int>(i)));
    }
  }

  // string batch_id = 1;
  if (this->batch_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->batch_id());
  }

  // .ClientBatchStatus.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBatchStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBatchStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBatchStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBatchStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBatchStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBatchStatus)
    MergeFrom(*source);
  }
}

void ClientBatchStatus::MergeFrom(const ClientBatchStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBatchStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invalid_transactions_.MergeFrom(from.invalid_transactions_);
  if (from.batch_id().size() > 0) {

    batch_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.batch_id_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ClientBatchStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBatchStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBatchStatus::CopyFrom(const ClientBatchStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBatchStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBatchStatus::IsInitialized() const {
  return true;
}

void ClientBatchStatus::Swap(ClientBatchStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBatchStatus::InternalSwap(ClientBatchStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&invalid_transactions_)->InternalSwap(CastToBase(&other->invalid_transactions_));
  batch_id_.Swap(&other->batch_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBatchStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBatchSubmitRequest::InitAsDefaultInstance() {
}
class ClientBatchSubmitRequest::HasBitSetters {
 public:
};

void ClientBatchSubmitRequest::clear_batches() {
  batches_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBatchSubmitRequest::kBatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBatchSubmitRequest::ClientBatchSubmitRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBatchSubmitRequest)
}
ClientBatchSubmitRequest::ClientBatchSubmitRequest(const ClientBatchSubmitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      batches_(from.batches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientBatchSubmitRequest)
}

void ClientBatchSubmitRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBatchSubmitRequest_client_5fbatch_5fsubmit_2eproto.base);
}

ClientBatchSubmitRequest::~ClientBatchSubmitRequest() {
  // @@protoc_insertion_point(destructor:ClientBatchSubmitRequest)
  SharedDtor();
}

void ClientBatchSubmitRequest::SharedDtor() {
}

void ClientBatchSubmitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBatchSubmitRequest& ClientBatchSubmitRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBatchSubmitRequest_client_5fbatch_5fsubmit_2eproto.base);
  return *internal_default_instance();
}


void ClientBatchSubmitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBatchSubmitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batches_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBatchSubmitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Batch batches = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_batches(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 10) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBatchSubmitRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBatchSubmitRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Batch batches = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_batches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBatchSubmitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBatchSubmitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBatchSubmitRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBatchSubmitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Batch batches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->batches_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->batches(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBatchSubmitRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBatchSubmitRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBatchSubmitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Batch batches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->batches_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->batches(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBatchSubmitRequest)
  return target;
}

size_t ClientBatchSubmitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBatchSubmitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Batch batches = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->batches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->batches(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBatchSubmitRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBatchSubmitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBatchSubmitRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBatchSubmitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBatchSubmitRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBatchSubmitRequest)
    MergeFrom(*source);
  }
}

void ClientBatchSubmitRequest::MergeFrom(const ClientBatchSubmitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBatchSubmitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  batches_.MergeFrom(from.batches_);
}

void ClientBatchSubmitRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBatchSubmitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBatchSubmitRequest::CopyFrom(const ClientBatchSubmitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBatchSubmitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBatchSubmitRequest::IsInitialized() const {
  return true;
}

void ClientBatchSubmitRequest::Swap(ClientBatchSubmitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBatchSubmitRequest::InternalSwap(ClientBatchSubmitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&batches_)->InternalSwap(CastToBase(&other->batches_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBatchSubmitRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBatchSubmitResponse::InitAsDefaultInstance() {
}
class ClientBatchSubmitResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBatchSubmitResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBatchSubmitResponse::ClientBatchSubmitResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBatchSubmitResponse)
}
ClientBatchSubmitResponse::ClientBatchSubmitResponse(const ClientBatchSubmitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ClientBatchSubmitResponse)
}

void ClientBatchSubmitResponse::SharedCtor() {
  status_ = 0;
}

ClientBatchSubmitResponse::~ClientBatchSubmitResponse() {
  // @@protoc_insertion_point(destructor:ClientBatchSubmitResponse)
  SharedDtor();
}

void ClientBatchSubmitResponse::SharedDtor() {
}

void ClientBatchSubmitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBatchSubmitResponse& ClientBatchSubmitResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBatchSubmitResponse_client_5fbatch_5fsubmit_2eproto.base);
  return *internal_default_instance();
}


void ClientBatchSubmitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBatchSubmitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBatchSubmitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientBatchSubmitResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ClientBatchSubmitResponse_Status>(val));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBatchSubmitResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBatchSubmitResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ClientBatchSubmitResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ClientBatchSubmitResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBatchSubmitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBatchSubmitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBatchSubmitResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBatchSubmitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientBatchSubmitResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBatchSubmitResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBatchSubmitResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBatchSubmitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientBatchSubmitResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBatchSubmitResponse)
  return target;
}

size_t ClientBatchSubmitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBatchSubmitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ClientBatchSubmitResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBatchSubmitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBatchSubmitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBatchSubmitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBatchSubmitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBatchSubmitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBatchSubmitResponse)
    MergeFrom(*source);
  }
}

void ClientBatchSubmitResponse::MergeFrom(const ClientBatchSubmitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBatchSubmitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ClientBatchSubmitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBatchSubmitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBatchSubmitResponse::CopyFrom(const ClientBatchSubmitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBatchSubmitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBatchSubmitResponse::IsInitialized() const {
  return true;
}

void ClientBatchSubmitResponse::Swap(ClientBatchSubmitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBatchSubmitResponse::InternalSwap(ClientBatchSubmitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBatchSubmitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBatchStatusRequest::InitAsDefaultInstance() {
}
class ClientBatchStatusRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBatchStatusRequest::kBatchIdsFieldNumber;
const int ClientBatchStatusRequest::kWaitFieldNumber;
const int ClientBatchStatusRequest::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBatchStatusRequest::ClientBatchStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBatchStatusRequest)
}
ClientBatchStatusRequest::ClientBatchStatusRequest(const ClientBatchStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      batch_ids_(from.batch_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wait_, &from.wait_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&wait_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:ClientBatchStatusRequest)
}

void ClientBatchStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBatchStatusRequest_client_5fbatch_5fsubmit_2eproto.base);
  ::memset(&wait_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&wait_)) + sizeof(timeout_));
}

ClientBatchStatusRequest::~ClientBatchStatusRequest() {
  // @@protoc_insertion_point(destructor:ClientBatchStatusRequest)
  SharedDtor();
}

void ClientBatchStatusRequest::SharedDtor() {
}

void ClientBatchStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBatchStatusRequest& ClientBatchStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBatchStatusRequest_client_5fbatch_5fsubmit_2eproto.base);
  return *internal_default_instance();
}


void ClientBatchStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBatchStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batch_ids_.Clear();
  ::memset(&wait_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&wait_)) + sizeof(timeout_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBatchStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string batch_ids = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        while (true) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_batch_ids(), ptr, ctx, "ClientBatchStatusRequest.batch_ids");
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 10) break;
          ptr += 1;
        }
        break;
      }
      // bool wait = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        wait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // uint32 timeout = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBatchStatusRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBatchStatusRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string batch_ids = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_batch_ids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->batch_ids(this->batch_ids_size() - 1).data(),
            static_cast<int>(this->batch_ids(this->batch_ids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientBatchStatusRequest.batch_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool wait = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeout = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBatchStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBatchStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBatchStatusRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBatchStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string batch_ids = 1;
  for (int i = 0, n = this->batch_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->batch_ids(i).data(), static_cast<int>(this->batch_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchStatusRequest.batch_ids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->batch_ids(i), output);
  }

  // bool wait = 2;
  if (this->wait() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->wait(), output);
  }

  // uint32 timeout = 3;
  if (this->timeout() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBatchStatusRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBatchStatusRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBatchStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string batch_ids = 1;
  for (int i = 0, n = this->batch_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->batch_ids(i).data(), static_cast<int>(this->batch_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientBatchStatusRequest.batch_ids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->batch_ids(i), target);
  }

  // bool wait = 2;
  if (this->wait() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->wait(), target);
  }

  // uint32 timeout = 3;
  if (this->timeout() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBatchStatusRequest)
  return target;
}

size_t ClientBatchStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBatchStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string batch_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->batch_ids_size());
  for (int i = 0, n = this->batch_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->batch_ids(i));
  }

  // bool wait = 2;
  if (this->wait() != 0) {
    total_size += 1 + 1;
  }

  // uint32 timeout = 3;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBatchStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBatchStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBatchStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBatchStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBatchStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBatchStatusRequest)
    MergeFrom(*source);
  }
}

void ClientBatchStatusRequest::MergeFrom(const ClientBatchStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBatchStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  batch_ids_.MergeFrom(from.batch_ids_);
  if (from.wait() != 0) {
    set_wait(from.wait());
  }
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
}

void ClientBatchStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBatchStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBatchStatusRequest::CopyFrom(const ClientBatchStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBatchStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBatchStatusRequest::IsInitialized() const {
  return true;
}

void ClientBatchStatusRequest::Swap(ClientBatchStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBatchStatusRequest::InternalSwap(ClientBatchStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  batch_ids_.InternalSwap(CastToBase(&other->batch_ids_));
  swap(wait_, other->wait_);
  swap(timeout_, other->timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBatchStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientBatchStatusResponse::InitAsDefaultInstance() {
}
class ClientBatchStatusResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientBatchStatusResponse::kStatusFieldNumber;
const int ClientBatchStatusResponse::kBatchStatusesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientBatchStatusResponse::ClientBatchStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBatchStatusResponse)
}
ClientBatchStatusResponse::ClientBatchStatusResponse(const ClientBatchStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      batch_statuses_(from.batch_statuses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ClientBatchStatusResponse)
}

void ClientBatchStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientBatchStatusResponse_client_5fbatch_5fsubmit_2eproto.base);
  status_ = 0;
}

ClientBatchStatusResponse::~ClientBatchStatusResponse() {
  // @@protoc_insertion_point(destructor:ClientBatchStatusResponse)
  SharedDtor();
}

void ClientBatchStatusResponse::SharedDtor() {
}

void ClientBatchStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientBatchStatusResponse& ClientBatchStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientBatchStatusResponse_client_5fbatch_5fsubmit_2eproto.base);
  return *internal_default_instance();
}


void ClientBatchStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBatchStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batch_statuses_.Clear();
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientBatchStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientBatchStatusResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ClientBatchStatusResponse_Status>(val));
        break;
      }
      // repeated .ClientBatchStatus batch_statuses = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_batch_statuses(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientBatchStatusResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientBatchStatusResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ClientBatchStatusResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ClientBatchStatusResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ClientBatchStatus batch_statuses = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_batch_statuses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBatchStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBatchStatusResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientBatchStatusResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBatchStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientBatchStatusResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .ClientBatchStatus batch_statuses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->batch_statuses_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->batch_statuses(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientBatchStatusResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientBatchStatusResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientBatchStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientBatchStatusResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .ClientBatchStatus batch_statuses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->batch_statuses_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->batch_statuses(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientBatchStatusResponse)
  return target;
}

size_t ClientBatchStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBatchStatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ClientBatchStatus batch_statuses = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->batch_statuses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->batch_statuses(static_cast<int>(i)));
    }
  }

  // .ClientBatchStatusResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientBatchStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientBatchStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientBatchStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientBatchStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientBatchStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientBatchStatusResponse)
    MergeFrom(*source);
  }
}

void ClientBatchStatusResponse::MergeFrom(const ClientBatchStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBatchStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  batch_statuses_.MergeFrom(from.batch_statuses_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ClientBatchStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientBatchStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBatchStatusResponse::CopyFrom(const ClientBatchStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBatchStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBatchStatusResponse::IsInitialized() const {
  return true;
}

void ClientBatchStatusResponse::Swap(ClientBatchStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientBatchStatusResponse::InternalSwap(ClientBatchStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&batch_statuses_)->InternalSwap(CastToBase(&other->batch_statuses_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientBatchStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ClientBatchStatus_InvalidTransaction* Arena::CreateMaybeMessage< ::ClientBatchStatus_InvalidTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBatchStatus_InvalidTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBatchStatus* Arena::CreateMaybeMessage< ::ClientBatchStatus >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBatchStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBatchSubmitRequest* Arena::CreateMaybeMessage< ::ClientBatchSubmitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBatchSubmitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBatchSubmitResponse* Arena::CreateMaybeMessage< ::ClientBatchSubmitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBatchSubmitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBatchStatusRequest* Arena::CreateMaybeMessage< ::ClientBatchStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBatchStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientBatchStatusResponse* Arena::CreateMaybeMessage< ::ClientBatchStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ClientBatchStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
