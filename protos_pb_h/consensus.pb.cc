// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consensus.proto

#include "consensus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_consensus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusBlock_consensus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consensus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusPeerInfo_consensus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consensus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusPeerMessage_consensus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consensus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusSettingsEntry_consensus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consensus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusStateEntry_consensus_2eproto;
class ConsensusPeerMessageHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusPeerMessageHeader> _instance;
} _ConsensusPeerMessageHeader_default_instance_;
class ConsensusPeerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusPeerMessage> _instance;
} _ConsensusPeerMessage_default_instance_;
class ConsensusBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusBlock> _instance;
} _ConsensusBlock_default_instance_;
class ConsensusPeerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusPeerInfo> _instance;
} _ConsensusPeerInfo_default_instance_;
class ConsensusSettingsEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusSettingsEntry> _instance;
} _ConsensusSettingsEntry_default_instance_;
class ConsensusStateEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusStateEntry> _instance;
} _ConsensusStateEntry_default_instance_;
class ConsensusRegisterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusRegisterRequest> _instance;
} _ConsensusRegisterRequest_default_instance_;
class ConsensusRegisterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusRegisterResponse> _instance;
} _ConsensusRegisterResponse_default_instance_;
class ConsensusNotifyPeerConnectedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusNotifyPeerConnected> _instance;
} _ConsensusNotifyPeerConnected_default_instance_;
class ConsensusNotifyPeerDisconnectedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusNotifyPeerDisconnected> _instance;
} _ConsensusNotifyPeerDisconnected_default_instance_;
class ConsensusNotifyPeerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusNotifyPeerMessage> _instance;
} _ConsensusNotifyPeerMessage_default_instance_;
class ConsensusNotifyBlockNewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusNotifyBlockNew> _instance;
} _ConsensusNotifyBlockNew_default_instance_;
class ConsensusNotifyBlockValidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusNotifyBlockValid> _instance;
} _ConsensusNotifyBlockValid_default_instance_;
class ConsensusNotifyBlockInvalidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusNotifyBlockInvalid> _instance;
} _ConsensusNotifyBlockInvalid_default_instance_;
class ConsensusNotifyBlockCommitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusNotifyBlockCommit> _instance;
} _ConsensusNotifyBlockCommit_default_instance_;
class ConsensusNotifyAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusNotifyAck> _instance;
} _ConsensusNotifyAck_default_instance_;
class ConsensusSendToRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusSendToRequest> _instance;
} _ConsensusSendToRequest_default_instance_;
class ConsensusSendToResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusSendToResponse> _instance;
} _ConsensusSendToResponse_default_instance_;
class ConsensusBroadcastRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusBroadcastRequest> _instance;
} _ConsensusBroadcastRequest_default_instance_;
class ConsensusBroadcastResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusBroadcastResponse> _instance;
} _ConsensusBroadcastResponse_default_instance_;
class ConsensusInitializeBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusInitializeBlockRequest> _instance;
} _ConsensusInitializeBlockRequest_default_instance_;
class ConsensusInitializeBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusInitializeBlockResponse> _instance;
} _ConsensusInitializeBlockResponse_default_instance_;
class ConsensusSummarizeBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusSummarizeBlockRequest> _instance;
} _ConsensusSummarizeBlockRequest_default_instance_;
class ConsensusSummarizeBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusSummarizeBlockResponse> _instance;
} _ConsensusSummarizeBlockResponse_default_instance_;
class ConsensusFinalizeBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusFinalizeBlockRequest> _instance;
} _ConsensusFinalizeBlockRequest_default_instance_;
class ConsensusFinalizeBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusFinalizeBlockResponse> _instance;
} _ConsensusFinalizeBlockResponse_default_instance_;
class ConsensusCancelBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusCancelBlockRequest> _instance;
} _ConsensusCancelBlockRequest_default_instance_;
class ConsensusCancelBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusCancelBlockResponse> _instance;
} _ConsensusCancelBlockResponse_default_instance_;
class ConsensusCheckBlocksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusCheckBlocksRequest> _instance;
} _ConsensusCheckBlocksRequest_default_instance_;
class ConsensusCheckBlocksResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusCheckBlocksResponse> _instance;
} _ConsensusCheckBlocksResponse_default_instance_;
class ConsensusCommitBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusCommitBlockRequest> _instance;
} _ConsensusCommitBlockRequest_default_instance_;
class ConsensusCommitBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusCommitBlockResponse> _instance;
} _ConsensusCommitBlockResponse_default_instance_;
class ConsensusIgnoreBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusIgnoreBlockRequest> _instance;
} _ConsensusIgnoreBlockRequest_default_instance_;
class ConsensusIgnoreBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusIgnoreBlockResponse> _instance;
} _ConsensusIgnoreBlockResponse_default_instance_;
class ConsensusFailBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusFailBlockRequest> _instance;
} _ConsensusFailBlockRequest_default_instance_;
class ConsensusFailBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusFailBlockResponse> _instance;
} _ConsensusFailBlockResponse_default_instance_;
class ConsensusBlocksGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusBlocksGetRequest> _instance;
} _ConsensusBlocksGetRequest_default_instance_;
class ConsensusBlocksGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusBlocksGetResponse> _instance;
} _ConsensusBlocksGetResponse_default_instance_;
class ConsensusChainHeadGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusChainHeadGetRequest> _instance;
} _ConsensusChainHeadGetRequest_default_instance_;
class ConsensusChainHeadGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusChainHeadGetResponse> _instance;
} _ConsensusChainHeadGetResponse_default_instance_;
class ConsensusSettingsGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusSettingsGetRequest> _instance;
} _ConsensusSettingsGetRequest_default_instance_;
class ConsensusSettingsGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusSettingsGetResponse> _instance;
} _ConsensusSettingsGetResponse_default_instance_;
class ConsensusStateGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusStateGetRequest> _instance;
} _ConsensusStateGetRequest_default_instance_;
class ConsensusStateGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusStateGetResponse> _instance;
} _ConsensusStateGetResponse_default_instance_;
static void InitDefaultsscc_info_ConsensusBlock_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusBlock_default_instance_;
    new (ptr) ::ConsensusBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusBlock_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusBlock_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusBlocksGetRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusBlocksGetRequest_default_instance_;
    new (ptr) ::ConsensusBlocksGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusBlocksGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusBlocksGetRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusBlocksGetRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusBlocksGetResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusBlocksGetResponse_default_instance_;
    new (ptr) ::ConsensusBlocksGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusBlocksGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConsensusBlocksGetResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConsensusBlocksGetResponse_consensus_2eproto}, {
      &scc_info_ConsensusBlock_consensus_2eproto.base,}};

static void InitDefaultsscc_info_ConsensusBroadcastRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusBroadcastRequest_default_instance_;
    new (ptr) ::ConsensusBroadcastRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusBroadcastRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusBroadcastRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusBroadcastRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusBroadcastResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusBroadcastResponse_default_instance_;
    new (ptr) ::ConsensusBroadcastResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusBroadcastResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusBroadcastResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusBroadcastResponse_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusCancelBlockRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusCancelBlockRequest_default_instance_;
    new (ptr) ::ConsensusCancelBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusCancelBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusCancelBlockRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusCancelBlockRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusCancelBlockResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusCancelBlockResponse_default_instance_;
    new (ptr) ::ConsensusCancelBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusCancelBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusCancelBlockResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusCancelBlockResponse_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusChainHeadGetRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusChainHeadGetRequest_default_instance_;
    new (ptr) ::ConsensusChainHeadGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusChainHeadGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusChainHeadGetRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusChainHeadGetRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusChainHeadGetResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusChainHeadGetResponse_default_instance_;
    new (ptr) ::ConsensusChainHeadGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusChainHeadGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConsensusChainHeadGetResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConsensusChainHeadGetResponse_consensus_2eproto}, {
      &scc_info_ConsensusBlock_consensus_2eproto.base,}};

static void InitDefaultsscc_info_ConsensusCheckBlocksRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusCheckBlocksRequest_default_instance_;
    new (ptr) ::ConsensusCheckBlocksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusCheckBlocksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusCheckBlocksRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusCheckBlocksRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusCheckBlocksResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusCheckBlocksResponse_default_instance_;
    new (ptr) ::ConsensusCheckBlocksResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusCheckBlocksResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusCheckBlocksResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusCheckBlocksResponse_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusCommitBlockRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusCommitBlockRequest_default_instance_;
    new (ptr) ::ConsensusCommitBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusCommitBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusCommitBlockRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusCommitBlockRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusCommitBlockResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusCommitBlockResponse_default_instance_;
    new (ptr) ::ConsensusCommitBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusCommitBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusCommitBlockResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusCommitBlockResponse_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusFailBlockRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusFailBlockRequest_default_instance_;
    new (ptr) ::ConsensusFailBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusFailBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusFailBlockRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusFailBlockRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusFailBlockResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusFailBlockResponse_default_instance_;
    new (ptr) ::ConsensusFailBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusFailBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusFailBlockResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusFailBlockResponse_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusFinalizeBlockRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusFinalizeBlockRequest_default_instance_;
    new (ptr) ::ConsensusFinalizeBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusFinalizeBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusFinalizeBlockRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusFinalizeBlockRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusFinalizeBlockResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusFinalizeBlockResponse_default_instance_;
    new (ptr) ::ConsensusFinalizeBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusFinalizeBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusFinalizeBlockResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusFinalizeBlockResponse_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusIgnoreBlockRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusIgnoreBlockRequest_default_instance_;
    new (ptr) ::ConsensusIgnoreBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusIgnoreBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusIgnoreBlockRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusIgnoreBlockRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusIgnoreBlockResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusIgnoreBlockResponse_default_instance_;
    new (ptr) ::ConsensusIgnoreBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusIgnoreBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusIgnoreBlockResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusIgnoreBlockResponse_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusInitializeBlockRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusInitializeBlockRequest_default_instance_;
    new (ptr) ::ConsensusInitializeBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusInitializeBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusInitializeBlockRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusInitializeBlockRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusInitializeBlockResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusInitializeBlockResponse_default_instance_;
    new (ptr) ::ConsensusInitializeBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusInitializeBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusInitializeBlockResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusInitializeBlockResponse_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusNotifyAck_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusNotifyAck_default_instance_;
    new (ptr) ::ConsensusNotifyAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusNotifyAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusNotifyAck_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusNotifyAck_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusNotifyBlockCommit_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusNotifyBlockCommit_default_instance_;
    new (ptr) ::ConsensusNotifyBlockCommit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusNotifyBlockCommit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusNotifyBlockCommit_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusNotifyBlockCommit_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusNotifyBlockInvalid_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusNotifyBlockInvalid_default_instance_;
    new (ptr) ::ConsensusNotifyBlockInvalid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusNotifyBlockInvalid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusNotifyBlockInvalid_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusNotifyBlockInvalid_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusNotifyBlockNew_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusNotifyBlockNew_default_instance_;
    new (ptr) ::ConsensusNotifyBlockNew();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusNotifyBlockNew::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConsensusNotifyBlockNew_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConsensusNotifyBlockNew_consensus_2eproto}, {
      &scc_info_ConsensusBlock_consensus_2eproto.base,}};

static void InitDefaultsscc_info_ConsensusNotifyBlockValid_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusNotifyBlockValid_default_instance_;
    new (ptr) ::ConsensusNotifyBlockValid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusNotifyBlockValid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusNotifyBlockValid_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusNotifyBlockValid_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusNotifyPeerConnected_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusNotifyPeerConnected_default_instance_;
    new (ptr) ::ConsensusNotifyPeerConnected();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusNotifyPeerConnected::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConsensusNotifyPeerConnected_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConsensusNotifyPeerConnected_consensus_2eproto}, {
      &scc_info_ConsensusPeerInfo_consensus_2eproto.base,}};

static void InitDefaultsscc_info_ConsensusNotifyPeerDisconnected_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusNotifyPeerDisconnected_default_instance_;
    new (ptr) ::ConsensusNotifyPeerDisconnected();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusNotifyPeerDisconnected::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusNotifyPeerDisconnected_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusNotifyPeerDisconnected_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusNotifyPeerMessage_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusNotifyPeerMessage_default_instance_;
    new (ptr) ::ConsensusNotifyPeerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusNotifyPeerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConsensusNotifyPeerMessage_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConsensusNotifyPeerMessage_consensus_2eproto}, {
      &scc_info_ConsensusPeerMessage_consensus_2eproto.base,}};

static void InitDefaultsscc_info_ConsensusPeerInfo_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusPeerInfo_default_instance_;
    new (ptr) ::ConsensusPeerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusPeerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusPeerInfo_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusPeerInfo_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusPeerMessage_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusPeerMessage_default_instance_;
    new (ptr) ::ConsensusPeerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusPeerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusPeerMessage_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusPeerMessage_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusPeerMessageHeader_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusPeerMessageHeader_default_instance_;
    new (ptr) ::ConsensusPeerMessageHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusPeerMessageHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusPeerMessageHeader_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusPeerMessageHeader_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusRegisterRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusRegisterRequest_default_instance_;
    new (ptr) ::ConsensusRegisterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusRegisterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusRegisterRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusRegisterRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusRegisterResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusRegisterResponse_default_instance_;
    new (ptr) ::ConsensusRegisterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusRegisterResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConsensusRegisterResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ConsensusRegisterResponse_consensus_2eproto}, {
      &scc_info_ConsensusBlock_consensus_2eproto.base,
      &scc_info_ConsensusPeerInfo_consensus_2eproto.base,}};

static void InitDefaultsscc_info_ConsensusSendToRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusSendToRequest_default_instance_;
    new (ptr) ::ConsensusSendToRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusSendToRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusSendToRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusSendToRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusSendToResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusSendToResponse_default_instance_;
    new (ptr) ::ConsensusSendToResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusSendToResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusSendToResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusSendToResponse_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusSettingsEntry_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusSettingsEntry_default_instance_;
    new (ptr) ::ConsensusSettingsEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusSettingsEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusSettingsEntry_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusSettingsEntry_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusSettingsGetRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusSettingsGetRequest_default_instance_;
    new (ptr) ::ConsensusSettingsGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusSettingsGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusSettingsGetRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusSettingsGetRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusSettingsGetResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusSettingsGetResponse_default_instance_;
    new (ptr) ::ConsensusSettingsGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusSettingsGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConsensusSettingsGetResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConsensusSettingsGetResponse_consensus_2eproto}, {
      &scc_info_ConsensusSettingsEntry_consensus_2eproto.base,}};

static void InitDefaultsscc_info_ConsensusStateEntry_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusStateEntry_default_instance_;
    new (ptr) ::ConsensusStateEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusStateEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusStateEntry_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusStateEntry_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusStateGetRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusStateGetRequest_default_instance_;
    new (ptr) ::ConsensusStateGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusStateGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusStateGetRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusStateGetRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusStateGetResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusStateGetResponse_default_instance_;
    new (ptr) ::ConsensusStateGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusStateGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConsensusStateGetResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConsensusStateGetResponse_consensus_2eproto}, {
      &scc_info_ConsensusStateEntry_consensus_2eproto.base,}};

static void InitDefaultsscc_info_ConsensusSummarizeBlockRequest_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusSummarizeBlockRequest_default_instance_;
    new (ptr) ::ConsensusSummarizeBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusSummarizeBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusSummarizeBlockRequest_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusSummarizeBlockRequest_consensus_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusSummarizeBlockResponse_consensus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConsensusSummarizeBlockResponse_default_instance_;
    new (ptr) ::ConsensusSummarizeBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConsensusSummarizeBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusSummarizeBlockResponse_consensus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConsensusSummarizeBlockResponse_consensus_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_consensus_2eproto[44];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_consensus_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_consensus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_consensus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusPeerMessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusPeerMessageHeader, signer_id_),
  PROTOBUF_FIELD_OFFSET(::ConsensusPeerMessageHeader, content_sha512_),
  PROTOBUF_FIELD_OFFSET(::ConsensusPeerMessageHeader, message_type_),
  PROTOBUF_FIELD_OFFSET(::ConsensusPeerMessageHeader, name_),
  PROTOBUF_FIELD_OFFSET(::ConsensusPeerMessageHeader, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusPeerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusPeerMessage, header_),
  PROTOBUF_FIELD_OFFSET(::ConsensusPeerMessage, header_signature_),
  PROTOBUF_FIELD_OFFSET(::ConsensusPeerMessage, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusBlock, block_id_),
  PROTOBUF_FIELD_OFFSET(::ConsensusBlock, previous_id_),
  PROTOBUF_FIELD_OFFSET(::ConsensusBlock, signer_id_),
  PROTOBUF_FIELD_OFFSET(::ConsensusBlock, block_num_),
  PROTOBUF_FIELD_OFFSET(::ConsensusBlock, payload_),
  PROTOBUF_FIELD_OFFSET(::ConsensusBlock, summary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusPeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusPeerInfo, peer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusSettingsEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusSettingsEntry, key_),
  PROTOBUF_FIELD_OFFSET(::ConsensusSettingsEntry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusStateEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusStateEntry, address_),
  PROTOBUF_FIELD_OFFSET(::ConsensusStateEntry, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusRegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusRegisterRequest, name_),
  PROTOBUF_FIELD_OFFSET(::ConsensusRegisterRequest, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusRegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusRegisterResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ConsensusRegisterResponse, chain_head_),
  PROTOBUF_FIELD_OFFSET(::ConsensusRegisterResponse, peers_),
  PROTOBUF_FIELD_OFFSET(::ConsensusRegisterResponse, local_peer_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyPeerConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyPeerConnected, peer_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyPeerDisconnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyPeerDisconnected, peer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyPeerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyPeerMessage, message_),
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyPeerMessage, sender_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyBlockNew, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyBlockNew, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyBlockValid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyBlockValid, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyBlockInvalid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyBlockInvalid, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyBlockCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyBlockCommit, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusNotifyAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusSendToRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusSendToRequest, content_),
  PROTOBUF_FIELD_OFFSET(::ConsensusSendToRequest, message_type_),
  PROTOBUF_FIELD_OFFSET(::ConsensusSendToRequest, receiver_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusSendToResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusSendToResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusBroadcastRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusBroadcastRequest, content_),
  PROTOBUF_FIELD_OFFSET(::ConsensusBroadcastRequest, message_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusBroadcastResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusBroadcastResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusInitializeBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusInitializeBlockRequest, previous_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusInitializeBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusInitializeBlockResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusSummarizeBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusSummarizeBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusSummarizeBlockResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ConsensusSummarizeBlockResponse, summary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusFinalizeBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusFinalizeBlockRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusFinalizeBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusFinalizeBlockResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ConsensusFinalizeBlockResponse, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusCancelBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusCancelBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusCancelBlockResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusCheckBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusCheckBlocksRequest, block_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusCheckBlocksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusCheckBlocksResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusCommitBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusCommitBlockRequest, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusCommitBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusCommitBlockResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusIgnoreBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusIgnoreBlockRequest, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusIgnoreBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusIgnoreBlockResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusFailBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusFailBlockRequest, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusFailBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusFailBlockResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusBlocksGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusBlocksGetRequest, block_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusBlocksGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusBlocksGetResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ConsensusBlocksGetResponse, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusChainHeadGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusChainHeadGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusChainHeadGetResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ConsensusChainHeadGetResponse, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusSettingsGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusSettingsGetRequest, block_id_),
  PROTOBUF_FIELD_OFFSET(::ConsensusSettingsGetRequest, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusSettingsGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusSettingsGetResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ConsensusSettingsGetResponse, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusStateGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusStateGetRequest, block_id_),
  PROTOBUF_FIELD_OFFSET(::ConsensusStateGetRequest, addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConsensusStateGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConsensusStateGetResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ConsensusStateGetResponse, entries_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ConsensusPeerMessageHeader)},
  { 10, -1, sizeof(::ConsensusPeerMessage)},
  { 18, -1, sizeof(::ConsensusBlock)},
  { 29, -1, sizeof(::ConsensusPeerInfo)},
  { 35, -1, sizeof(::ConsensusSettingsEntry)},
  { 42, -1, sizeof(::ConsensusStateEntry)},
  { 49, -1, sizeof(::ConsensusRegisterRequest)},
  { 56, -1, sizeof(::ConsensusRegisterResponse)},
  { 65, -1, sizeof(::ConsensusNotifyPeerConnected)},
  { 71, -1, sizeof(::ConsensusNotifyPeerDisconnected)},
  { 77, -1, sizeof(::ConsensusNotifyPeerMessage)},
  { 84, -1, sizeof(::ConsensusNotifyBlockNew)},
  { 90, -1, sizeof(::ConsensusNotifyBlockValid)},
  { 96, -1, sizeof(::ConsensusNotifyBlockInvalid)},
  { 102, -1, sizeof(::ConsensusNotifyBlockCommit)},
  { 108, -1, sizeof(::ConsensusNotifyAck)},
  { 113, -1, sizeof(::ConsensusSendToRequest)},
  { 121, -1, sizeof(::ConsensusSendToResponse)},
  { 127, -1, sizeof(::ConsensusBroadcastRequest)},
  { 134, -1, sizeof(::ConsensusBroadcastResponse)},
  { 140, -1, sizeof(::ConsensusInitializeBlockRequest)},
  { 146, -1, sizeof(::ConsensusInitializeBlockResponse)},
  { 152, -1, sizeof(::ConsensusSummarizeBlockRequest)},
  { 157, -1, sizeof(::ConsensusSummarizeBlockResponse)},
  { 164, -1, sizeof(::ConsensusFinalizeBlockRequest)},
  { 170, -1, sizeof(::ConsensusFinalizeBlockResponse)},
  { 177, -1, sizeof(::ConsensusCancelBlockRequest)},
  { 182, -1, sizeof(::ConsensusCancelBlockResponse)},
  { 188, -1, sizeof(::ConsensusCheckBlocksRequest)},
  { 194, -1, sizeof(::ConsensusCheckBlocksResponse)},
  { 200, -1, sizeof(::ConsensusCommitBlockRequest)},
  { 206, -1, sizeof(::ConsensusCommitBlockResponse)},
  { 212, -1, sizeof(::ConsensusIgnoreBlockRequest)},
  { 218, -1, sizeof(::ConsensusIgnoreBlockResponse)},
  { 224, -1, sizeof(::ConsensusFailBlockRequest)},
  { 230, -1, sizeof(::ConsensusFailBlockResponse)},
  { 236, -1, sizeof(::ConsensusBlocksGetRequest)},
  { 242, -1, sizeof(::ConsensusBlocksGetResponse)},
  { 249, -1, sizeof(::ConsensusChainHeadGetRequest)},
  { 254, -1, sizeof(::ConsensusChainHeadGetResponse)},
  { 261, -1, sizeof(::ConsensusSettingsGetRequest)},
  { 268, -1, sizeof(::ConsensusSettingsGetResponse)},
  { 275, -1, sizeof(::ConsensusStateGetRequest)},
  { 282, -1, sizeof(::ConsensusStateGetResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusPeerMessageHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusPeerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusPeerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusSettingsEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusStateEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusRegisterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusRegisterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusNotifyPeerConnected_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusNotifyPeerDisconnected_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusNotifyPeerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusNotifyBlockNew_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusNotifyBlockValid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusNotifyBlockInvalid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusNotifyBlockCommit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusNotifyAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusSendToRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusSendToResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusBroadcastRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusBroadcastResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusInitializeBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusInitializeBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusSummarizeBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusSummarizeBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusFinalizeBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusFinalizeBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusCancelBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusCancelBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusCheckBlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusCheckBlocksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusCommitBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusCommitBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusIgnoreBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusIgnoreBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusFailBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusFailBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusBlocksGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusBlocksGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusChainHeadGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusChainHeadGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusSettingsGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusSettingsGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusStateGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConsensusStateGetResponse_default_instance_),
};

const char descriptor_table_protodef_consensus_2eproto[] =
  "\n\017consensus.proto\"|\n\032ConsensusPeerMessag"
  "eHeader\022\021\n\tsigner_id\030\001 \001(\014\022\026\n\016content_sh"
  "a512\030\002 \001(\014\022\024\n\014message_type\030\005 \001(\t\022\014\n\004name"
  "\030\003 \001(\t\022\017\n\007version\030\004 \001(\t\"Q\n\024ConsensusPeer"
  "Message\022\016\n\006header\030\001 \001(\014\022\030\n\020header_signat"
  "ure\030\003 \001(\014\022\017\n\007content\030\002 \001(\014\"\177\n\016ConsensusB"
  "lock\022\020\n\010block_id\030\001 \001(\014\022\023\n\013previous_id\030\002 "
  "\001(\014\022\021\n\tsigner_id\030\003 \001(\014\022\021\n\tblock_num\030\004 \001("
  "\004\022\017\n\007payload\030\005 \001(\014\022\017\n\007summary\030\006 \001(\014\"$\n\021C"
  "onsensusPeerInfo\022\017\n\007peer_id\030\001 \001(\014\"4\n\026Con"
  "sensusSettingsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t\"4\n\023ConsensusStateEntry\022\017\n\007addres"
  "s\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\"9\n\030ConsensusRegist"
  "erRequest\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t"
  "\"\232\002\n\031ConsensusRegisterResponse\0221\n\006status"
  "\030\001 \001(\0162!.ConsensusRegisterResponse.Statu"
  "s\022#\n\nchain_head\030\002 \001(\0132\017.ConsensusBlock\022!"
  "\n\005peers\030\003 \003(\0132\022.ConsensusPeerInfo\022+\n\017loc"
  "al_peer_info\030\004 \001(\0132\022.ConsensusPeerInfo\"U"
  "\n\006Status\022\020\n\014STATUS_UNSET\020\000\022\006\n\002OK\020\001\022\017\n\013BA"
  "D_REQUEST\020\002\022\021\n\rSERVICE_ERROR\020\003\022\r\n\tNOT_RE"
  "ADY\020\004\"E\n\034ConsensusNotifyPeerConnected\022%\n"
  "\tpeer_info\030\001 \001(\0132\022.ConsensusPeerInfo\"2\n\037"
  "ConsensusNotifyPeerDisconnected\022\017\n\007peer_"
  "id\030\001 \001(\014\"W\n\032ConsensusNotifyPeerMessage\022&"
  "\n\007message\030\001 \001(\0132\025.ConsensusPeerMessage\022\021"
  "\n\tsender_id\030\002 \001(\014\"9\n\027ConsensusNotifyBloc"
  "kNew\022\036\n\005block\030\001 \001(\0132\017.ConsensusBlock\"-\n\031"
  "ConsensusNotifyBlockValid\022\020\n\010block_id\030\001 "
  "\001(\014\"/\n\033ConsensusNotifyBlockInvalid\022\020\n\010bl"
  "ock_id\030\001 \001(\014\".\n\032ConsensusNotifyBlockComm"
  "it\022\020\n\010block_id\030\001 \001(\014\"\024\n\022ConsensusNotifyA"
  "ck\"T\n\026ConsensusSendToRequest\022\017\n\007content\030"
  "\001 \001(\014\022\024\n\014message_type\030\003 \001(\t\022\023\n\013receiver_"
  "id\030\002 \001(\014\"\263\001\n\027ConsensusSendToResponse\022/\n\006"
  "status\030\001 \001(\0162\037.ConsensusSendToResponse.S"
  "tatus\"g\n\006Status\022\020\n\014STATUS_UNSET\020\000\022\006\n\002OK\020"
  "\001\022\017\n\013BAD_REQUEST\020\002\022\021\n\rSERVICE_ERROR\020\003\022\r\n"
  "\tNOT_READY\020\004\022\020\n\014UNKNOWN_PEER\020\005\"B\n\031Consen"
  "susBroadcastRequest\022\017\n\007content\030\001 \001(\014\022\024\n\014"
  "message_type\030\002 \001(\t\"\247\001\n\032ConsensusBroadcas"
  "tResponse\0222\n\006status\030\001 \001(\0162\".ConsensusBro"
  "adcastResponse.Status\"U\n\006Status\022\020\n\014STATU"
  "S_UNSET\020\000\022\006\n\002OK\020\001\022\017\n\013BAD_REQUEST\020\002\022\021\n\rSE"
  "RVICE_ERROR\020\003\022\r\n\tNOT_READY\020\004\"6\n\037Consensu"
  "sInitializeBlockRequest\022\023\n\013previous_id\030\001"
  " \001(\014\"\331\001\n ConsensusInitializeBlockRespons"
  "e\0228\n\006status\030\001 \001(\0162(.ConsensusInitializeB"
  "lockResponse.Status\"{\n\006Status\022\020\n\014STATUS_"
  "UNSET\020\000\022\006\n\002OK\020\001\022\017\n\013BAD_REQUEST\020\002\022\021\n\rSERV"
  "ICE_ERROR\020\003\022\r\n\tNOT_READY\020\004\022\021\n\rINVALID_ST"
  "ATE\020\005\022\021\n\rUNKNOWN_BLOCK\020\006\" \n\036ConsensusSum"
  "marizeBlockRequest\"\352\001\n\037ConsensusSummariz"
  "eBlockResponse\0227\n\006status\030\001 \001(\0162\'.Consens"
  "usSummarizeBlockResponse.Status\022\017\n\007summa"
  "ry\030\002 \001(\014\"}\n\006Status\022\020\n\014STATUS_UNSET\020\000\022\006\n\002"
  "OK\020\001\022\017\n\013BAD_REQUEST\020\002\022\021\n\rSERVICE_ERROR\020\003"
  "\022\r\n\tNOT_READY\020\004\022\021\n\rINVALID_STATE\020\005\022\023\n\017BL"
  "OCK_NOT_READY\020\006\"-\n\035ConsensusFinalizeBloc"
  "kRequest\022\014\n\004data\030\001 \001(\014\"\351\001\n\036ConsensusFina"
  "lizeBlockResponse\0226\n\006status\030\001 \001(\0162&.Cons"
  "ensusFinalizeBlockResponse.Status\022\020\n\010blo"
  "ck_id\030\002 \001(\014\"}\n\006Status\022\020\n\014STATUS_UNSET\020\000\022"
  "\006\n\002OK\020\001\022\017\n\013BAD_REQUEST\020\002\022\021\n\rSERVICE_ERRO"
  "R\020\003\022\r\n\tNOT_READY\020\004\022\021\n\rINVALID_STATE\020\005\022\023\n"
  "\017BLOCK_NOT_READY\020\006\"\035\n\033ConsensusCancelBlo"
  "ckRequest\"\276\001\n\034ConsensusCancelBlockRespon"
  "se\0224\n\006status\030\001 \001(\0162$.ConsensusCancelBloc"
  "kResponse.Status\"h\n\006Status\022\020\n\014STATUS_UNS"
  "ET\020\000\022\006\n\002OK\020\001\022\017\n\013BAD_REQUEST\020\002\022\021\n\rSERVICE"
  "_ERROR\020\003\022\r\n\tNOT_READY\020\004\022\021\n\rINVALID_STATE"
  "\020\005\"0\n\033ConsensusCheckBlocksRequest\022\021\n\tblo"
  "ck_ids\030\001 \003(\014\"\276\001\n\034ConsensusCheckBlocksRes"
  "ponse\0224\n\006status\030\001 \001(\0162$.ConsensusCheckBl"
  "ocksResponse.Status\"h\n\006Status\022\020\n\014STATUS_"
  "UNSET\020\000\022\006\n\002OK\020\001\022\017\n\013BAD_REQUEST\020\002\022\021\n\rSERV"
  "ICE_ERROR\020\003\022\r\n\tNOT_READY\020\004\022\021\n\rUNKNOWN_BL"
  "OCK\020\005\"/\n\033ConsensusCommitBlockRequest\022\020\n\010"
  "block_id\030\001 \001(\014\"\276\001\n\034ConsensusCommitBlockR"
  "esponse\0224\n\006status\030\001 \001(\0162$.ConsensusCommi"
  "tBlockResponse.Status\"h\n\006Status\022\020\n\014STATU"
  "S_UNSET\020\000\022\006\n\002OK\020\001\022\017\n\013BAD_REQUEST\020\002\022\021\n\rSE"
  "RVICE_ERROR\020\003\022\r\n\tNOT_READY\020\004\022\021\n\rUNKNOWN_"
  "BLOCK\020\005\"/\n\033ConsensusIgnoreBlockRequest\022\020"
  "\n\010block_id\030\001 \001(\014\"\276\001\n\034ConsensusIgnoreBloc"
  "kResponse\0224\n\006status\030\001 \001(\0162$.ConsensusIgn"
  "oreBlockResponse.Status\"h\n\006Status\022\020\n\014STA"
  "TUS_UNSET\020\000\022\006\n\002OK\020\001\022\017\n\013BAD_REQUEST\020\002\022\021\n\r"
  "SERVICE_ERROR\020\003\022\r\n\tNOT_READY\020\004\022\021\n\rUNKNOW"
  "N_BLOCK\020\005\"-\n\031ConsensusFailBlockRequest\022\020"
  "\n\010block_id\030\001 \001(\014\"\272\001\n\032ConsensusFailBlockR"
  "esponse\0222\n\006status\030\001 \001(\0162\".ConsensusFailB"
  "lockResponse.Status\"h\n\006Status\022\020\n\014STATUS_"
  "UNSET\020\000\022\006\n\002OK\020\001\022\017\n\013BAD_REQUEST\020\002\022\021\n\rSERV"
  "ICE_ERROR\020\003\022\r\n\tNOT_READY\020\004\022\021\n\rUNKNOWN_BL"
  "OCK\020\005\".\n\031ConsensusBlocksGetRequest\022\021\n\tbl"
  "ock_ids\030\001 \003(\014\"\333\001\n\032ConsensusBlocksGetResp"
  "onse\0222\n\006status\030\001 \001(\0162\".ConsensusBlocksGe"
  "tResponse.Status\022\037\n\006blocks\030\002 \003(\0132\017.Conse"
  "nsusBlock\"h\n\006Status\022\020\n\014STATUS_UNSET\020\000\022\006\n"
  "\002OK\020\001\022\017\n\013BAD_REQUEST\020\002\022\021\n\rSERVICE_ERROR\020"
  "\003\022\r\n\tNOT_READY\020\004\022\021\n\rUNKNOWN_BLOCK\020\005\"\036\n\034C"
  "onsensusChainHeadGetRequest\"\340\001\n\035Consensu"
  "sChainHeadGetResponse\0225\n\006status\030\001 \001(\0162%."
  "ConsensusChainHeadGetResponse.Status\022\036\n\005"
  "block\030\002 \001(\0132\017.ConsensusBlock\"h\n\006Status\022\020"
  "\n\014STATUS_UNSET\020\000\022\006\n\002OK\020\001\022\017\n\013BAD_REQUEST\020"
  "\002\022\021\n\rSERVICE_ERROR\020\003\022\r\n\tNOT_READY\020\004\022\021\n\rN"
  "O_CHAIN_HEAD\020\005\"=\n\033ConsensusSettingsGetRe"
  "quest\022\020\n\010block_id\030\001 \001(\014\022\014\n\004keys\030\002 \003(\t\"\350\001"
  "\n\034ConsensusSettingsGetResponse\0224\n\006status"
  "\030\001 \001(\0162$.ConsensusSettingsGetResponse.St"
  "atus\022(\n\007entries\030\002 \003(\0132\027.ConsensusSetting"
  "sEntry\"h\n\006Status\022\020\n\014STATUS_UNSET\020\000\022\006\n\002OK"
  "\020\001\022\017\n\013BAD_REQUEST\020\002\022\021\n\rSERVICE_ERROR\020\003\022\r"
  "\n\tNOT_READY\020\004\022\021\n\rUNKNOWN_BLOCK\020\005\"\?\n\030Cons"
  "ensusStateGetRequest\022\020\n\010block_id\030\001 \001(\014\022\021"
  "\n\taddresses\030\002 \003(\t\"\337\001\n\031ConsensusStateGetR"
  "esponse\0221\n\006status\030\001 \001(\0162!.ConsensusState"
  "GetResponse.Status\022%\n\007entries\030\002 \003(\0132\024.Co"
  "nsensusStateEntry\"h\n\006Status\022\020\n\014STATUS_UN"
  "SET\020\000\022\006\n\002OK\020\001\022\017\n\013BAD_REQUEST\020\002\022\021\n\rSERVIC"
  "E_ERROR\020\003\022\r\n\tNOT_READY\020\004\022\021\n\rUNKNOWN_BLOC"
  "K\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_consensus_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_consensus_2eproto_sccs[44] = {
  &scc_info_ConsensusBlock_consensus_2eproto.base,
  &scc_info_ConsensusBlocksGetRequest_consensus_2eproto.base,
  &scc_info_ConsensusBlocksGetResponse_consensus_2eproto.base,
  &scc_info_ConsensusBroadcastRequest_consensus_2eproto.base,
  &scc_info_ConsensusBroadcastResponse_consensus_2eproto.base,
  &scc_info_ConsensusCancelBlockRequest_consensus_2eproto.base,
  &scc_info_ConsensusCancelBlockResponse_consensus_2eproto.base,
  &scc_info_ConsensusChainHeadGetRequest_consensus_2eproto.base,
  &scc_info_ConsensusChainHeadGetResponse_consensus_2eproto.base,
  &scc_info_ConsensusCheckBlocksRequest_consensus_2eproto.base,
  &scc_info_ConsensusCheckBlocksResponse_consensus_2eproto.base,
  &scc_info_ConsensusCommitBlockRequest_consensus_2eproto.base,
  &scc_info_ConsensusCommitBlockResponse_consensus_2eproto.base,
  &scc_info_ConsensusFailBlockRequest_consensus_2eproto.base,
  &scc_info_ConsensusFailBlockResponse_consensus_2eproto.base,
  &scc_info_ConsensusFinalizeBlockRequest_consensus_2eproto.base,
  &scc_info_ConsensusFinalizeBlockResponse_consensus_2eproto.base,
  &scc_info_ConsensusIgnoreBlockRequest_consensus_2eproto.base,
  &scc_info_ConsensusIgnoreBlockResponse_consensus_2eproto.base,
  &scc_info_ConsensusInitializeBlockRequest_consensus_2eproto.base,
  &scc_info_ConsensusInitializeBlockResponse_consensus_2eproto.base,
  &scc_info_ConsensusNotifyAck_consensus_2eproto.base,
  &scc_info_ConsensusNotifyBlockCommit_consensus_2eproto.base,
  &scc_info_ConsensusNotifyBlockInvalid_consensus_2eproto.base,
  &scc_info_ConsensusNotifyBlockNew_consensus_2eproto.base,
  &scc_info_ConsensusNotifyBlockValid_consensus_2eproto.base,
  &scc_info_ConsensusNotifyPeerConnected_consensus_2eproto.base,
  &scc_info_ConsensusNotifyPeerDisconnected_consensus_2eproto.base,
  &scc_info_ConsensusNotifyPeerMessage_consensus_2eproto.base,
  &scc_info_ConsensusPeerInfo_consensus_2eproto.base,
  &scc_info_ConsensusPeerMessage_consensus_2eproto.base,
  &scc_info_ConsensusPeerMessageHeader_consensus_2eproto.base,
  &scc_info_ConsensusRegisterRequest_consensus_2eproto.base,
  &scc_info_ConsensusRegisterResponse_consensus_2eproto.base,
  &scc_info_ConsensusSendToRequest_consensus_2eproto.base,
  &scc_info_ConsensusSendToResponse_consensus_2eproto.base,
  &scc_info_ConsensusSettingsEntry_consensus_2eproto.base,
  &scc_info_ConsensusSettingsGetRequest_consensus_2eproto.base,
  &scc_info_ConsensusSettingsGetResponse_consensus_2eproto.base,
  &scc_info_ConsensusStateEntry_consensus_2eproto.base,
  &scc_info_ConsensusStateGetRequest_consensus_2eproto.base,
  &scc_info_ConsensusStateGetResponse_consensus_2eproto.base,
  &scc_info_ConsensusSummarizeBlockRequest_consensus_2eproto.base,
  &scc_info_ConsensusSummarizeBlockResponse_consensus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_consensus_2eproto_once;
static bool descriptor_table_consensus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_consensus_2eproto = {
  &descriptor_table_consensus_2eproto_initialized, descriptor_table_protodef_consensus_2eproto, "consensus.proto", 4931,
  &descriptor_table_consensus_2eproto_once, descriptor_table_consensus_2eproto_sccs, descriptor_table_consensus_2eproto_deps, 44, 0,
  schemas, file_default_instances, TableStruct_consensus_2eproto::offsets,
  file_level_metadata_consensus_2eproto, 44, file_level_enum_descriptors_consensus_2eproto, file_level_service_descriptors_consensus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_consensus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_consensus_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusRegisterResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[0];
}
bool ConsensusRegisterResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusRegisterResponse_Status ConsensusRegisterResponse::STATUS_UNSET;
constexpr ConsensusRegisterResponse_Status ConsensusRegisterResponse::OK;
constexpr ConsensusRegisterResponse_Status ConsensusRegisterResponse::BAD_REQUEST;
constexpr ConsensusRegisterResponse_Status ConsensusRegisterResponse::SERVICE_ERROR;
constexpr ConsensusRegisterResponse_Status ConsensusRegisterResponse::NOT_READY;
constexpr ConsensusRegisterResponse_Status ConsensusRegisterResponse::Status_MIN;
constexpr ConsensusRegisterResponse_Status ConsensusRegisterResponse::Status_MAX;
constexpr int ConsensusRegisterResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusSendToResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[1];
}
bool ConsensusSendToResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusSendToResponse_Status ConsensusSendToResponse::STATUS_UNSET;
constexpr ConsensusSendToResponse_Status ConsensusSendToResponse::OK;
constexpr ConsensusSendToResponse_Status ConsensusSendToResponse::BAD_REQUEST;
constexpr ConsensusSendToResponse_Status ConsensusSendToResponse::SERVICE_ERROR;
constexpr ConsensusSendToResponse_Status ConsensusSendToResponse::NOT_READY;
constexpr ConsensusSendToResponse_Status ConsensusSendToResponse::UNKNOWN_PEER;
constexpr ConsensusSendToResponse_Status ConsensusSendToResponse::Status_MIN;
constexpr ConsensusSendToResponse_Status ConsensusSendToResponse::Status_MAX;
constexpr int ConsensusSendToResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusBroadcastResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[2];
}
bool ConsensusBroadcastResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusBroadcastResponse_Status ConsensusBroadcastResponse::STATUS_UNSET;
constexpr ConsensusBroadcastResponse_Status ConsensusBroadcastResponse::OK;
constexpr ConsensusBroadcastResponse_Status ConsensusBroadcastResponse::BAD_REQUEST;
constexpr ConsensusBroadcastResponse_Status ConsensusBroadcastResponse::SERVICE_ERROR;
constexpr ConsensusBroadcastResponse_Status ConsensusBroadcastResponse::NOT_READY;
constexpr ConsensusBroadcastResponse_Status ConsensusBroadcastResponse::Status_MIN;
constexpr ConsensusBroadcastResponse_Status ConsensusBroadcastResponse::Status_MAX;
constexpr int ConsensusBroadcastResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusInitializeBlockResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[3];
}
bool ConsensusInitializeBlockResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusInitializeBlockResponse_Status ConsensusInitializeBlockResponse::STATUS_UNSET;
constexpr ConsensusInitializeBlockResponse_Status ConsensusInitializeBlockResponse::OK;
constexpr ConsensusInitializeBlockResponse_Status ConsensusInitializeBlockResponse::BAD_REQUEST;
constexpr ConsensusInitializeBlockResponse_Status ConsensusInitializeBlockResponse::SERVICE_ERROR;
constexpr ConsensusInitializeBlockResponse_Status ConsensusInitializeBlockResponse::NOT_READY;
constexpr ConsensusInitializeBlockResponse_Status ConsensusInitializeBlockResponse::INVALID_STATE;
constexpr ConsensusInitializeBlockResponse_Status ConsensusInitializeBlockResponse::UNKNOWN_BLOCK;
constexpr ConsensusInitializeBlockResponse_Status ConsensusInitializeBlockResponse::Status_MIN;
constexpr ConsensusInitializeBlockResponse_Status ConsensusInitializeBlockResponse::Status_MAX;
constexpr int ConsensusInitializeBlockResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusSummarizeBlockResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[4];
}
bool ConsensusSummarizeBlockResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusSummarizeBlockResponse_Status ConsensusSummarizeBlockResponse::STATUS_UNSET;
constexpr ConsensusSummarizeBlockResponse_Status ConsensusSummarizeBlockResponse::OK;
constexpr ConsensusSummarizeBlockResponse_Status ConsensusSummarizeBlockResponse::BAD_REQUEST;
constexpr ConsensusSummarizeBlockResponse_Status ConsensusSummarizeBlockResponse::SERVICE_ERROR;
constexpr ConsensusSummarizeBlockResponse_Status ConsensusSummarizeBlockResponse::NOT_READY;
constexpr ConsensusSummarizeBlockResponse_Status ConsensusSummarizeBlockResponse::INVALID_STATE;
constexpr ConsensusSummarizeBlockResponse_Status ConsensusSummarizeBlockResponse::BLOCK_NOT_READY;
constexpr ConsensusSummarizeBlockResponse_Status ConsensusSummarizeBlockResponse::Status_MIN;
constexpr ConsensusSummarizeBlockResponse_Status ConsensusSummarizeBlockResponse::Status_MAX;
constexpr int ConsensusSummarizeBlockResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusFinalizeBlockResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[5];
}
bool ConsensusFinalizeBlockResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusFinalizeBlockResponse_Status ConsensusFinalizeBlockResponse::STATUS_UNSET;
constexpr ConsensusFinalizeBlockResponse_Status ConsensusFinalizeBlockResponse::OK;
constexpr ConsensusFinalizeBlockResponse_Status ConsensusFinalizeBlockResponse::BAD_REQUEST;
constexpr ConsensusFinalizeBlockResponse_Status ConsensusFinalizeBlockResponse::SERVICE_ERROR;
constexpr ConsensusFinalizeBlockResponse_Status ConsensusFinalizeBlockResponse::NOT_READY;
constexpr ConsensusFinalizeBlockResponse_Status ConsensusFinalizeBlockResponse::INVALID_STATE;
constexpr ConsensusFinalizeBlockResponse_Status ConsensusFinalizeBlockResponse::BLOCK_NOT_READY;
constexpr ConsensusFinalizeBlockResponse_Status ConsensusFinalizeBlockResponse::Status_MIN;
constexpr ConsensusFinalizeBlockResponse_Status ConsensusFinalizeBlockResponse::Status_MAX;
constexpr int ConsensusFinalizeBlockResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusCancelBlockResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[6];
}
bool ConsensusCancelBlockResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusCancelBlockResponse_Status ConsensusCancelBlockResponse::STATUS_UNSET;
constexpr ConsensusCancelBlockResponse_Status ConsensusCancelBlockResponse::OK;
constexpr ConsensusCancelBlockResponse_Status ConsensusCancelBlockResponse::BAD_REQUEST;
constexpr ConsensusCancelBlockResponse_Status ConsensusCancelBlockResponse::SERVICE_ERROR;
constexpr ConsensusCancelBlockResponse_Status ConsensusCancelBlockResponse::NOT_READY;
constexpr ConsensusCancelBlockResponse_Status ConsensusCancelBlockResponse::INVALID_STATE;
constexpr ConsensusCancelBlockResponse_Status ConsensusCancelBlockResponse::Status_MIN;
constexpr ConsensusCancelBlockResponse_Status ConsensusCancelBlockResponse::Status_MAX;
constexpr int ConsensusCancelBlockResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusCheckBlocksResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[7];
}
bool ConsensusCheckBlocksResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusCheckBlocksResponse_Status ConsensusCheckBlocksResponse::STATUS_UNSET;
constexpr ConsensusCheckBlocksResponse_Status ConsensusCheckBlocksResponse::OK;
constexpr ConsensusCheckBlocksResponse_Status ConsensusCheckBlocksResponse::BAD_REQUEST;
constexpr ConsensusCheckBlocksResponse_Status ConsensusCheckBlocksResponse::SERVICE_ERROR;
constexpr ConsensusCheckBlocksResponse_Status ConsensusCheckBlocksResponse::NOT_READY;
constexpr ConsensusCheckBlocksResponse_Status ConsensusCheckBlocksResponse::UNKNOWN_BLOCK;
constexpr ConsensusCheckBlocksResponse_Status ConsensusCheckBlocksResponse::Status_MIN;
constexpr ConsensusCheckBlocksResponse_Status ConsensusCheckBlocksResponse::Status_MAX;
constexpr int ConsensusCheckBlocksResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusCommitBlockResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[8];
}
bool ConsensusCommitBlockResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusCommitBlockResponse_Status ConsensusCommitBlockResponse::STATUS_UNSET;
constexpr ConsensusCommitBlockResponse_Status ConsensusCommitBlockResponse::OK;
constexpr ConsensusCommitBlockResponse_Status ConsensusCommitBlockResponse::BAD_REQUEST;
constexpr ConsensusCommitBlockResponse_Status ConsensusCommitBlockResponse::SERVICE_ERROR;
constexpr ConsensusCommitBlockResponse_Status ConsensusCommitBlockResponse::NOT_READY;
constexpr ConsensusCommitBlockResponse_Status ConsensusCommitBlockResponse::UNKNOWN_BLOCK;
constexpr ConsensusCommitBlockResponse_Status ConsensusCommitBlockResponse::Status_MIN;
constexpr ConsensusCommitBlockResponse_Status ConsensusCommitBlockResponse::Status_MAX;
constexpr int ConsensusCommitBlockResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusIgnoreBlockResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[9];
}
bool ConsensusIgnoreBlockResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusIgnoreBlockResponse_Status ConsensusIgnoreBlockResponse::STATUS_UNSET;
constexpr ConsensusIgnoreBlockResponse_Status ConsensusIgnoreBlockResponse::OK;
constexpr ConsensusIgnoreBlockResponse_Status ConsensusIgnoreBlockResponse::BAD_REQUEST;
constexpr ConsensusIgnoreBlockResponse_Status ConsensusIgnoreBlockResponse::SERVICE_ERROR;
constexpr ConsensusIgnoreBlockResponse_Status ConsensusIgnoreBlockResponse::NOT_READY;
constexpr ConsensusIgnoreBlockResponse_Status ConsensusIgnoreBlockResponse::UNKNOWN_BLOCK;
constexpr ConsensusIgnoreBlockResponse_Status ConsensusIgnoreBlockResponse::Status_MIN;
constexpr ConsensusIgnoreBlockResponse_Status ConsensusIgnoreBlockResponse::Status_MAX;
constexpr int ConsensusIgnoreBlockResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusFailBlockResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[10];
}
bool ConsensusFailBlockResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusFailBlockResponse_Status ConsensusFailBlockResponse::STATUS_UNSET;
constexpr ConsensusFailBlockResponse_Status ConsensusFailBlockResponse::OK;
constexpr ConsensusFailBlockResponse_Status ConsensusFailBlockResponse::BAD_REQUEST;
constexpr ConsensusFailBlockResponse_Status ConsensusFailBlockResponse::SERVICE_ERROR;
constexpr ConsensusFailBlockResponse_Status ConsensusFailBlockResponse::NOT_READY;
constexpr ConsensusFailBlockResponse_Status ConsensusFailBlockResponse::UNKNOWN_BLOCK;
constexpr ConsensusFailBlockResponse_Status ConsensusFailBlockResponse::Status_MIN;
constexpr ConsensusFailBlockResponse_Status ConsensusFailBlockResponse::Status_MAX;
constexpr int ConsensusFailBlockResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusBlocksGetResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[11];
}
bool ConsensusBlocksGetResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusBlocksGetResponse_Status ConsensusBlocksGetResponse::STATUS_UNSET;
constexpr ConsensusBlocksGetResponse_Status ConsensusBlocksGetResponse::OK;
constexpr ConsensusBlocksGetResponse_Status ConsensusBlocksGetResponse::BAD_REQUEST;
constexpr ConsensusBlocksGetResponse_Status ConsensusBlocksGetResponse::SERVICE_ERROR;
constexpr ConsensusBlocksGetResponse_Status ConsensusBlocksGetResponse::NOT_READY;
constexpr ConsensusBlocksGetResponse_Status ConsensusBlocksGetResponse::UNKNOWN_BLOCK;
constexpr ConsensusBlocksGetResponse_Status ConsensusBlocksGetResponse::Status_MIN;
constexpr ConsensusBlocksGetResponse_Status ConsensusBlocksGetResponse::Status_MAX;
constexpr int ConsensusBlocksGetResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusChainHeadGetResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[12];
}
bool ConsensusChainHeadGetResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusChainHeadGetResponse_Status ConsensusChainHeadGetResponse::STATUS_UNSET;
constexpr ConsensusChainHeadGetResponse_Status ConsensusChainHeadGetResponse::OK;
constexpr ConsensusChainHeadGetResponse_Status ConsensusChainHeadGetResponse::BAD_REQUEST;
constexpr ConsensusChainHeadGetResponse_Status ConsensusChainHeadGetResponse::SERVICE_ERROR;
constexpr ConsensusChainHeadGetResponse_Status ConsensusChainHeadGetResponse::NOT_READY;
constexpr ConsensusChainHeadGetResponse_Status ConsensusChainHeadGetResponse::NO_CHAIN_HEAD;
constexpr ConsensusChainHeadGetResponse_Status ConsensusChainHeadGetResponse::Status_MIN;
constexpr ConsensusChainHeadGetResponse_Status ConsensusChainHeadGetResponse::Status_MAX;
constexpr int ConsensusChainHeadGetResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusSettingsGetResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[13];
}
bool ConsensusSettingsGetResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusSettingsGetResponse_Status ConsensusSettingsGetResponse::STATUS_UNSET;
constexpr ConsensusSettingsGetResponse_Status ConsensusSettingsGetResponse::OK;
constexpr ConsensusSettingsGetResponse_Status ConsensusSettingsGetResponse::BAD_REQUEST;
constexpr ConsensusSettingsGetResponse_Status ConsensusSettingsGetResponse::SERVICE_ERROR;
constexpr ConsensusSettingsGetResponse_Status ConsensusSettingsGetResponse::NOT_READY;
constexpr ConsensusSettingsGetResponse_Status ConsensusSettingsGetResponse::UNKNOWN_BLOCK;
constexpr ConsensusSettingsGetResponse_Status ConsensusSettingsGetResponse::Status_MIN;
constexpr ConsensusSettingsGetResponse_Status ConsensusSettingsGetResponse::Status_MAX;
constexpr int ConsensusSettingsGetResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsensusStateGetResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consensus_2eproto);
  return file_level_enum_descriptors_consensus_2eproto[14];
}
bool ConsensusStateGetResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConsensusStateGetResponse_Status ConsensusStateGetResponse::STATUS_UNSET;
constexpr ConsensusStateGetResponse_Status ConsensusStateGetResponse::OK;
constexpr ConsensusStateGetResponse_Status ConsensusStateGetResponse::BAD_REQUEST;
constexpr ConsensusStateGetResponse_Status ConsensusStateGetResponse::SERVICE_ERROR;
constexpr ConsensusStateGetResponse_Status ConsensusStateGetResponse::NOT_READY;
constexpr ConsensusStateGetResponse_Status ConsensusStateGetResponse::UNKNOWN_BLOCK;
constexpr ConsensusStateGetResponse_Status ConsensusStateGetResponse::Status_MIN;
constexpr ConsensusStateGetResponse_Status ConsensusStateGetResponse::Status_MAX;
constexpr int ConsensusStateGetResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ConsensusPeerMessageHeader::InitAsDefaultInstance() {
}
class ConsensusPeerMessageHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusPeerMessageHeader::kSignerIdFieldNumber;
const int ConsensusPeerMessageHeader::kContentSha512FieldNumber;
const int ConsensusPeerMessageHeader::kMessageTypeFieldNumber;
const int ConsensusPeerMessageHeader::kNameFieldNumber;
const int ConsensusPeerMessageHeader::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusPeerMessageHeader::ConsensusPeerMessageHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusPeerMessageHeader)
}
ConsensusPeerMessageHeader::ConsensusPeerMessageHeader(const ConsensusPeerMessageHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.signer_id().size() > 0) {
    signer_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signer_id_);
  }
  content_sha512_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.content_sha512().size() > 0) {
    content_sha512_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_sha512_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.message_type().size() > 0) {
    message_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusPeerMessageHeader)
}

void ConsensusPeerMessageHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusPeerMessageHeader_consensus_2eproto.base);
  signer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_sha512_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusPeerMessageHeader::~ConsensusPeerMessageHeader() {
  // @@protoc_insertion_point(destructor:ConsensusPeerMessageHeader)
  SharedDtor();
}

void ConsensusPeerMessageHeader::SharedDtor() {
  signer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_sha512_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusPeerMessageHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusPeerMessageHeader& ConsensusPeerMessageHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusPeerMessageHeader_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusPeerMessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusPeerMessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signer_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_sha512_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusPeerMessageHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes signer_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_signer_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // bytes content_sha512 = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_content_sha512(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "ConsensusPeerMessageHeader.name");
        CHK_(ptr);
        break;
      }
      // string version = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_version(), ptr, ctx, "ConsensusPeerMessageHeader.version");
        CHK_(ptr);
        break;
      }
      // string message_type = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_message_type(), ptr, ctx, "ConsensusPeerMessageHeader.message_type");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusPeerMessageHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusPeerMessageHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes signer_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signer_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content_sha512 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_sha512()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConsensusPeerMessageHeader.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConsensusPeerMessageHeader.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->message_type().data(), static_cast<int>(this->message_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConsensusPeerMessageHeader.message_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusPeerMessageHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusPeerMessageHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusPeerMessageHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusPeerMessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signer_id = 1;
  if (this->signer_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signer_id(), output);
  }

  // bytes content_sha512 = 2;
  if (this->content_sha512().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content_sha512(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusPeerMessageHeader.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusPeerMessageHeader.version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // string message_type = 5;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusPeerMessageHeader.message_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->message_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusPeerMessageHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusPeerMessageHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusPeerMessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signer_id = 1;
  if (this->signer_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->signer_id(), target);
  }

  // bytes content_sha512 = 2;
  if (this->content_sha512().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->content_sha512(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusPeerMessageHeader.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusPeerMessageHeader.version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // string message_type = 5;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusPeerMessageHeader.message_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->message_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusPeerMessageHeader)
  return target;
}

size_t ConsensusPeerMessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusPeerMessageHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signer_id = 1;
  if (this->signer_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->signer_id());
  }

  // bytes content_sha512 = 2;
  if (this->content_sha512().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->content_sha512());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string message_type = 5;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusPeerMessageHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusPeerMessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusPeerMessageHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusPeerMessageHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusPeerMessageHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusPeerMessageHeader)
    MergeFrom(*source);
  }
}

void ConsensusPeerMessageHeader::MergeFrom(const ConsensusPeerMessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusPeerMessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signer_id().size() > 0) {

    signer_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signer_id_);
  }
  if (from.content_sha512().size() > 0) {

    content_sha512_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_sha512_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.message_type().size() > 0) {

    message_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
}

void ConsensusPeerMessageHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusPeerMessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusPeerMessageHeader::CopyFrom(const ConsensusPeerMessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusPeerMessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusPeerMessageHeader::IsInitialized() const {
  return true;
}

void ConsensusPeerMessageHeader::Swap(ConsensusPeerMessageHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusPeerMessageHeader::InternalSwap(ConsensusPeerMessageHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signer_id_.Swap(&other->signer_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_sha512_.Swap(&other->content_sha512_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_type_.Swap(&other->message_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusPeerMessageHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusPeerMessage::InitAsDefaultInstance() {
}
class ConsensusPeerMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusPeerMessage::kHeaderFieldNumber;
const int ConsensusPeerMessage::kHeaderSignatureFieldNumber;
const int ConsensusPeerMessage::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusPeerMessage::ConsensusPeerMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusPeerMessage)
}
ConsensusPeerMessage::ConsensusPeerMessage(const ConsensusPeerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.header().size() > 0) {
    header_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  header_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.header_signature().size() > 0) {
    header_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_signature_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusPeerMessage)
}

void ConsensusPeerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusPeerMessage_consensus_2eproto.base);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusPeerMessage::~ConsensusPeerMessage() {
  // @@protoc_insertion_point(destructor:ConsensusPeerMessage)
  SharedDtor();
}

void ConsensusPeerMessage::SharedDtor() {
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusPeerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusPeerMessage& ConsensusPeerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusPeerMessage_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusPeerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusPeerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusPeerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes header = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_header(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // bytes content = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_content(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // bytes header_signature = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_header_signature(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusPeerMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusPeerMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes header_signature = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusPeerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusPeerMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusPeerMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusPeerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes header = 1;
  if (this->header().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->header(), output);
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  // bytes header_signature = 3;
  if (this->header_signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->header_signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusPeerMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusPeerMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusPeerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes header = 1;
  if (this->header().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->header(), target);
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // bytes header_signature = 3;
  if (this->header_signature().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->header_signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusPeerMessage)
  return target;
}

size_t ConsensusPeerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusPeerMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes header = 1;
  if (this->header().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->header());
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // bytes header_signature = 3;
  if (this->header_signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->header_signature());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusPeerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusPeerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusPeerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusPeerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusPeerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusPeerMessage)
    MergeFrom(*source);
  }
}

void ConsensusPeerMessage::MergeFrom(const ConsensusPeerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusPeerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.header().size() > 0) {

    header_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.header_signature().size() > 0) {

    header_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_signature_);
  }
}

void ConsensusPeerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusPeerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusPeerMessage::CopyFrom(const ConsensusPeerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusPeerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusPeerMessage::IsInitialized() const {
  return true;
}

void ConsensusPeerMessage::Swap(ConsensusPeerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusPeerMessage::InternalSwap(ConsensusPeerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  header_.Swap(&other->header_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  header_signature_.Swap(&other->header_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusPeerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusBlock::InitAsDefaultInstance() {
}
class ConsensusBlock::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusBlock::kBlockIdFieldNumber;
const int ConsensusBlock::kPreviousIdFieldNumber;
const int ConsensusBlock::kSignerIdFieldNumber;
const int ConsensusBlock::kBlockNumFieldNumber;
const int ConsensusBlock::kPayloadFieldNumber;
const int ConsensusBlock::kSummaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusBlock::ConsensusBlock()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusBlock)
}
ConsensusBlock::ConsensusBlock(const ConsensusBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.block_id().size() > 0) {
    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
  previous_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.previous_id().size() > 0) {
    previous_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previous_id_);
  }
  signer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.signer_id().size() > 0) {
    signer_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signer_id_);
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.summary().size() > 0) {
    summary_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.summary_);
  }
  block_num_ = from.block_num_;
  // @@protoc_insertion_point(copy_constructor:ConsensusBlock)
}

void ConsensusBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusBlock_consensus_2eproto.base);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_num_ = PROTOBUF_ULONGLONG(0);
}

ConsensusBlock::~ConsensusBlock() {
  // @@protoc_insertion_point(destructor:ConsensusBlock)
  SharedDtor();
}

void ConsensusBlock::SharedDtor() {
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusBlock& ConsensusBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusBlock_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signer_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summary_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_num_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_block_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // bytes previous_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_previous_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // bytes signer_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_signer_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // uint64 block_num = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // bytes payload = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_payload(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // bytes summary = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_summary(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusBlock::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusBlock)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes previous_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previous_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes signer_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signer_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 block_num = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes payload = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes summary = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusBlock::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->block_id(), output);
  }

  // bytes previous_id = 2;
  if (this->previous_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->previous_id(), output);
  }

  // bytes signer_id = 3;
  if (this->signer_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->signer_id(), output);
  }

  // uint64 block_num = 4;
  if (this->block_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->block_num(), output);
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->payload(), output);
  }

  // bytes summary = 6;
  if (this->summary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->summary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusBlock)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusBlock::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->block_id(), target);
  }

  // bytes previous_id = 2;
  if (this->previous_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->previous_id(), target);
  }

  // bytes signer_id = 3;
  if (this->signer_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->signer_id(), target);
  }

  // uint64 block_num = 4;
  if (this->block_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->block_num(), target);
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->payload(), target);
  }

  // bytes summary = 6;
  if (this->summary().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->summary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusBlock)
  return target;
}

size_t ConsensusBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->block_id());
  }

  // bytes previous_id = 2;
  if (this->previous_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->previous_id());
  }

  // bytes signer_id = 3;
  if (this->signer_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->signer_id());
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  // bytes summary = 6;
  if (this->summary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->summary());
  }

  // uint64 block_num = 4;
  if (this->block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->block_num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusBlock)
    MergeFrom(*source);
  }
}

void ConsensusBlock::MergeFrom(const ConsensusBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id().size() > 0) {

    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
  if (from.previous_id().size() > 0) {

    previous_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previous_id_);
  }
  if (from.signer_id().size() > 0) {

    signer_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signer_id_);
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.summary().size() > 0) {

    summary_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.summary_);
  }
  if (from.block_num() != 0) {
    set_block_num(from.block_num());
  }
}

void ConsensusBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusBlock::CopyFrom(const ConsensusBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusBlock::IsInitialized() const {
  return true;
}

void ConsensusBlock::Swap(ConsensusBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusBlock::InternalSwap(ConsensusBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  previous_id_.Swap(&other->previous_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signer_id_.Swap(&other->signer_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  summary_.Swap(&other->summary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(block_num_, other->block_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusPeerInfo::InitAsDefaultInstance() {
}
class ConsensusPeerInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusPeerInfo::kPeerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusPeerInfo::ConsensusPeerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusPeerInfo)
}
ConsensusPeerInfo::ConsensusPeerInfo(const ConsensusPeerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.peer_id().size() > 0) {
    peer_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusPeerInfo)
}

void ConsensusPeerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusPeerInfo_consensus_2eproto.base);
  peer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusPeerInfo::~ConsensusPeerInfo() {
  // @@protoc_insertion_point(destructor:ConsensusPeerInfo)
  SharedDtor();
}

void ConsensusPeerInfo::SharedDtor() {
  peer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusPeerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusPeerInfo& ConsensusPeerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusPeerInfo_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusPeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusPeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusPeerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes peer_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_peer_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusPeerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusPeerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes peer_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_peer_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusPeerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusPeerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusPeerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusPeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes peer_id = 1;
  if (this->peer_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->peer_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusPeerInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusPeerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusPeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes peer_id = 1;
  if (this->peer_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->peer_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusPeerInfo)
  return target;
}

size_t ConsensusPeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusPeerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes peer_id = 1;
  if (this->peer_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->peer_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusPeerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusPeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusPeerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusPeerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusPeerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusPeerInfo)
    MergeFrom(*source);
  }
}

void ConsensusPeerInfo::MergeFrom(const ConsensusPeerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusPeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.peer_id().size() > 0) {

    peer_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
}

void ConsensusPeerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusPeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusPeerInfo::CopyFrom(const ConsensusPeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusPeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusPeerInfo::IsInitialized() const {
  return true;
}

void ConsensusPeerInfo::Swap(ConsensusPeerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusPeerInfo::InternalSwap(ConsensusPeerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peer_id_.Swap(&other->peer_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusPeerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusSettingsEntry::InitAsDefaultInstance() {
}
class ConsensusSettingsEntry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusSettingsEntry::kKeyFieldNumber;
const int ConsensusSettingsEntry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusSettingsEntry::ConsensusSettingsEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusSettingsEntry)
}
ConsensusSettingsEntry::ConsensusSettingsEntry(const ConsensusSettingsEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusSettingsEntry)
}

void ConsensusSettingsEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusSettingsEntry_consensus_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusSettingsEntry::~ConsensusSettingsEntry() {
  // @@protoc_insertion_point(destructor:ConsensusSettingsEntry)
  SharedDtor();
}

void ConsensusSettingsEntry::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusSettingsEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusSettingsEntry& ConsensusSettingsEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusSettingsEntry_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusSettingsEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusSettingsEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusSettingsEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_key(), ptr, ctx, "ConsensusSettingsEntry.key");
        CHK_(ptr);
        break;
      }
      // string value = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "ConsensusSettingsEntry.value");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusSettingsEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusSettingsEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConsensusSettingsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConsensusSettingsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusSettingsEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusSettingsEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusSettingsEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusSettingsEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusSettingsEntry.key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusSettingsEntry.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusSettingsEntry)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusSettingsEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusSettingsEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusSettingsEntry.key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusSettingsEntry.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusSettingsEntry)
  return target;
}

size_t ConsensusSettingsEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusSettingsEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusSettingsEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusSettingsEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusSettingsEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusSettingsEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusSettingsEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusSettingsEntry)
    MergeFrom(*source);
  }
}

void ConsensusSettingsEntry::MergeFrom(const ConsensusSettingsEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusSettingsEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void ConsensusSettingsEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusSettingsEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusSettingsEntry::CopyFrom(const ConsensusSettingsEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusSettingsEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusSettingsEntry::IsInitialized() const {
  return true;
}

void ConsensusSettingsEntry::Swap(ConsensusSettingsEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusSettingsEntry::InternalSwap(ConsensusSettingsEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusSettingsEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusStateEntry::InitAsDefaultInstance() {
}
class ConsensusStateEntry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusStateEntry::kAddressFieldNumber;
const int ConsensusStateEntry::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusStateEntry::ConsensusStateEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusStateEntry)
}
ConsensusStateEntry::ConsensusStateEntry(const ConsensusStateEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusStateEntry)
}

void ConsensusStateEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusStateEntry_consensus_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusStateEntry::~ConsensusStateEntry() {
  // @@protoc_insertion_point(destructor:ConsensusStateEntry)
  SharedDtor();
}

void ConsensusStateEntry::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusStateEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusStateEntry& ConsensusStateEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusStateEntry_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusStateEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusStateEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusStateEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_address(), ptr, ctx, "ConsensusStateEntry.address");
        CHK_(ptr);
        break;
      }
      // bytes data = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusStateEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusStateEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConsensusStateEntry.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusStateEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusStateEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusStateEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusStateEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusStateEntry.address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusStateEntry)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusStateEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusStateEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusStateEntry.address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusStateEntry)
  return target;
}

size_t ConsensusStateEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusStateEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->address());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusStateEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusStateEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusStateEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusStateEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusStateEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusStateEntry)
    MergeFrom(*source);
  }
}

void ConsensusStateEntry::MergeFrom(const ConsensusStateEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusStateEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ConsensusStateEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusStateEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusStateEntry::CopyFrom(const ConsensusStateEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusStateEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusStateEntry::IsInitialized() const {
  return true;
}

void ConsensusStateEntry::Swap(ConsensusStateEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusStateEntry::InternalSwap(ConsensusStateEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusStateEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusRegisterRequest::InitAsDefaultInstance() {
}
class ConsensusRegisterRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusRegisterRequest::kNameFieldNumber;
const int ConsensusRegisterRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusRegisterRequest::ConsensusRegisterRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusRegisterRequest)
}
ConsensusRegisterRequest::ConsensusRegisterRequest(const ConsensusRegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusRegisterRequest)
}

void ConsensusRegisterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusRegisterRequest_consensus_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusRegisterRequest::~ConsensusRegisterRequest() {
  // @@protoc_insertion_point(destructor:ConsensusRegisterRequest)
  SharedDtor();
}

void ConsensusRegisterRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusRegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusRegisterRequest& ConsensusRegisterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusRegisterRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusRegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusRegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusRegisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "ConsensusRegisterRequest.name");
        CHK_(ptr);
        break;
      }
      // string version = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_version(), ptr, ctx, "ConsensusRegisterRequest.version");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusRegisterRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusRegisterRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConsensusRegisterRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConsensusRegisterRequest.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusRegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusRegisterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusRegisterRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusRegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusRegisterRequest.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusRegisterRequest.version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusRegisterRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusRegisterRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusRegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusRegisterRequest.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusRegisterRequest.version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusRegisterRequest)
  return target;
}

size_t ConsensusRegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusRegisterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusRegisterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusRegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusRegisterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusRegisterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusRegisterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusRegisterRequest)
    MergeFrom(*source);
  }
}

void ConsensusRegisterRequest::MergeFrom(const ConsensusRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusRegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void ConsensusRegisterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusRegisterRequest::CopyFrom(const ConsensusRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusRegisterRequest::IsInitialized() const {
  return true;
}

void ConsensusRegisterRequest::Swap(ConsensusRegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusRegisterRequest::InternalSwap(ConsensusRegisterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusRegisterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusRegisterResponse::InitAsDefaultInstance() {
  ::_ConsensusRegisterResponse_default_instance_._instance.get_mutable()->chain_head_ = const_cast< ::ConsensusBlock*>(
      ::ConsensusBlock::internal_default_instance());
  ::_ConsensusRegisterResponse_default_instance_._instance.get_mutable()->local_peer_info_ = const_cast< ::ConsensusPeerInfo*>(
      ::ConsensusPeerInfo::internal_default_instance());
}
class ConsensusRegisterResponse::HasBitSetters {
 public:
  static const ::ConsensusBlock& chain_head(const ConsensusRegisterResponse* msg);
  static const ::ConsensusPeerInfo& local_peer_info(const ConsensusRegisterResponse* msg);
};

const ::ConsensusBlock&
ConsensusRegisterResponse::HasBitSetters::chain_head(const ConsensusRegisterResponse* msg) {
  return *msg->chain_head_;
}
const ::ConsensusPeerInfo&
ConsensusRegisterResponse::HasBitSetters::local_peer_info(const ConsensusRegisterResponse* msg) {
  return *msg->local_peer_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusRegisterResponse::kStatusFieldNumber;
const int ConsensusRegisterResponse::kChainHeadFieldNumber;
const int ConsensusRegisterResponse::kPeersFieldNumber;
const int ConsensusRegisterResponse::kLocalPeerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusRegisterResponse::ConsensusRegisterResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusRegisterResponse)
}
ConsensusRegisterResponse::ConsensusRegisterResponse(const ConsensusRegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chain_head()) {
    chain_head_ = new ::ConsensusBlock(*from.chain_head_);
  } else {
    chain_head_ = nullptr;
  }
  if (from.has_local_peer_info()) {
    local_peer_info_ = new ::ConsensusPeerInfo(*from.local_peer_info_);
  } else {
    local_peer_info_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusRegisterResponse)
}

void ConsensusRegisterResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusRegisterResponse_consensus_2eproto.base);
  ::memset(&chain_head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&chain_head_)) + sizeof(status_));
}

ConsensusRegisterResponse::~ConsensusRegisterResponse() {
  // @@protoc_insertion_point(destructor:ConsensusRegisterResponse)
  SharedDtor();
}

void ConsensusRegisterResponse::SharedDtor() {
  if (this != internal_default_instance()) delete chain_head_;
  if (this != internal_default_instance()) delete local_peer_info_;
}

void ConsensusRegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusRegisterResponse& ConsensusRegisterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusRegisterResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusRegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusRegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  if (GetArenaNoVirtual() == nullptr && chain_head_ != nullptr) {
    delete chain_head_;
  }
  chain_head_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && local_peer_info_ != nullptr) {
    delete local_peer_info_;
  }
  local_peer_info_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusRegisterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusRegisterResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusRegisterResponse_Status>(val));
        break;
      }
      // .ConsensusBlock chain_head = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_chain_head(), ptr);
        CHK_(ptr);
        break;
      }
      // repeated .ConsensusPeerInfo peers = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_peers(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 26) break;
          ptr += 1;
        }
        break;
      }
      // .ConsensusPeerInfo local_peer_info = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_local_peer_info(), ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusRegisterResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusRegisterResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusRegisterResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusRegisterResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ConsensusBlock chain_head = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chain_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ConsensusPeerInfo peers = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ConsensusPeerInfo local_peer_info = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_local_peer_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusRegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusRegisterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusRegisterResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusRegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusRegisterResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // .ConsensusBlock chain_head = 2;
  if (this->has_chain_head()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::chain_head(this), output);
  }

  // repeated .ConsensusPeerInfo peers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->peers(static_cast<int>(i)),
      output);
  }

  // .ConsensusPeerInfo local_peer_info = 4;
  if (this->has_local_peer_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::local_peer_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusRegisterResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusRegisterResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusRegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusRegisterResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // .ConsensusBlock chain_head = 2;
  if (this->has_chain_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::chain_head(this), target);
  }

  // repeated .ConsensusPeerInfo peers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->peers(static_cast<int>(i)), target);
  }

  // .ConsensusPeerInfo local_peer_info = 4;
  if (this->has_local_peer_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::local_peer_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusRegisterResponse)
  return target;
}

size_t ConsensusRegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusRegisterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConsensusPeerInfo peers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->peers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->peers(static_cast<int>(i)));
    }
  }

  // .ConsensusBlock chain_head = 2;
  if (this->has_chain_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chain_head_);
  }

  // .ConsensusPeerInfo local_peer_info = 4;
  if (this->has_local_peer_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_peer_info_);
  }

  // .ConsensusRegisterResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusRegisterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusRegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusRegisterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusRegisterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusRegisterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusRegisterResponse)
    MergeFrom(*source);
  }
}

void ConsensusRegisterResponse::MergeFrom(const ConsensusRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusRegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
  if (from.has_chain_head()) {
    mutable_chain_head()->::ConsensusBlock::MergeFrom(from.chain_head());
  }
  if (from.has_local_peer_info()) {
    mutable_local_peer_info()->::ConsensusPeerInfo::MergeFrom(from.local_peer_info());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusRegisterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusRegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusRegisterResponse::CopyFrom(const ConsensusRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusRegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusRegisterResponse::IsInitialized() const {
  return true;
}

void ConsensusRegisterResponse::Swap(ConsensusRegisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusRegisterResponse::InternalSwap(ConsensusRegisterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&peers_)->InternalSwap(CastToBase(&other->peers_));
  swap(chain_head_, other->chain_head_);
  swap(local_peer_info_, other->local_peer_info_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusRegisterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusNotifyPeerConnected::InitAsDefaultInstance() {
  ::_ConsensusNotifyPeerConnected_default_instance_._instance.get_mutable()->peer_info_ = const_cast< ::ConsensusPeerInfo*>(
      ::ConsensusPeerInfo::internal_default_instance());
}
class ConsensusNotifyPeerConnected::HasBitSetters {
 public:
  static const ::ConsensusPeerInfo& peer_info(const ConsensusNotifyPeerConnected* msg);
};

const ::ConsensusPeerInfo&
ConsensusNotifyPeerConnected::HasBitSetters::peer_info(const ConsensusNotifyPeerConnected* msg) {
  return *msg->peer_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusNotifyPeerConnected::kPeerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusNotifyPeerConnected::ConsensusNotifyPeerConnected()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusNotifyPeerConnected)
}
ConsensusNotifyPeerConnected::ConsensusNotifyPeerConnected(const ConsensusNotifyPeerConnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer_info()) {
    peer_info_ = new ::ConsensusPeerInfo(*from.peer_info_);
  } else {
    peer_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusNotifyPeerConnected)
}

void ConsensusNotifyPeerConnected::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusNotifyPeerConnected_consensus_2eproto.base);
  peer_info_ = nullptr;
}

ConsensusNotifyPeerConnected::~ConsensusNotifyPeerConnected() {
  // @@protoc_insertion_point(destructor:ConsensusNotifyPeerConnected)
  SharedDtor();
}

void ConsensusNotifyPeerConnected::SharedDtor() {
  if (this != internal_default_instance()) delete peer_info_;
}

void ConsensusNotifyPeerConnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusNotifyPeerConnected& ConsensusNotifyPeerConnected::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusNotifyPeerConnected_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusNotifyPeerConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusNotifyPeerConnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && peer_info_ != nullptr) {
    delete peer_info_;
  }
  peer_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusNotifyPeerConnected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusPeerInfo peer_info = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_peer_info(), ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusNotifyPeerConnected::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusNotifyPeerConnected)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusPeerInfo peer_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_peer_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusNotifyPeerConnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusNotifyPeerConnected)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusNotifyPeerConnected::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusNotifyPeerConnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusPeerInfo peer_info = 1;
  if (this->has_peer_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::peer_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusNotifyPeerConnected)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusNotifyPeerConnected::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusNotifyPeerConnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusPeerInfo peer_info = 1;
  if (this->has_peer_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::peer_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusNotifyPeerConnected)
  return target;
}

size_t ConsensusNotifyPeerConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusNotifyPeerConnected)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConsensusPeerInfo peer_info = 1;
  if (this->has_peer_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_info_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusNotifyPeerConnected::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusNotifyPeerConnected)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusNotifyPeerConnected* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusNotifyPeerConnected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusNotifyPeerConnected)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusNotifyPeerConnected)
    MergeFrom(*source);
  }
}

void ConsensusNotifyPeerConnected::MergeFrom(const ConsensusNotifyPeerConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusNotifyPeerConnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer_info()) {
    mutable_peer_info()->::ConsensusPeerInfo::MergeFrom(from.peer_info());
  }
}

void ConsensusNotifyPeerConnected::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusNotifyPeerConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusNotifyPeerConnected::CopyFrom(const ConsensusNotifyPeerConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusNotifyPeerConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusNotifyPeerConnected::IsInitialized() const {
  return true;
}

void ConsensusNotifyPeerConnected::Swap(ConsensusNotifyPeerConnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusNotifyPeerConnected::InternalSwap(ConsensusNotifyPeerConnected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_info_, other->peer_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusNotifyPeerConnected::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusNotifyPeerDisconnected::InitAsDefaultInstance() {
}
class ConsensusNotifyPeerDisconnected::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusNotifyPeerDisconnected::kPeerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusNotifyPeerDisconnected::ConsensusNotifyPeerDisconnected()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusNotifyPeerDisconnected)
}
ConsensusNotifyPeerDisconnected::ConsensusNotifyPeerDisconnected(const ConsensusNotifyPeerDisconnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.peer_id().size() > 0) {
    peer_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusNotifyPeerDisconnected)
}

void ConsensusNotifyPeerDisconnected::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusNotifyPeerDisconnected_consensus_2eproto.base);
  peer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusNotifyPeerDisconnected::~ConsensusNotifyPeerDisconnected() {
  // @@protoc_insertion_point(destructor:ConsensusNotifyPeerDisconnected)
  SharedDtor();
}

void ConsensusNotifyPeerDisconnected::SharedDtor() {
  peer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusNotifyPeerDisconnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusNotifyPeerDisconnected& ConsensusNotifyPeerDisconnected::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusNotifyPeerDisconnected_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusNotifyPeerDisconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusNotifyPeerDisconnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusNotifyPeerDisconnected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes peer_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_peer_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusNotifyPeerDisconnected::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusNotifyPeerDisconnected)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes peer_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_peer_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusNotifyPeerDisconnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusNotifyPeerDisconnected)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusNotifyPeerDisconnected::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusNotifyPeerDisconnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes peer_id = 1;
  if (this->peer_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->peer_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusNotifyPeerDisconnected)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusNotifyPeerDisconnected::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusNotifyPeerDisconnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes peer_id = 1;
  if (this->peer_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->peer_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusNotifyPeerDisconnected)
  return target;
}

size_t ConsensusNotifyPeerDisconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusNotifyPeerDisconnected)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes peer_id = 1;
  if (this->peer_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->peer_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusNotifyPeerDisconnected::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusNotifyPeerDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusNotifyPeerDisconnected* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusNotifyPeerDisconnected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusNotifyPeerDisconnected)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusNotifyPeerDisconnected)
    MergeFrom(*source);
  }
}

void ConsensusNotifyPeerDisconnected::MergeFrom(const ConsensusNotifyPeerDisconnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusNotifyPeerDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.peer_id().size() > 0) {

    peer_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
}

void ConsensusNotifyPeerDisconnected::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusNotifyPeerDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusNotifyPeerDisconnected::CopyFrom(const ConsensusNotifyPeerDisconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusNotifyPeerDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusNotifyPeerDisconnected::IsInitialized() const {
  return true;
}

void ConsensusNotifyPeerDisconnected::Swap(ConsensusNotifyPeerDisconnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusNotifyPeerDisconnected::InternalSwap(ConsensusNotifyPeerDisconnected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peer_id_.Swap(&other->peer_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusNotifyPeerDisconnected::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusNotifyPeerMessage::InitAsDefaultInstance() {
  ::_ConsensusNotifyPeerMessage_default_instance_._instance.get_mutable()->message_ = const_cast< ::ConsensusPeerMessage*>(
      ::ConsensusPeerMessage::internal_default_instance());
}
class ConsensusNotifyPeerMessage::HasBitSetters {
 public:
  static const ::ConsensusPeerMessage& message(const ConsensusNotifyPeerMessage* msg);
};

const ::ConsensusPeerMessage&
ConsensusNotifyPeerMessage::HasBitSetters::message(const ConsensusNotifyPeerMessage* msg) {
  return *msg->message_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusNotifyPeerMessage::kMessageFieldNumber;
const int ConsensusNotifyPeerMessage::kSenderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusNotifyPeerMessage::ConsensusNotifyPeerMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusNotifyPeerMessage)
}
ConsensusNotifyPeerMessage::ConsensusNotifyPeerMessage(const ConsensusNotifyPeerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.sender_id().size() > 0) {
    sender_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
  }
  if (from.has_message()) {
    message_ = new ::ConsensusPeerMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusNotifyPeerMessage)
}

void ConsensusNotifyPeerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusNotifyPeerMessage_consensus_2eproto.base);
  sender_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_ = nullptr;
}

ConsensusNotifyPeerMessage::~ConsensusNotifyPeerMessage() {
  // @@protoc_insertion_point(destructor:ConsensusNotifyPeerMessage)
  SharedDtor();
}

void ConsensusNotifyPeerMessage::SharedDtor() {
  sender_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void ConsensusNotifyPeerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusNotifyPeerMessage& ConsensusNotifyPeerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusNotifyPeerMessage_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusNotifyPeerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusNotifyPeerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusNotifyPeerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusPeerMessage message = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_message(), ptr);
        CHK_(ptr);
        break;
      }
      // bytes sender_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_sender_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusNotifyPeerMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusNotifyPeerMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusPeerMessage message = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sender_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusNotifyPeerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusNotifyPeerMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusNotifyPeerMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusNotifyPeerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusPeerMessage message = 1;
  if (this->has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::message(this), output);
  }

  // bytes sender_id = 2;
  if (this->sender_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sender_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusNotifyPeerMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusNotifyPeerMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusNotifyPeerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusPeerMessage message = 1;
  if (this->has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::message(this), target);
  }

  // bytes sender_id = 2;
  if (this->sender_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->sender_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusNotifyPeerMessage)
  return target;
}

size_t ConsensusNotifyPeerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusNotifyPeerMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sender_id = 2;
  if (this->sender_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->sender_id());
  }

  // .ConsensusPeerMessage message = 1;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusNotifyPeerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusNotifyPeerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusNotifyPeerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusNotifyPeerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusNotifyPeerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusNotifyPeerMessage)
    MergeFrom(*source);
  }
}

void ConsensusNotifyPeerMessage::MergeFrom(const ConsensusNotifyPeerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusNotifyPeerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender_id().size() > 0) {

    sender_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
  }
  if (from.has_message()) {
    mutable_message()->::ConsensusPeerMessage::MergeFrom(from.message());
  }
}

void ConsensusNotifyPeerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusNotifyPeerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusNotifyPeerMessage::CopyFrom(const ConsensusNotifyPeerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusNotifyPeerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusNotifyPeerMessage::IsInitialized() const {
  return true;
}

void ConsensusNotifyPeerMessage::Swap(ConsensusNotifyPeerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusNotifyPeerMessage::InternalSwap(ConsensusNotifyPeerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sender_id_.Swap(&other->sender_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusNotifyPeerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusNotifyBlockNew::InitAsDefaultInstance() {
  ::_ConsensusNotifyBlockNew_default_instance_._instance.get_mutable()->block_ = const_cast< ::ConsensusBlock*>(
      ::ConsensusBlock::internal_default_instance());
}
class ConsensusNotifyBlockNew::HasBitSetters {
 public:
  static const ::ConsensusBlock& block(const ConsensusNotifyBlockNew* msg);
};

const ::ConsensusBlock&
ConsensusNotifyBlockNew::HasBitSetters::block(const ConsensusNotifyBlockNew* msg) {
  return *msg->block_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusNotifyBlockNew::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusNotifyBlockNew::ConsensusNotifyBlockNew()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusNotifyBlockNew)
}
ConsensusNotifyBlockNew::ConsensusNotifyBlockNew(const ConsensusNotifyBlockNew& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block()) {
    block_ = new ::ConsensusBlock(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusNotifyBlockNew)
}

void ConsensusNotifyBlockNew::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusNotifyBlockNew_consensus_2eproto.base);
  block_ = nullptr;
}

ConsensusNotifyBlockNew::~ConsensusNotifyBlockNew() {
  // @@protoc_insertion_point(destructor:ConsensusNotifyBlockNew)
  SharedDtor();
}

void ConsensusNotifyBlockNew::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void ConsensusNotifyBlockNew::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusNotifyBlockNew& ConsensusNotifyBlockNew::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusNotifyBlockNew_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusNotifyBlockNew::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusNotifyBlockNew)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusNotifyBlockNew::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusBlock block = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_block(), ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusNotifyBlockNew::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusNotifyBlockNew)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusBlock block = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusNotifyBlockNew)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusNotifyBlockNew)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusNotifyBlockNew::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusNotifyBlockNew)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusBlock block = 1;
  if (this->has_block()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::block(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusNotifyBlockNew)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusNotifyBlockNew::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusNotifyBlockNew)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusBlock block = 1;
  if (this->has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::block(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusNotifyBlockNew)
  return target;
}

size_t ConsensusNotifyBlockNew::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusNotifyBlockNew)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConsensusBlock block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusNotifyBlockNew::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusNotifyBlockNew)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusNotifyBlockNew* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusNotifyBlockNew>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusNotifyBlockNew)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusNotifyBlockNew)
    MergeFrom(*source);
  }
}

void ConsensusNotifyBlockNew::MergeFrom(const ConsensusNotifyBlockNew& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusNotifyBlockNew)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    mutable_block()->::ConsensusBlock::MergeFrom(from.block());
  }
}

void ConsensusNotifyBlockNew::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusNotifyBlockNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusNotifyBlockNew::CopyFrom(const ConsensusNotifyBlockNew& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusNotifyBlockNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusNotifyBlockNew::IsInitialized() const {
  return true;
}

void ConsensusNotifyBlockNew::Swap(ConsensusNotifyBlockNew* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusNotifyBlockNew::InternalSwap(ConsensusNotifyBlockNew* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusNotifyBlockNew::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusNotifyBlockValid::InitAsDefaultInstance() {
}
class ConsensusNotifyBlockValid::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusNotifyBlockValid::kBlockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusNotifyBlockValid::ConsensusNotifyBlockValid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusNotifyBlockValid)
}
ConsensusNotifyBlockValid::ConsensusNotifyBlockValid(const ConsensusNotifyBlockValid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.block_id().size() > 0) {
    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusNotifyBlockValid)
}

void ConsensusNotifyBlockValid::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusNotifyBlockValid_consensus_2eproto.base);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusNotifyBlockValid::~ConsensusNotifyBlockValid() {
  // @@protoc_insertion_point(destructor:ConsensusNotifyBlockValid)
  SharedDtor();
}

void ConsensusNotifyBlockValid::SharedDtor() {
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusNotifyBlockValid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusNotifyBlockValid& ConsensusNotifyBlockValid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusNotifyBlockValid_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusNotifyBlockValid::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusNotifyBlockValid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusNotifyBlockValid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_block_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusNotifyBlockValid::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusNotifyBlockValid)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusNotifyBlockValid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusNotifyBlockValid)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusNotifyBlockValid::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusNotifyBlockValid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->block_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusNotifyBlockValid)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusNotifyBlockValid::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusNotifyBlockValid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->block_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusNotifyBlockValid)
  return target;
}

size_t ConsensusNotifyBlockValid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusNotifyBlockValid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->block_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusNotifyBlockValid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusNotifyBlockValid)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusNotifyBlockValid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusNotifyBlockValid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusNotifyBlockValid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusNotifyBlockValid)
    MergeFrom(*source);
  }
}

void ConsensusNotifyBlockValid::MergeFrom(const ConsensusNotifyBlockValid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusNotifyBlockValid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id().size() > 0) {

    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
}

void ConsensusNotifyBlockValid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusNotifyBlockValid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusNotifyBlockValid::CopyFrom(const ConsensusNotifyBlockValid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusNotifyBlockValid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusNotifyBlockValid::IsInitialized() const {
  return true;
}

void ConsensusNotifyBlockValid::Swap(ConsensusNotifyBlockValid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusNotifyBlockValid::InternalSwap(ConsensusNotifyBlockValid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusNotifyBlockValid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusNotifyBlockInvalid::InitAsDefaultInstance() {
}
class ConsensusNotifyBlockInvalid::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusNotifyBlockInvalid::kBlockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusNotifyBlockInvalid::ConsensusNotifyBlockInvalid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusNotifyBlockInvalid)
}
ConsensusNotifyBlockInvalid::ConsensusNotifyBlockInvalid(const ConsensusNotifyBlockInvalid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.block_id().size() > 0) {
    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusNotifyBlockInvalid)
}

void ConsensusNotifyBlockInvalid::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusNotifyBlockInvalid_consensus_2eproto.base);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusNotifyBlockInvalid::~ConsensusNotifyBlockInvalid() {
  // @@protoc_insertion_point(destructor:ConsensusNotifyBlockInvalid)
  SharedDtor();
}

void ConsensusNotifyBlockInvalid::SharedDtor() {
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusNotifyBlockInvalid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusNotifyBlockInvalid& ConsensusNotifyBlockInvalid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusNotifyBlockInvalid_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusNotifyBlockInvalid::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusNotifyBlockInvalid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusNotifyBlockInvalid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_block_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusNotifyBlockInvalid::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusNotifyBlockInvalid)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusNotifyBlockInvalid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusNotifyBlockInvalid)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusNotifyBlockInvalid::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusNotifyBlockInvalid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->block_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusNotifyBlockInvalid)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusNotifyBlockInvalid::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusNotifyBlockInvalid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->block_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusNotifyBlockInvalid)
  return target;
}

size_t ConsensusNotifyBlockInvalid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusNotifyBlockInvalid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->block_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusNotifyBlockInvalid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusNotifyBlockInvalid)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusNotifyBlockInvalid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusNotifyBlockInvalid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusNotifyBlockInvalid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusNotifyBlockInvalid)
    MergeFrom(*source);
  }
}

void ConsensusNotifyBlockInvalid::MergeFrom(const ConsensusNotifyBlockInvalid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusNotifyBlockInvalid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id().size() > 0) {

    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
}

void ConsensusNotifyBlockInvalid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusNotifyBlockInvalid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusNotifyBlockInvalid::CopyFrom(const ConsensusNotifyBlockInvalid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusNotifyBlockInvalid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusNotifyBlockInvalid::IsInitialized() const {
  return true;
}

void ConsensusNotifyBlockInvalid::Swap(ConsensusNotifyBlockInvalid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusNotifyBlockInvalid::InternalSwap(ConsensusNotifyBlockInvalid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusNotifyBlockInvalid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusNotifyBlockCommit::InitAsDefaultInstance() {
}
class ConsensusNotifyBlockCommit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusNotifyBlockCommit::kBlockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusNotifyBlockCommit::ConsensusNotifyBlockCommit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusNotifyBlockCommit)
}
ConsensusNotifyBlockCommit::ConsensusNotifyBlockCommit(const ConsensusNotifyBlockCommit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.block_id().size() > 0) {
    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusNotifyBlockCommit)
}

void ConsensusNotifyBlockCommit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusNotifyBlockCommit_consensus_2eproto.base);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusNotifyBlockCommit::~ConsensusNotifyBlockCommit() {
  // @@protoc_insertion_point(destructor:ConsensusNotifyBlockCommit)
  SharedDtor();
}

void ConsensusNotifyBlockCommit::SharedDtor() {
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusNotifyBlockCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusNotifyBlockCommit& ConsensusNotifyBlockCommit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusNotifyBlockCommit_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusNotifyBlockCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusNotifyBlockCommit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusNotifyBlockCommit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_block_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusNotifyBlockCommit::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusNotifyBlockCommit)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusNotifyBlockCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusNotifyBlockCommit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusNotifyBlockCommit::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusNotifyBlockCommit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->block_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusNotifyBlockCommit)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusNotifyBlockCommit::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusNotifyBlockCommit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->block_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusNotifyBlockCommit)
  return target;
}

size_t ConsensusNotifyBlockCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusNotifyBlockCommit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->block_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusNotifyBlockCommit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusNotifyBlockCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusNotifyBlockCommit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusNotifyBlockCommit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusNotifyBlockCommit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusNotifyBlockCommit)
    MergeFrom(*source);
  }
}

void ConsensusNotifyBlockCommit::MergeFrom(const ConsensusNotifyBlockCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusNotifyBlockCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id().size() > 0) {

    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
}

void ConsensusNotifyBlockCommit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusNotifyBlockCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusNotifyBlockCommit::CopyFrom(const ConsensusNotifyBlockCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusNotifyBlockCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusNotifyBlockCommit::IsInitialized() const {
  return true;
}

void ConsensusNotifyBlockCommit::Swap(ConsensusNotifyBlockCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusNotifyBlockCommit::InternalSwap(ConsensusNotifyBlockCommit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusNotifyBlockCommit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusNotifyAck::InitAsDefaultInstance() {
}
class ConsensusNotifyAck::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusNotifyAck::ConsensusNotifyAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusNotifyAck)
}
ConsensusNotifyAck::ConsensusNotifyAck(const ConsensusNotifyAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConsensusNotifyAck)
}

void ConsensusNotifyAck::SharedCtor() {
}

ConsensusNotifyAck::~ConsensusNotifyAck() {
  // @@protoc_insertion_point(destructor:ConsensusNotifyAck)
  SharedDtor();
}

void ConsensusNotifyAck::SharedDtor() {
}

void ConsensusNotifyAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusNotifyAck& ConsensusNotifyAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusNotifyAck_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusNotifyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusNotifyAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusNotifyAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusNotifyAck::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusNotifyAck)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusNotifyAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusNotifyAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusNotifyAck::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusNotifyAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusNotifyAck)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusNotifyAck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusNotifyAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusNotifyAck)
  return target;
}

size_t ConsensusNotifyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusNotifyAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusNotifyAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusNotifyAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusNotifyAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusNotifyAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusNotifyAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusNotifyAck)
    MergeFrom(*source);
  }
}

void ConsensusNotifyAck::MergeFrom(const ConsensusNotifyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusNotifyAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ConsensusNotifyAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusNotifyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusNotifyAck::CopyFrom(const ConsensusNotifyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusNotifyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusNotifyAck::IsInitialized() const {
  return true;
}

void ConsensusNotifyAck::Swap(ConsensusNotifyAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusNotifyAck::InternalSwap(ConsensusNotifyAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusNotifyAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusSendToRequest::InitAsDefaultInstance() {
}
class ConsensusSendToRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusSendToRequest::kContentFieldNumber;
const int ConsensusSendToRequest::kMessageTypeFieldNumber;
const int ConsensusSendToRequest::kReceiverIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusSendToRequest::ConsensusSendToRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusSendToRequest)
}
ConsensusSendToRequest::ConsensusSendToRequest(const ConsensusSendToRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.receiver_id().size() > 0) {
    receiver_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_id_);
  }
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.message_type().size() > 0) {
    message_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusSendToRequest)
}

void ConsensusSendToRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusSendToRequest_consensus_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusSendToRequest::~ConsensusSendToRequest() {
  // @@protoc_insertion_point(destructor:ConsensusSendToRequest)
  SharedDtor();
}

void ConsensusSendToRequest::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusSendToRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusSendToRequest& ConsensusSendToRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusSendToRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusSendToRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusSendToRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusSendToRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_content(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // bytes receiver_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_receiver_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // string message_type = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_message_type(), ptr, ctx, "ConsensusSendToRequest.message_type");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusSendToRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusSendToRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes content = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes receiver_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_receiver_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->message_type().data(), static_cast<int>(this->message_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConsensusSendToRequest.message_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusSendToRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusSendToRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusSendToRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusSendToRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // bytes receiver_id = 2;
  if (this->receiver_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->receiver_id(), output);
  }

  // string message_type = 3;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusSendToRequest.message_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusSendToRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusSendToRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusSendToRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // bytes receiver_id = 2;
  if (this->receiver_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->receiver_id(), target);
  }

  // string message_type = 3;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusSendToRequest.message_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->message_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusSendToRequest)
  return target;
}

size_t ConsensusSendToRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusSendToRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // bytes receiver_id = 2;
  if (this->receiver_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->receiver_id());
  }

  // string message_type = 3;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusSendToRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusSendToRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusSendToRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusSendToRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusSendToRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusSendToRequest)
    MergeFrom(*source);
  }
}

void ConsensusSendToRequest::MergeFrom(const ConsensusSendToRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusSendToRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.receiver_id().size() > 0) {

    receiver_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_id_);
  }
  if (from.message_type().size() > 0) {

    message_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
}

void ConsensusSendToRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusSendToRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusSendToRequest::CopyFrom(const ConsensusSendToRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusSendToRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusSendToRequest::IsInitialized() const {
  return true;
}

void ConsensusSendToRequest::Swap(ConsensusSendToRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusSendToRequest::InternalSwap(ConsensusSendToRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  receiver_id_.Swap(&other->receiver_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_type_.Swap(&other->message_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusSendToRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusSendToResponse::InitAsDefaultInstance() {
}
class ConsensusSendToResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusSendToResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusSendToResponse::ConsensusSendToResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusSendToResponse)
}
ConsensusSendToResponse::ConsensusSendToResponse(const ConsensusSendToResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusSendToResponse)
}

void ConsensusSendToResponse::SharedCtor() {
  status_ = 0;
}

ConsensusSendToResponse::~ConsensusSendToResponse() {
  // @@protoc_insertion_point(destructor:ConsensusSendToResponse)
  SharedDtor();
}

void ConsensusSendToResponse::SharedDtor() {
}

void ConsensusSendToResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusSendToResponse& ConsensusSendToResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusSendToResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusSendToResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusSendToResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusSendToResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusSendToResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusSendToResponse_Status>(val));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusSendToResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusSendToResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusSendToResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusSendToResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusSendToResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusSendToResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusSendToResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusSendToResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusSendToResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusSendToResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusSendToResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusSendToResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusSendToResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusSendToResponse)
  return target;
}

size_t ConsensusSendToResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusSendToResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConsensusSendToResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusSendToResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusSendToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusSendToResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusSendToResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusSendToResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusSendToResponse)
    MergeFrom(*source);
  }
}

void ConsensusSendToResponse::MergeFrom(const ConsensusSendToResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusSendToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusSendToResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusSendToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusSendToResponse::CopyFrom(const ConsensusSendToResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusSendToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusSendToResponse::IsInitialized() const {
  return true;
}

void ConsensusSendToResponse::Swap(ConsensusSendToResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusSendToResponse::InternalSwap(ConsensusSendToResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusSendToResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusBroadcastRequest::InitAsDefaultInstance() {
}
class ConsensusBroadcastRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusBroadcastRequest::kContentFieldNumber;
const int ConsensusBroadcastRequest::kMessageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusBroadcastRequest::ConsensusBroadcastRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusBroadcastRequest)
}
ConsensusBroadcastRequest::ConsensusBroadcastRequest(const ConsensusBroadcastRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.message_type().size() > 0) {
    message_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusBroadcastRequest)
}

void ConsensusBroadcastRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusBroadcastRequest_consensus_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusBroadcastRequest::~ConsensusBroadcastRequest() {
  // @@protoc_insertion_point(destructor:ConsensusBroadcastRequest)
  SharedDtor();
}

void ConsensusBroadcastRequest::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusBroadcastRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusBroadcastRequest& ConsensusBroadcastRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusBroadcastRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusBroadcastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusBroadcastRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusBroadcastRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_content(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // string message_type = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_message_type(), ptr, ctx, "ConsensusBroadcastRequest.message_type");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusBroadcastRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusBroadcastRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes content = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->message_type().data(), static_cast<int>(this->message_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConsensusBroadcastRequest.message_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusBroadcastRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusBroadcastRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusBroadcastRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusBroadcastRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // string message_type = 2;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusBroadcastRequest.message_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusBroadcastRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusBroadcastRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusBroadcastRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // string message_type = 2;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusBroadcastRequest.message_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->message_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusBroadcastRequest)
  return target;
}

size_t ConsensusBroadcastRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusBroadcastRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // string message_type = 2;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusBroadcastRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusBroadcastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusBroadcastRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusBroadcastRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusBroadcastRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusBroadcastRequest)
    MergeFrom(*source);
  }
}

void ConsensusBroadcastRequest::MergeFrom(const ConsensusBroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusBroadcastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.message_type().size() > 0) {

    message_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
}

void ConsensusBroadcastRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusBroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusBroadcastRequest::CopyFrom(const ConsensusBroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusBroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusBroadcastRequest::IsInitialized() const {
  return true;
}

void ConsensusBroadcastRequest::Swap(ConsensusBroadcastRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusBroadcastRequest::InternalSwap(ConsensusBroadcastRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_type_.Swap(&other->message_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusBroadcastRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusBroadcastResponse::InitAsDefaultInstance() {
}
class ConsensusBroadcastResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusBroadcastResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusBroadcastResponse::ConsensusBroadcastResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusBroadcastResponse)
}
ConsensusBroadcastResponse::ConsensusBroadcastResponse(const ConsensusBroadcastResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusBroadcastResponse)
}

void ConsensusBroadcastResponse::SharedCtor() {
  status_ = 0;
}

ConsensusBroadcastResponse::~ConsensusBroadcastResponse() {
  // @@protoc_insertion_point(destructor:ConsensusBroadcastResponse)
  SharedDtor();
}

void ConsensusBroadcastResponse::SharedDtor() {
}

void ConsensusBroadcastResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusBroadcastResponse& ConsensusBroadcastResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusBroadcastResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusBroadcastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusBroadcastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusBroadcastResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusBroadcastResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusBroadcastResponse_Status>(val));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusBroadcastResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusBroadcastResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusBroadcastResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusBroadcastResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusBroadcastResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusBroadcastResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusBroadcastResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusBroadcastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusBroadcastResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusBroadcastResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusBroadcastResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusBroadcastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusBroadcastResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusBroadcastResponse)
  return target;
}

size_t ConsensusBroadcastResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusBroadcastResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConsensusBroadcastResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusBroadcastResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusBroadcastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusBroadcastResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusBroadcastResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusBroadcastResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusBroadcastResponse)
    MergeFrom(*source);
  }
}

void ConsensusBroadcastResponse::MergeFrom(const ConsensusBroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusBroadcastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusBroadcastResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusBroadcastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusBroadcastResponse::CopyFrom(const ConsensusBroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusBroadcastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusBroadcastResponse::IsInitialized() const {
  return true;
}

void ConsensusBroadcastResponse::Swap(ConsensusBroadcastResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusBroadcastResponse::InternalSwap(ConsensusBroadcastResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusBroadcastResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusInitializeBlockRequest::InitAsDefaultInstance() {
}
class ConsensusInitializeBlockRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusInitializeBlockRequest::kPreviousIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusInitializeBlockRequest::ConsensusInitializeBlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusInitializeBlockRequest)
}
ConsensusInitializeBlockRequest::ConsensusInitializeBlockRequest(const ConsensusInitializeBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  previous_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.previous_id().size() > 0) {
    previous_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previous_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusInitializeBlockRequest)
}

void ConsensusInitializeBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusInitializeBlockRequest_consensus_2eproto.base);
  previous_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusInitializeBlockRequest::~ConsensusInitializeBlockRequest() {
  // @@protoc_insertion_point(destructor:ConsensusInitializeBlockRequest)
  SharedDtor();
}

void ConsensusInitializeBlockRequest::SharedDtor() {
  previous_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusInitializeBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusInitializeBlockRequest& ConsensusInitializeBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusInitializeBlockRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusInitializeBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusInitializeBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previous_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusInitializeBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes previous_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_previous_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusInitializeBlockRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusInitializeBlockRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes previous_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previous_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusInitializeBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusInitializeBlockRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusInitializeBlockRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusInitializeBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes previous_id = 1;
  if (this->previous_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->previous_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusInitializeBlockRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusInitializeBlockRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusInitializeBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes previous_id = 1;
  if (this->previous_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->previous_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusInitializeBlockRequest)
  return target;
}

size_t ConsensusInitializeBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusInitializeBlockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes previous_id = 1;
  if (this->previous_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->previous_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusInitializeBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusInitializeBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusInitializeBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusInitializeBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusInitializeBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusInitializeBlockRequest)
    MergeFrom(*source);
  }
}

void ConsensusInitializeBlockRequest::MergeFrom(const ConsensusInitializeBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusInitializeBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.previous_id().size() > 0) {

    previous_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previous_id_);
  }
}

void ConsensusInitializeBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusInitializeBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusInitializeBlockRequest::CopyFrom(const ConsensusInitializeBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusInitializeBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusInitializeBlockRequest::IsInitialized() const {
  return true;
}

void ConsensusInitializeBlockRequest::Swap(ConsensusInitializeBlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusInitializeBlockRequest::InternalSwap(ConsensusInitializeBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  previous_id_.Swap(&other->previous_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusInitializeBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusInitializeBlockResponse::InitAsDefaultInstance() {
}
class ConsensusInitializeBlockResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusInitializeBlockResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusInitializeBlockResponse::ConsensusInitializeBlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusInitializeBlockResponse)
}
ConsensusInitializeBlockResponse::ConsensusInitializeBlockResponse(const ConsensusInitializeBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusInitializeBlockResponse)
}

void ConsensusInitializeBlockResponse::SharedCtor() {
  status_ = 0;
}

ConsensusInitializeBlockResponse::~ConsensusInitializeBlockResponse() {
  // @@protoc_insertion_point(destructor:ConsensusInitializeBlockResponse)
  SharedDtor();
}

void ConsensusInitializeBlockResponse::SharedDtor() {
}

void ConsensusInitializeBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusInitializeBlockResponse& ConsensusInitializeBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusInitializeBlockResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusInitializeBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusInitializeBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusInitializeBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusInitializeBlockResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusInitializeBlockResponse_Status>(val));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusInitializeBlockResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusInitializeBlockResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusInitializeBlockResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusInitializeBlockResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusInitializeBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusInitializeBlockResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusInitializeBlockResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusInitializeBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusInitializeBlockResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusInitializeBlockResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusInitializeBlockResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusInitializeBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusInitializeBlockResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusInitializeBlockResponse)
  return target;
}

size_t ConsensusInitializeBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusInitializeBlockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConsensusInitializeBlockResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusInitializeBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusInitializeBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusInitializeBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusInitializeBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusInitializeBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusInitializeBlockResponse)
    MergeFrom(*source);
  }
}

void ConsensusInitializeBlockResponse::MergeFrom(const ConsensusInitializeBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusInitializeBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusInitializeBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusInitializeBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusInitializeBlockResponse::CopyFrom(const ConsensusInitializeBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusInitializeBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusInitializeBlockResponse::IsInitialized() const {
  return true;
}

void ConsensusInitializeBlockResponse::Swap(ConsensusInitializeBlockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusInitializeBlockResponse::InternalSwap(ConsensusInitializeBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusInitializeBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusSummarizeBlockRequest::InitAsDefaultInstance() {
}
class ConsensusSummarizeBlockRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusSummarizeBlockRequest::ConsensusSummarizeBlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusSummarizeBlockRequest)
}
ConsensusSummarizeBlockRequest::ConsensusSummarizeBlockRequest(const ConsensusSummarizeBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConsensusSummarizeBlockRequest)
}

void ConsensusSummarizeBlockRequest::SharedCtor() {
}

ConsensusSummarizeBlockRequest::~ConsensusSummarizeBlockRequest() {
  // @@protoc_insertion_point(destructor:ConsensusSummarizeBlockRequest)
  SharedDtor();
}

void ConsensusSummarizeBlockRequest::SharedDtor() {
}

void ConsensusSummarizeBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusSummarizeBlockRequest& ConsensusSummarizeBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusSummarizeBlockRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusSummarizeBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusSummarizeBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusSummarizeBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusSummarizeBlockRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusSummarizeBlockRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusSummarizeBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusSummarizeBlockRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusSummarizeBlockRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusSummarizeBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusSummarizeBlockRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusSummarizeBlockRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusSummarizeBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusSummarizeBlockRequest)
  return target;
}

size_t ConsensusSummarizeBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusSummarizeBlockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusSummarizeBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusSummarizeBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusSummarizeBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusSummarizeBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusSummarizeBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusSummarizeBlockRequest)
    MergeFrom(*source);
  }
}

void ConsensusSummarizeBlockRequest::MergeFrom(const ConsensusSummarizeBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusSummarizeBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ConsensusSummarizeBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusSummarizeBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusSummarizeBlockRequest::CopyFrom(const ConsensusSummarizeBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusSummarizeBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusSummarizeBlockRequest::IsInitialized() const {
  return true;
}

void ConsensusSummarizeBlockRequest::Swap(ConsensusSummarizeBlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusSummarizeBlockRequest::InternalSwap(ConsensusSummarizeBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusSummarizeBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusSummarizeBlockResponse::InitAsDefaultInstance() {
}
class ConsensusSummarizeBlockResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusSummarizeBlockResponse::kStatusFieldNumber;
const int ConsensusSummarizeBlockResponse::kSummaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusSummarizeBlockResponse::ConsensusSummarizeBlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusSummarizeBlockResponse)
}
ConsensusSummarizeBlockResponse::ConsensusSummarizeBlockResponse(const ConsensusSummarizeBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.summary().size() > 0) {
    summary_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.summary_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusSummarizeBlockResponse)
}

void ConsensusSummarizeBlockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusSummarizeBlockResponse_consensus_2eproto.base);
  summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

ConsensusSummarizeBlockResponse::~ConsensusSummarizeBlockResponse() {
  // @@protoc_insertion_point(destructor:ConsensusSummarizeBlockResponse)
  SharedDtor();
}

void ConsensusSummarizeBlockResponse::SharedDtor() {
  summary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusSummarizeBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusSummarizeBlockResponse& ConsensusSummarizeBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusSummarizeBlockResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusSummarizeBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusSummarizeBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  summary_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusSummarizeBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusSummarizeBlockResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusSummarizeBlockResponse_Status>(val));
        break;
      }
      // bytes summary = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_summary(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusSummarizeBlockResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusSummarizeBlockResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusSummarizeBlockResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusSummarizeBlockResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes summary = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusSummarizeBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusSummarizeBlockResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusSummarizeBlockResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusSummarizeBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusSummarizeBlockResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // bytes summary = 2;
  if (this->summary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->summary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusSummarizeBlockResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusSummarizeBlockResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusSummarizeBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusSummarizeBlockResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // bytes summary = 2;
  if (this->summary().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->summary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusSummarizeBlockResponse)
  return target;
}

size_t ConsensusSummarizeBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusSummarizeBlockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes summary = 2;
  if (this->summary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->summary());
  }

  // .ConsensusSummarizeBlockResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusSummarizeBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusSummarizeBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusSummarizeBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusSummarizeBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusSummarizeBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusSummarizeBlockResponse)
    MergeFrom(*source);
  }
}

void ConsensusSummarizeBlockResponse::MergeFrom(const ConsensusSummarizeBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusSummarizeBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.summary().size() > 0) {

    summary_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.summary_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusSummarizeBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusSummarizeBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusSummarizeBlockResponse::CopyFrom(const ConsensusSummarizeBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusSummarizeBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusSummarizeBlockResponse::IsInitialized() const {
  return true;
}

void ConsensusSummarizeBlockResponse::Swap(ConsensusSummarizeBlockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusSummarizeBlockResponse::InternalSwap(ConsensusSummarizeBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  summary_.Swap(&other->summary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusSummarizeBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusFinalizeBlockRequest::InitAsDefaultInstance() {
}
class ConsensusFinalizeBlockRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusFinalizeBlockRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusFinalizeBlockRequest::ConsensusFinalizeBlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusFinalizeBlockRequest)
}
ConsensusFinalizeBlockRequest::ConsensusFinalizeBlockRequest(const ConsensusFinalizeBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusFinalizeBlockRequest)
}

void ConsensusFinalizeBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusFinalizeBlockRequest_consensus_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusFinalizeBlockRequest::~ConsensusFinalizeBlockRequest() {
  // @@protoc_insertion_point(destructor:ConsensusFinalizeBlockRequest)
  SharedDtor();
}

void ConsensusFinalizeBlockRequest::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusFinalizeBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusFinalizeBlockRequest& ConsensusFinalizeBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusFinalizeBlockRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusFinalizeBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusFinalizeBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusFinalizeBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusFinalizeBlockRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusFinalizeBlockRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusFinalizeBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusFinalizeBlockRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusFinalizeBlockRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusFinalizeBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusFinalizeBlockRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusFinalizeBlockRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusFinalizeBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusFinalizeBlockRequest)
  return target;
}

size_t ConsensusFinalizeBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusFinalizeBlockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusFinalizeBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusFinalizeBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusFinalizeBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusFinalizeBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusFinalizeBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusFinalizeBlockRequest)
    MergeFrom(*source);
  }
}

void ConsensusFinalizeBlockRequest::MergeFrom(const ConsensusFinalizeBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusFinalizeBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ConsensusFinalizeBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusFinalizeBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusFinalizeBlockRequest::CopyFrom(const ConsensusFinalizeBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusFinalizeBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusFinalizeBlockRequest::IsInitialized() const {
  return true;
}

void ConsensusFinalizeBlockRequest::Swap(ConsensusFinalizeBlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusFinalizeBlockRequest::InternalSwap(ConsensusFinalizeBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusFinalizeBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusFinalizeBlockResponse::InitAsDefaultInstance() {
}
class ConsensusFinalizeBlockResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusFinalizeBlockResponse::kStatusFieldNumber;
const int ConsensusFinalizeBlockResponse::kBlockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusFinalizeBlockResponse::ConsensusFinalizeBlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusFinalizeBlockResponse)
}
ConsensusFinalizeBlockResponse::ConsensusFinalizeBlockResponse(const ConsensusFinalizeBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.block_id().size() > 0) {
    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusFinalizeBlockResponse)
}

void ConsensusFinalizeBlockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusFinalizeBlockResponse_consensus_2eproto.base);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

ConsensusFinalizeBlockResponse::~ConsensusFinalizeBlockResponse() {
  // @@protoc_insertion_point(destructor:ConsensusFinalizeBlockResponse)
  SharedDtor();
}

void ConsensusFinalizeBlockResponse::SharedDtor() {
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusFinalizeBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusFinalizeBlockResponse& ConsensusFinalizeBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusFinalizeBlockResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusFinalizeBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusFinalizeBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusFinalizeBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusFinalizeBlockResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusFinalizeBlockResponse_Status>(val));
        break;
      }
      // bytes block_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_block_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusFinalizeBlockResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusFinalizeBlockResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusFinalizeBlockResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusFinalizeBlockResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes block_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusFinalizeBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusFinalizeBlockResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusFinalizeBlockResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusFinalizeBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusFinalizeBlockResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // bytes block_id = 2;
  if (this->block_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->block_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusFinalizeBlockResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusFinalizeBlockResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusFinalizeBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusFinalizeBlockResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // bytes block_id = 2;
  if (this->block_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->block_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusFinalizeBlockResponse)
  return target;
}

size_t ConsensusFinalizeBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusFinalizeBlockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 2;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->block_id());
  }

  // .ConsensusFinalizeBlockResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusFinalizeBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusFinalizeBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusFinalizeBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusFinalizeBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusFinalizeBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusFinalizeBlockResponse)
    MergeFrom(*source);
  }
}

void ConsensusFinalizeBlockResponse::MergeFrom(const ConsensusFinalizeBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusFinalizeBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id().size() > 0) {

    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusFinalizeBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusFinalizeBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusFinalizeBlockResponse::CopyFrom(const ConsensusFinalizeBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusFinalizeBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusFinalizeBlockResponse::IsInitialized() const {
  return true;
}

void ConsensusFinalizeBlockResponse::Swap(ConsensusFinalizeBlockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusFinalizeBlockResponse::InternalSwap(ConsensusFinalizeBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusFinalizeBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusCancelBlockRequest::InitAsDefaultInstance() {
}
class ConsensusCancelBlockRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusCancelBlockRequest::ConsensusCancelBlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusCancelBlockRequest)
}
ConsensusCancelBlockRequest::ConsensusCancelBlockRequest(const ConsensusCancelBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConsensusCancelBlockRequest)
}

void ConsensusCancelBlockRequest::SharedCtor() {
}

ConsensusCancelBlockRequest::~ConsensusCancelBlockRequest() {
  // @@protoc_insertion_point(destructor:ConsensusCancelBlockRequest)
  SharedDtor();
}

void ConsensusCancelBlockRequest::SharedDtor() {
}

void ConsensusCancelBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusCancelBlockRequest& ConsensusCancelBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusCancelBlockRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusCancelBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusCancelBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusCancelBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusCancelBlockRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusCancelBlockRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusCancelBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusCancelBlockRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusCancelBlockRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusCancelBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusCancelBlockRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusCancelBlockRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusCancelBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusCancelBlockRequest)
  return target;
}

size_t ConsensusCancelBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusCancelBlockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusCancelBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusCancelBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusCancelBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusCancelBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusCancelBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusCancelBlockRequest)
    MergeFrom(*source);
  }
}

void ConsensusCancelBlockRequest::MergeFrom(const ConsensusCancelBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusCancelBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ConsensusCancelBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusCancelBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusCancelBlockRequest::CopyFrom(const ConsensusCancelBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusCancelBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusCancelBlockRequest::IsInitialized() const {
  return true;
}

void ConsensusCancelBlockRequest::Swap(ConsensusCancelBlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusCancelBlockRequest::InternalSwap(ConsensusCancelBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusCancelBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusCancelBlockResponse::InitAsDefaultInstance() {
}
class ConsensusCancelBlockResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusCancelBlockResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusCancelBlockResponse::ConsensusCancelBlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusCancelBlockResponse)
}
ConsensusCancelBlockResponse::ConsensusCancelBlockResponse(const ConsensusCancelBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusCancelBlockResponse)
}

void ConsensusCancelBlockResponse::SharedCtor() {
  status_ = 0;
}

ConsensusCancelBlockResponse::~ConsensusCancelBlockResponse() {
  // @@protoc_insertion_point(destructor:ConsensusCancelBlockResponse)
  SharedDtor();
}

void ConsensusCancelBlockResponse::SharedDtor() {
}

void ConsensusCancelBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusCancelBlockResponse& ConsensusCancelBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusCancelBlockResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusCancelBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusCancelBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusCancelBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusCancelBlockResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusCancelBlockResponse_Status>(val));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusCancelBlockResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusCancelBlockResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusCancelBlockResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusCancelBlockResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusCancelBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusCancelBlockResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusCancelBlockResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusCancelBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusCancelBlockResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusCancelBlockResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusCancelBlockResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusCancelBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusCancelBlockResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusCancelBlockResponse)
  return target;
}

size_t ConsensusCancelBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusCancelBlockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConsensusCancelBlockResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusCancelBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusCancelBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusCancelBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusCancelBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusCancelBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusCancelBlockResponse)
    MergeFrom(*source);
  }
}

void ConsensusCancelBlockResponse::MergeFrom(const ConsensusCancelBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusCancelBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusCancelBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusCancelBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusCancelBlockResponse::CopyFrom(const ConsensusCancelBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusCancelBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusCancelBlockResponse::IsInitialized() const {
  return true;
}

void ConsensusCancelBlockResponse::Swap(ConsensusCancelBlockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusCancelBlockResponse::InternalSwap(ConsensusCancelBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusCancelBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusCheckBlocksRequest::InitAsDefaultInstance() {
}
class ConsensusCheckBlocksRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusCheckBlocksRequest::kBlockIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusCheckBlocksRequest::ConsensusCheckBlocksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusCheckBlocksRequest)
}
ConsensusCheckBlocksRequest::ConsensusCheckBlocksRequest(const ConsensusCheckBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      block_ids_(from.block_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConsensusCheckBlocksRequest)
}

void ConsensusCheckBlocksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusCheckBlocksRequest_consensus_2eproto.base);
}

ConsensusCheckBlocksRequest::~ConsensusCheckBlocksRequest() {
  // @@protoc_insertion_point(destructor:ConsensusCheckBlocksRequest)
  SharedDtor();
}

void ConsensusCheckBlocksRequest::SharedDtor() {
}

void ConsensusCheckBlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusCheckBlocksRequest& ConsensusCheckBlocksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusCheckBlocksRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusCheckBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusCheckBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_ids_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusCheckBlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes block_ids = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        while (true) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_block_ids(), ptr, ctx);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 10) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusCheckBlocksRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusCheckBlocksRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes block_ids = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_block_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusCheckBlocksRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusCheckBlocksRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusCheckBlocksRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusCheckBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes block_ids = 1;
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->block_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusCheckBlocksRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusCheckBlocksRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusCheckBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes block_ids = 1;
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->block_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusCheckBlocksRequest)
  return target;
}

size_t ConsensusCheckBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusCheckBlocksRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes block_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->block_ids_size());
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->block_ids(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusCheckBlocksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusCheckBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusCheckBlocksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusCheckBlocksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusCheckBlocksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusCheckBlocksRequest)
    MergeFrom(*source);
  }
}

void ConsensusCheckBlocksRequest::MergeFrom(const ConsensusCheckBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusCheckBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_ids_.MergeFrom(from.block_ids_);
}

void ConsensusCheckBlocksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusCheckBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusCheckBlocksRequest::CopyFrom(const ConsensusCheckBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusCheckBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusCheckBlocksRequest::IsInitialized() const {
  return true;
}

void ConsensusCheckBlocksRequest::Swap(ConsensusCheckBlocksRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusCheckBlocksRequest::InternalSwap(ConsensusCheckBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_ids_.InternalSwap(CastToBase(&other->block_ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusCheckBlocksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusCheckBlocksResponse::InitAsDefaultInstance() {
}
class ConsensusCheckBlocksResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusCheckBlocksResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusCheckBlocksResponse::ConsensusCheckBlocksResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusCheckBlocksResponse)
}
ConsensusCheckBlocksResponse::ConsensusCheckBlocksResponse(const ConsensusCheckBlocksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusCheckBlocksResponse)
}

void ConsensusCheckBlocksResponse::SharedCtor() {
  status_ = 0;
}

ConsensusCheckBlocksResponse::~ConsensusCheckBlocksResponse() {
  // @@protoc_insertion_point(destructor:ConsensusCheckBlocksResponse)
  SharedDtor();
}

void ConsensusCheckBlocksResponse::SharedDtor() {
}

void ConsensusCheckBlocksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusCheckBlocksResponse& ConsensusCheckBlocksResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusCheckBlocksResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusCheckBlocksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusCheckBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusCheckBlocksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusCheckBlocksResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusCheckBlocksResponse_Status>(val));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusCheckBlocksResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusCheckBlocksResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusCheckBlocksResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusCheckBlocksResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusCheckBlocksResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusCheckBlocksResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusCheckBlocksResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusCheckBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusCheckBlocksResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusCheckBlocksResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusCheckBlocksResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusCheckBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusCheckBlocksResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusCheckBlocksResponse)
  return target;
}

size_t ConsensusCheckBlocksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusCheckBlocksResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConsensusCheckBlocksResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusCheckBlocksResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusCheckBlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusCheckBlocksResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusCheckBlocksResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusCheckBlocksResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusCheckBlocksResponse)
    MergeFrom(*source);
  }
}

void ConsensusCheckBlocksResponse::MergeFrom(const ConsensusCheckBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusCheckBlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusCheckBlocksResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusCheckBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusCheckBlocksResponse::CopyFrom(const ConsensusCheckBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusCheckBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusCheckBlocksResponse::IsInitialized() const {
  return true;
}

void ConsensusCheckBlocksResponse::Swap(ConsensusCheckBlocksResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusCheckBlocksResponse::InternalSwap(ConsensusCheckBlocksResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusCheckBlocksResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusCommitBlockRequest::InitAsDefaultInstance() {
}
class ConsensusCommitBlockRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusCommitBlockRequest::kBlockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusCommitBlockRequest::ConsensusCommitBlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusCommitBlockRequest)
}
ConsensusCommitBlockRequest::ConsensusCommitBlockRequest(const ConsensusCommitBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.block_id().size() > 0) {
    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusCommitBlockRequest)
}

void ConsensusCommitBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusCommitBlockRequest_consensus_2eproto.base);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusCommitBlockRequest::~ConsensusCommitBlockRequest() {
  // @@protoc_insertion_point(destructor:ConsensusCommitBlockRequest)
  SharedDtor();
}

void ConsensusCommitBlockRequest::SharedDtor() {
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusCommitBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusCommitBlockRequest& ConsensusCommitBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusCommitBlockRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusCommitBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusCommitBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusCommitBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_block_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusCommitBlockRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusCommitBlockRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusCommitBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusCommitBlockRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusCommitBlockRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusCommitBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->block_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusCommitBlockRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusCommitBlockRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusCommitBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->block_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusCommitBlockRequest)
  return target;
}

size_t ConsensusCommitBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusCommitBlockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->block_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusCommitBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusCommitBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusCommitBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusCommitBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusCommitBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusCommitBlockRequest)
    MergeFrom(*source);
  }
}

void ConsensusCommitBlockRequest::MergeFrom(const ConsensusCommitBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusCommitBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id().size() > 0) {

    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
}

void ConsensusCommitBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusCommitBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusCommitBlockRequest::CopyFrom(const ConsensusCommitBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusCommitBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusCommitBlockRequest::IsInitialized() const {
  return true;
}

void ConsensusCommitBlockRequest::Swap(ConsensusCommitBlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusCommitBlockRequest::InternalSwap(ConsensusCommitBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusCommitBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusCommitBlockResponse::InitAsDefaultInstance() {
}
class ConsensusCommitBlockResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusCommitBlockResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusCommitBlockResponse::ConsensusCommitBlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusCommitBlockResponse)
}
ConsensusCommitBlockResponse::ConsensusCommitBlockResponse(const ConsensusCommitBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusCommitBlockResponse)
}

void ConsensusCommitBlockResponse::SharedCtor() {
  status_ = 0;
}

ConsensusCommitBlockResponse::~ConsensusCommitBlockResponse() {
  // @@protoc_insertion_point(destructor:ConsensusCommitBlockResponse)
  SharedDtor();
}

void ConsensusCommitBlockResponse::SharedDtor() {
}

void ConsensusCommitBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusCommitBlockResponse& ConsensusCommitBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusCommitBlockResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusCommitBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusCommitBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusCommitBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusCommitBlockResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusCommitBlockResponse_Status>(val));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusCommitBlockResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusCommitBlockResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusCommitBlockResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusCommitBlockResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusCommitBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusCommitBlockResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusCommitBlockResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusCommitBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusCommitBlockResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusCommitBlockResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusCommitBlockResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusCommitBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusCommitBlockResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusCommitBlockResponse)
  return target;
}

size_t ConsensusCommitBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusCommitBlockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConsensusCommitBlockResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusCommitBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusCommitBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusCommitBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusCommitBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusCommitBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusCommitBlockResponse)
    MergeFrom(*source);
  }
}

void ConsensusCommitBlockResponse::MergeFrom(const ConsensusCommitBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusCommitBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusCommitBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusCommitBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusCommitBlockResponse::CopyFrom(const ConsensusCommitBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusCommitBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusCommitBlockResponse::IsInitialized() const {
  return true;
}

void ConsensusCommitBlockResponse::Swap(ConsensusCommitBlockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusCommitBlockResponse::InternalSwap(ConsensusCommitBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusCommitBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusIgnoreBlockRequest::InitAsDefaultInstance() {
}
class ConsensusIgnoreBlockRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusIgnoreBlockRequest::kBlockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusIgnoreBlockRequest::ConsensusIgnoreBlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusIgnoreBlockRequest)
}
ConsensusIgnoreBlockRequest::ConsensusIgnoreBlockRequest(const ConsensusIgnoreBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.block_id().size() > 0) {
    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusIgnoreBlockRequest)
}

void ConsensusIgnoreBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusIgnoreBlockRequest_consensus_2eproto.base);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusIgnoreBlockRequest::~ConsensusIgnoreBlockRequest() {
  // @@protoc_insertion_point(destructor:ConsensusIgnoreBlockRequest)
  SharedDtor();
}

void ConsensusIgnoreBlockRequest::SharedDtor() {
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusIgnoreBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusIgnoreBlockRequest& ConsensusIgnoreBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusIgnoreBlockRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusIgnoreBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusIgnoreBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusIgnoreBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_block_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusIgnoreBlockRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusIgnoreBlockRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusIgnoreBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusIgnoreBlockRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusIgnoreBlockRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusIgnoreBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->block_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusIgnoreBlockRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusIgnoreBlockRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusIgnoreBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->block_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusIgnoreBlockRequest)
  return target;
}

size_t ConsensusIgnoreBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusIgnoreBlockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->block_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusIgnoreBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusIgnoreBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusIgnoreBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusIgnoreBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusIgnoreBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusIgnoreBlockRequest)
    MergeFrom(*source);
  }
}

void ConsensusIgnoreBlockRequest::MergeFrom(const ConsensusIgnoreBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusIgnoreBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id().size() > 0) {

    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
}

void ConsensusIgnoreBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusIgnoreBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusIgnoreBlockRequest::CopyFrom(const ConsensusIgnoreBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusIgnoreBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusIgnoreBlockRequest::IsInitialized() const {
  return true;
}

void ConsensusIgnoreBlockRequest::Swap(ConsensusIgnoreBlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusIgnoreBlockRequest::InternalSwap(ConsensusIgnoreBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusIgnoreBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusIgnoreBlockResponse::InitAsDefaultInstance() {
}
class ConsensusIgnoreBlockResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusIgnoreBlockResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusIgnoreBlockResponse::ConsensusIgnoreBlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusIgnoreBlockResponse)
}
ConsensusIgnoreBlockResponse::ConsensusIgnoreBlockResponse(const ConsensusIgnoreBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusIgnoreBlockResponse)
}

void ConsensusIgnoreBlockResponse::SharedCtor() {
  status_ = 0;
}

ConsensusIgnoreBlockResponse::~ConsensusIgnoreBlockResponse() {
  // @@protoc_insertion_point(destructor:ConsensusIgnoreBlockResponse)
  SharedDtor();
}

void ConsensusIgnoreBlockResponse::SharedDtor() {
}

void ConsensusIgnoreBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusIgnoreBlockResponse& ConsensusIgnoreBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusIgnoreBlockResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusIgnoreBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusIgnoreBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusIgnoreBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusIgnoreBlockResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusIgnoreBlockResponse_Status>(val));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusIgnoreBlockResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusIgnoreBlockResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusIgnoreBlockResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusIgnoreBlockResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusIgnoreBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusIgnoreBlockResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusIgnoreBlockResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusIgnoreBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusIgnoreBlockResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusIgnoreBlockResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusIgnoreBlockResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusIgnoreBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusIgnoreBlockResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusIgnoreBlockResponse)
  return target;
}

size_t ConsensusIgnoreBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusIgnoreBlockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConsensusIgnoreBlockResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusIgnoreBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusIgnoreBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusIgnoreBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusIgnoreBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusIgnoreBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusIgnoreBlockResponse)
    MergeFrom(*source);
  }
}

void ConsensusIgnoreBlockResponse::MergeFrom(const ConsensusIgnoreBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusIgnoreBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusIgnoreBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusIgnoreBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusIgnoreBlockResponse::CopyFrom(const ConsensusIgnoreBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusIgnoreBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusIgnoreBlockResponse::IsInitialized() const {
  return true;
}

void ConsensusIgnoreBlockResponse::Swap(ConsensusIgnoreBlockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusIgnoreBlockResponse::InternalSwap(ConsensusIgnoreBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusIgnoreBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusFailBlockRequest::InitAsDefaultInstance() {
}
class ConsensusFailBlockRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusFailBlockRequest::kBlockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusFailBlockRequest::ConsensusFailBlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusFailBlockRequest)
}
ConsensusFailBlockRequest::ConsensusFailBlockRequest(const ConsensusFailBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.block_id().size() > 0) {
    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusFailBlockRequest)
}

void ConsensusFailBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusFailBlockRequest_consensus_2eproto.base);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusFailBlockRequest::~ConsensusFailBlockRequest() {
  // @@protoc_insertion_point(destructor:ConsensusFailBlockRequest)
  SharedDtor();
}

void ConsensusFailBlockRequest::SharedDtor() {
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusFailBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusFailBlockRequest& ConsensusFailBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusFailBlockRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusFailBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusFailBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusFailBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_block_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusFailBlockRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusFailBlockRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusFailBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusFailBlockRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusFailBlockRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusFailBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->block_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusFailBlockRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusFailBlockRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusFailBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->block_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusFailBlockRequest)
  return target;
}

size_t ConsensusFailBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusFailBlockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->block_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusFailBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusFailBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusFailBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusFailBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusFailBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusFailBlockRequest)
    MergeFrom(*source);
  }
}

void ConsensusFailBlockRequest::MergeFrom(const ConsensusFailBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusFailBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id().size() > 0) {

    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
}

void ConsensusFailBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusFailBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusFailBlockRequest::CopyFrom(const ConsensusFailBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusFailBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusFailBlockRequest::IsInitialized() const {
  return true;
}

void ConsensusFailBlockRequest::Swap(ConsensusFailBlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusFailBlockRequest::InternalSwap(ConsensusFailBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusFailBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusFailBlockResponse::InitAsDefaultInstance() {
}
class ConsensusFailBlockResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusFailBlockResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusFailBlockResponse::ConsensusFailBlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusFailBlockResponse)
}
ConsensusFailBlockResponse::ConsensusFailBlockResponse(const ConsensusFailBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusFailBlockResponse)
}

void ConsensusFailBlockResponse::SharedCtor() {
  status_ = 0;
}

ConsensusFailBlockResponse::~ConsensusFailBlockResponse() {
  // @@protoc_insertion_point(destructor:ConsensusFailBlockResponse)
  SharedDtor();
}

void ConsensusFailBlockResponse::SharedDtor() {
}

void ConsensusFailBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusFailBlockResponse& ConsensusFailBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusFailBlockResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusFailBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusFailBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusFailBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusFailBlockResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusFailBlockResponse_Status>(val));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusFailBlockResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusFailBlockResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusFailBlockResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusFailBlockResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusFailBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusFailBlockResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusFailBlockResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusFailBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusFailBlockResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusFailBlockResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusFailBlockResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusFailBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusFailBlockResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusFailBlockResponse)
  return target;
}

size_t ConsensusFailBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusFailBlockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConsensusFailBlockResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusFailBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusFailBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusFailBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusFailBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusFailBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusFailBlockResponse)
    MergeFrom(*source);
  }
}

void ConsensusFailBlockResponse::MergeFrom(const ConsensusFailBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusFailBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusFailBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusFailBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusFailBlockResponse::CopyFrom(const ConsensusFailBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusFailBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusFailBlockResponse::IsInitialized() const {
  return true;
}

void ConsensusFailBlockResponse::Swap(ConsensusFailBlockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusFailBlockResponse::InternalSwap(ConsensusFailBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusFailBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusBlocksGetRequest::InitAsDefaultInstance() {
}
class ConsensusBlocksGetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusBlocksGetRequest::kBlockIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusBlocksGetRequest::ConsensusBlocksGetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusBlocksGetRequest)
}
ConsensusBlocksGetRequest::ConsensusBlocksGetRequest(const ConsensusBlocksGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      block_ids_(from.block_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConsensusBlocksGetRequest)
}

void ConsensusBlocksGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusBlocksGetRequest_consensus_2eproto.base);
}

ConsensusBlocksGetRequest::~ConsensusBlocksGetRequest() {
  // @@protoc_insertion_point(destructor:ConsensusBlocksGetRequest)
  SharedDtor();
}

void ConsensusBlocksGetRequest::SharedDtor() {
}

void ConsensusBlocksGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusBlocksGetRequest& ConsensusBlocksGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusBlocksGetRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusBlocksGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusBlocksGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_ids_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusBlocksGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes block_ids = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        while (true) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_block_ids(), ptr, ctx);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 10) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusBlocksGetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusBlocksGetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes block_ids = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_block_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusBlocksGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusBlocksGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusBlocksGetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusBlocksGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes block_ids = 1;
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->block_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusBlocksGetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusBlocksGetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusBlocksGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes block_ids = 1;
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->block_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusBlocksGetRequest)
  return target;
}

size_t ConsensusBlocksGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusBlocksGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes block_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->block_ids_size());
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->block_ids(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusBlocksGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusBlocksGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusBlocksGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusBlocksGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusBlocksGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusBlocksGetRequest)
    MergeFrom(*source);
  }
}

void ConsensusBlocksGetRequest::MergeFrom(const ConsensusBlocksGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusBlocksGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_ids_.MergeFrom(from.block_ids_);
}

void ConsensusBlocksGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusBlocksGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusBlocksGetRequest::CopyFrom(const ConsensusBlocksGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusBlocksGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusBlocksGetRequest::IsInitialized() const {
  return true;
}

void ConsensusBlocksGetRequest::Swap(ConsensusBlocksGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusBlocksGetRequest::InternalSwap(ConsensusBlocksGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_ids_.InternalSwap(CastToBase(&other->block_ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusBlocksGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusBlocksGetResponse::InitAsDefaultInstance() {
}
class ConsensusBlocksGetResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusBlocksGetResponse::kStatusFieldNumber;
const int ConsensusBlocksGetResponse::kBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusBlocksGetResponse::ConsensusBlocksGetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusBlocksGetResponse)
}
ConsensusBlocksGetResponse::ConsensusBlocksGetResponse(const ConsensusBlocksGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusBlocksGetResponse)
}

void ConsensusBlocksGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusBlocksGetResponse_consensus_2eproto.base);
  status_ = 0;
}

ConsensusBlocksGetResponse::~ConsensusBlocksGetResponse() {
  // @@protoc_insertion_point(destructor:ConsensusBlocksGetResponse)
  SharedDtor();
}

void ConsensusBlocksGetResponse::SharedDtor() {
}

void ConsensusBlocksGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusBlocksGetResponse& ConsensusBlocksGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusBlocksGetResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusBlocksGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusBlocksGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusBlocksGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusBlocksGetResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusBlocksGetResponse_Status>(val));
        break;
      }
      // repeated .ConsensusBlock blocks = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_blocks(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusBlocksGetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusBlocksGetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusBlocksGetResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusBlocksGetResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ConsensusBlock blocks = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusBlocksGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusBlocksGetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusBlocksGetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusBlocksGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusBlocksGetResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .ConsensusBlock blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->blocks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusBlocksGetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusBlocksGetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusBlocksGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusBlocksGetResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .ConsensusBlock blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->blocks(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusBlocksGetResponse)
  return target;
}

size_t ConsensusBlocksGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusBlocksGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConsensusBlock blocks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->blocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->blocks(static_cast<int>(i)));
    }
  }

  // .ConsensusBlocksGetResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusBlocksGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusBlocksGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusBlocksGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusBlocksGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusBlocksGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusBlocksGetResponse)
    MergeFrom(*source);
  }
}

void ConsensusBlocksGetResponse::MergeFrom(const ConsensusBlocksGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusBlocksGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusBlocksGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusBlocksGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusBlocksGetResponse::CopyFrom(const ConsensusBlocksGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusBlocksGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusBlocksGetResponse::IsInitialized() const {
  return true;
}

void ConsensusBlocksGetResponse::Swap(ConsensusBlocksGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusBlocksGetResponse::InternalSwap(ConsensusBlocksGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&blocks_)->InternalSwap(CastToBase(&other->blocks_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusBlocksGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusChainHeadGetRequest::InitAsDefaultInstance() {
}
class ConsensusChainHeadGetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusChainHeadGetRequest::ConsensusChainHeadGetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusChainHeadGetRequest)
}
ConsensusChainHeadGetRequest::ConsensusChainHeadGetRequest(const ConsensusChainHeadGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConsensusChainHeadGetRequest)
}

void ConsensusChainHeadGetRequest::SharedCtor() {
}

ConsensusChainHeadGetRequest::~ConsensusChainHeadGetRequest() {
  // @@protoc_insertion_point(destructor:ConsensusChainHeadGetRequest)
  SharedDtor();
}

void ConsensusChainHeadGetRequest::SharedDtor() {
}

void ConsensusChainHeadGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusChainHeadGetRequest& ConsensusChainHeadGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusChainHeadGetRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusChainHeadGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusChainHeadGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusChainHeadGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusChainHeadGetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusChainHeadGetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusChainHeadGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusChainHeadGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusChainHeadGetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusChainHeadGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusChainHeadGetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusChainHeadGetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusChainHeadGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusChainHeadGetRequest)
  return target;
}

size_t ConsensusChainHeadGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusChainHeadGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusChainHeadGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusChainHeadGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusChainHeadGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusChainHeadGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusChainHeadGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusChainHeadGetRequest)
    MergeFrom(*source);
  }
}

void ConsensusChainHeadGetRequest::MergeFrom(const ConsensusChainHeadGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusChainHeadGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ConsensusChainHeadGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusChainHeadGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusChainHeadGetRequest::CopyFrom(const ConsensusChainHeadGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusChainHeadGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusChainHeadGetRequest::IsInitialized() const {
  return true;
}

void ConsensusChainHeadGetRequest::Swap(ConsensusChainHeadGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusChainHeadGetRequest::InternalSwap(ConsensusChainHeadGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusChainHeadGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusChainHeadGetResponse::InitAsDefaultInstance() {
  ::_ConsensusChainHeadGetResponse_default_instance_._instance.get_mutable()->block_ = const_cast< ::ConsensusBlock*>(
      ::ConsensusBlock::internal_default_instance());
}
class ConsensusChainHeadGetResponse::HasBitSetters {
 public:
  static const ::ConsensusBlock& block(const ConsensusChainHeadGetResponse* msg);
};

const ::ConsensusBlock&
ConsensusChainHeadGetResponse::HasBitSetters::block(const ConsensusChainHeadGetResponse* msg) {
  return *msg->block_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusChainHeadGetResponse::kStatusFieldNumber;
const int ConsensusChainHeadGetResponse::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusChainHeadGetResponse::ConsensusChainHeadGetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusChainHeadGetResponse)
}
ConsensusChainHeadGetResponse::ConsensusChainHeadGetResponse(const ConsensusChainHeadGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block()) {
    block_ = new ::ConsensusBlock(*from.block_);
  } else {
    block_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusChainHeadGetResponse)
}

void ConsensusChainHeadGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusChainHeadGetResponse_consensus_2eproto.base);
  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&block_)) + sizeof(status_));
}

ConsensusChainHeadGetResponse::~ConsensusChainHeadGetResponse() {
  // @@protoc_insertion_point(destructor:ConsensusChainHeadGetResponse)
  SharedDtor();
}

void ConsensusChainHeadGetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void ConsensusChainHeadGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusChainHeadGetResponse& ConsensusChainHeadGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusChainHeadGetResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusChainHeadGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusChainHeadGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusChainHeadGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusChainHeadGetResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusChainHeadGetResponse_Status>(val));
        break;
      }
      // .ConsensusBlock block = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_block(), ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusChainHeadGetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusChainHeadGetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusChainHeadGetResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusChainHeadGetResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ConsensusBlock block = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusChainHeadGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusChainHeadGetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusChainHeadGetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusChainHeadGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusChainHeadGetResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // .ConsensusBlock block = 2;
  if (this->has_block()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::block(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusChainHeadGetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusChainHeadGetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusChainHeadGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusChainHeadGetResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // .ConsensusBlock block = 2;
  if (this->has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::block(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusChainHeadGetResponse)
  return target;
}

size_t ConsensusChainHeadGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusChainHeadGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConsensusBlock block = 2;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .ConsensusChainHeadGetResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusChainHeadGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusChainHeadGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusChainHeadGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusChainHeadGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusChainHeadGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusChainHeadGetResponse)
    MergeFrom(*source);
  }
}

void ConsensusChainHeadGetResponse::MergeFrom(const ConsensusChainHeadGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusChainHeadGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    mutable_block()->::ConsensusBlock::MergeFrom(from.block());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusChainHeadGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusChainHeadGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusChainHeadGetResponse::CopyFrom(const ConsensusChainHeadGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusChainHeadGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusChainHeadGetResponse::IsInitialized() const {
  return true;
}

void ConsensusChainHeadGetResponse::Swap(ConsensusChainHeadGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusChainHeadGetResponse::InternalSwap(ConsensusChainHeadGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(block_, other->block_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusChainHeadGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusSettingsGetRequest::InitAsDefaultInstance() {
}
class ConsensusSettingsGetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusSettingsGetRequest::kBlockIdFieldNumber;
const int ConsensusSettingsGetRequest::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusSettingsGetRequest::ConsensusSettingsGetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusSettingsGetRequest)
}
ConsensusSettingsGetRequest::ConsensusSettingsGetRequest(const ConsensusSettingsGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.block_id().size() > 0) {
    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusSettingsGetRequest)
}

void ConsensusSettingsGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusSettingsGetRequest_consensus_2eproto.base);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusSettingsGetRequest::~ConsensusSettingsGetRequest() {
  // @@protoc_insertion_point(destructor:ConsensusSettingsGetRequest)
  SharedDtor();
}

void ConsensusSettingsGetRequest::SharedDtor() {
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusSettingsGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusSettingsGetRequest& ConsensusSettingsGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusSettingsGetRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusSettingsGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusSettingsGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusSettingsGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_block_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // repeated string keys = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_keys(), ptr, ctx, "ConsensusSettingsGetRequest.keys");
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusSettingsGetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusSettingsGetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string keys = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConsensusSettingsGetRequest.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusSettingsGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusSettingsGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusSettingsGetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusSettingsGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->block_id(), output);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusSettingsGetRequest.keys");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusSettingsGetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusSettingsGetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusSettingsGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->block_id(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusSettingsGetRequest.keys");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusSettingsGetRequest)
  return target;
}

size_t ConsensusSettingsGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusSettingsGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->block_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusSettingsGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusSettingsGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusSettingsGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusSettingsGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusSettingsGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusSettingsGetRequest)
    MergeFrom(*source);
  }
}

void ConsensusSettingsGetRequest::MergeFrom(const ConsensusSettingsGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusSettingsGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.block_id().size() > 0) {

    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
}

void ConsensusSettingsGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusSettingsGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusSettingsGetRequest::CopyFrom(const ConsensusSettingsGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusSettingsGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusSettingsGetRequest::IsInitialized() const {
  return true;
}

void ConsensusSettingsGetRequest::Swap(ConsensusSettingsGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusSettingsGetRequest::InternalSwap(ConsensusSettingsGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(CastToBase(&other->keys_));
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusSettingsGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusSettingsGetResponse::InitAsDefaultInstance() {
}
class ConsensusSettingsGetResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusSettingsGetResponse::kStatusFieldNumber;
const int ConsensusSettingsGetResponse::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusSettingsGetResponse::ConsensusSettingsGetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusSettingsGetResponse)
}
ConsensusSettingsGetResponse::ConsensusSettingsGetResponse(const ConsensusSettingsGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusSettingsGetResponse)
}

void ConsensusSettingsGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusSettingsGetResponse_consensus_2eproto.base);
  status_ = 0;
}

ConsensusSettingsGetResponse::~ConsensusSettingsGetResponse() {
  // @@protoc_insertion_point(destructor:ConsensusSettingsGetResponse)
  SharedDtor();
}

void ConsensusSettingsGetResponse::SharedDtor() {
}

void ConsensusSettingsGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusSettingsGetResponse& ConsensusSettingsGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusSettingsGetResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusSettingsGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusSettingsGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusSettingsGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusSettingsGetResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusSettingsGetResponse_Status>(val));
        break;
      }
      // repeated .ConsensusSettingsEntry entries = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_entries(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusSettingsGetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusSettingsGetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusSettingsGetResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusSettingsGetResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ConsensusSettingsEntry entries = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusSettingsGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusSettingsGetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusSettingsGetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusSettingsGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusSettingsGetResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .ConsensusSettingsEntry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusSettingsGetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusSettingsGetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusSettingsGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusSettingsGetResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .ConsensusSettingsEntry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusSettingsGetResponse)
  return target;
}

size_t ConsensusSettingsGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusSettingsGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConsensusSettingsEntry entries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // .ConsensusSettingsGetResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusSettingsGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusSettingsGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusSettingsGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusSettingsGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusSettingsGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusSettingsGetResponse)
    MergeFrom(*source);
  }
}

void ConsensusSettingsGetResponse::MergeFrom(const ConsensusSettingsGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusSettingsGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusSettingsGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusSettingsGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusSettingsGetResponse::CopyFrom(const ConsensusSettingsGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusSettingsGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusSettingsGetResponse::IsInitialized() const {
  return true;
}

void ConsensusSettingsGetResponse::Swap(ConsensusSettingsGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusSettingsGetResponse::InternalSwap(ConsensusSettingsGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusSettingsGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusStateGetRequest::InitAsDefaultInstance() {
}
class ConsensusStateGetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusStateGetRequest::kBlockIdFieldNumber;
const int ConsensusStateGetRequest::kAddressesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusStateGetRequest::ConsensusStateGetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusStateGetRequest)
}
ConsensusStateGetRequest::ConsensusStateGetRequest(const ConsensusStateGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.block_id().size() > 0) {
    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ConsensusStateGetRequest)
}

void ConsensusStateGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusStateGetRequest_consensus_2eproto.base);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConsensusStateGetRequest::~ConsensusStateGetRequest() {
  // @@protoc_insertion_point(destructor:ConsensusStateGetRequest)
  SharedDtor();
}

void ConsensusStateGetRequest::SharedDtor() {
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsensusStateGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusStateGetRequest& ConsensusStateGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusStateGetRequest_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusStateGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusStateGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  block_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusStateGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_block_id(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // repeated string addresses = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_addresses(), ptr, ctx, "ConsensusStateGetRequest.addresses");
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusStateGetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusStateGetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string addresses = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_addresses()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->addresses(this->addresses_size() - 1).data(),
            static_cast<int>(this->addresses(this->addresses_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConsensusStateGetRequest.addresses"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusStateGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusStateGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusStateGetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusStateGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->block_id(), output);
  }

  // repeated string addresses = 2;
  for (int i = 0, n = this->addresses_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->addresses(i).data(), static_cast<int>(this->addresses(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusStateGetRequest.addresses");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->addresses(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusStateGetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusStateGetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusStateGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->block_id(), target);
  }

  // repeated string addresses = 2;
  for (int i = 0, n = this->addresses_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->addresses(i).data(), static_cast<int>(this->addresses(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConsensusStateGetRequest.addresses");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->addresses(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusStateGetRequest)
  return target;
}

size_t ConsensusStateGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusStateGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->addresses_size());
  for (int i = 0, n = this->addresses_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->addresses(i));
  }

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->block_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusStateGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusStateGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusStateGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusStateGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusStateGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusStateGetRequest)
    MergeFrom(*source);
  }
}

void ConsensusStateGetRequest::MergeFrom(const ConsensusStateGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusStateGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  if (from.block_id().size() > 0) {

    block_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_id_);
  }
}

void ConsensusStateGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusStateGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusStateGetRequest::CopyFrom(const ConsensusStateGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusStateGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusStateGetRequest::IsInitialized() const {
  return true;
}

void ConsensusStateGetRequest::Swap(ConsensusStateGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusStateGetRequest::InternalSwap(ConsensusStateGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addresses_.InternalSwap(CastToBase(&other->addresses_));
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusStateGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusStateGetResponse::InitAsDefaultInstance() {
}
class ConsensusStateGetResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusStateGetResponse::kStatusFieldNumber;
const int ConsensusStateGetResponse::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusStateGetResponse::ConsensusStateGetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConsensusStateGetResponse)
}
ConsensusStateGetResponse::ConsensusStateGetResponse(const ConsensusStateGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ConsensusStateGetResponse)
}

void ConsensusStateGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusStateGetResponse_consensus_2eproto.base);
  status_ = 0;
}

ConsensusStateGetResponse::~ConsensusStateGetResponse() {
  // @@protoc_insertion_point(destructor:ConsensusStateGetResponse)
  SharedDtor();
}

void ConsensusStateGetResponse::SharedDtor() {
}

void ConsensusStateGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusStateGetResponse& ConsensusStateGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusStateGetResponse_consensus_2eproto.base);
  return *internal_default_instance();
}


void ConsensusStateGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConsensusStateGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusStateGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConsensusStateGetResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ConsensusStateGetResponse_Status>(val));
        break;
      }
      // repeated .ConsensusStateEntry entries = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_entries(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusStateGetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConsensusStateGetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConsensusStateGetResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ConsensusStateGetResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ConsensusStateEntry entries = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConsensusStateGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConsensusStateGetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusStateGetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConsensusStateGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusStateGetResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .ConsensusStateEntry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConsensusStateGetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusStateGetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConsensusStateGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConsensusStateGetResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .ConsensusStateEntry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConsensusStateGetResponse)
  return target;
}

size_t ConsensusStateGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConsensusStateGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConsensusStateEntry entries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // .ConsensusStateGetResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusStateGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConsensusStateGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusStateGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusStateGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConsensusStateGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConsensusStateGetResponse)
    MergeFrom(*source);
  }
}

void ConsensusStateGetResponse::MergeFrom(const ConsensusStateGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConsensusStateGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConsensusStateGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConsensusStateGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusStateGetResponse::CopyFrom(const ConsensusStateGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConsensusStateGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusStateGetResponse::IsInitialized() const {
  return true;
}

void ConsensusStateGetResponse::Swap(ConsensusStateGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusStateGetResponse::InternalSwap(ConsensusStateGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusStateGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ConsensusPeerMessageHeader* Arena::CreateMaybeMessage< ::ConsensusPeerMessageHeader >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusPeerMessageHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusPeerMessage* Arena::CreateMaybeMessage< ::ConsensusPeerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusPeerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusBlock* Arena::CreateMaybeMessage< ::ConsensusBlock >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusPeerInfo* Arena::CreateMaybeMessage< ::ConsensusPeerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusPeerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusSettingsEntry* Arena::CreateMaybeMessage< ::ConsensusSettingsEntry >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusSettingsEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusStateEntry* Arena::CreateMaybeMessage< ::ConsensusStateEntry >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusStateEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusRegisterRequest* Arena::CreateMaybeMessage< ::ConsensusRegisterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusRegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusRegisterResponse* Arena::CreateMaybeMessage< ::ConsensusRegisterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusRegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusNotifyPeerConnected* Arena::CreateMaybeMessage< ::ConsensusNotifyPeerConnected >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusNotifyPeerConnected >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusNotifyPeerDisconnected* Arena::CreateMaybeMessage< ::ConsensusNotifyPeerDisconnected >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusNotifyPeerDisconnected >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusNotifyPeerMessage* Arena::CreateMaybeMessage< ::ConsensusNotifyPeerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusNotifyPeerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusNotifyBlockNew* Arena::CreateMaybeMessage< ::ConsensusNotifyBlockNew >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusNotifyBlockNew >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusNotifyBlockValid* Arena::CreateMaybeMessage< ::ConsensusNotifyBlockValid >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusNotifyBlockValid >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusNotifyBlockInvalid* Arena::CreateMaybeMessage< ::ConsensusNotifyBlockInvalid >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusNotifyBlockInvalid >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusNotifyBlockCommit* Arena::CreateMaybeMessage< ::ConsensusNotifyBlockCommit >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusNotifyBlockCommit >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusNotifyAck* Arena::CreateMaybeMessage< ::ConsensusNotifyAck >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusNotifyAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusSendToRequest* Arena::CreateMaybeMessage< ::ConsensusSendToRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusSendToRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusSendToResponse* Arena::CreateMaybeMessage< ::ConsensusSendToResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusSendToResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusBroadcastRequest* Arena::CreateMaybeMessage< ::ConsensusBroadcastRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusBroadcastRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusBroadcastResponse* Arena::CreateMaybeMessage< ::ConsensusBroadcastResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusBroadcastResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusInitializeBlockRequest* Arena::CreateMaybeMessage< ::ConsensusInitializeBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusInitializeBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusInitializeBlockResponse* Arena::CreateMaybeMessage< ::ConsensusInitializeBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusInitializeBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusSummarizeBlockRequest* Arena::CreateMaybeMessage< ::ConsensusSummarizeBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusSummarizeBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusSummarizeBlockResponse* Arena::CreateMaybeMessage< ::ConsensusSummarizeBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusSummarizeBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusFinalizeBlockRequest* Arena::CreateMaybeMessage< ::ConsensusFinalizeBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusFinalizeBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusFinalizeBlockResponse* Arena::CreateMaybeMessage< ::ConsensusFinalizeBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusFinalizeBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusCancelBlockRequest* Arena::CreateMaybeMessage< ::ConsensusCancelBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusCancelBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusCancelBlockResponse* Arena::CreateMaybeMessage< ::ConsensusCancelBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusCancelBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusCheckBlocksRequest* Arena::CreateMaybeMessage< ::ConsensusCheckBlocksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusCheckBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusCheckBlocksResponse* Arena::CreateMaybeMessage< ::ConsensusCheckBlocksResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusCheckBlocksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusCommitBlockRequest* Arena::CreateMaybeMessage< ::ConsensusCommitBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusCommitBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusCommitBlockResponse* Arena::CreateMaybeMessage< ::ConsensusCommitBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusCommitBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusIgnoreBlockRequest* Arena::CreateMaybeMessage< ::ConsensusIgnoreBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusIgnoreBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusIgnoreBlockResponse* Arena::CreateMaybeMessage< ::ConsensusIgnoreBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusIgnoreBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusFailBlockRequest* Arena::CreateMaybeMessage< ::ConsensusFailBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusFailBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusFailBlockResponse* Arena::CreateMaybeMessage< ::ConsensusFailBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusFailBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusBlocksGetRequest* Arena::CreateMaybeMessage< ::ConsensusBlocksGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusBlocksGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusBlocksGetResponse* Arena::CreateMaybeMessage< ::ConsensusBlocksGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusBlocksGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusChainHeadGetRequest* Arena::CreateMaybeMessage< ::ConsensusChainHeadGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusChainHeadGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusChainHeadGetResponse* Arena::CreateMaybeMessage< ::ConsensusChainHeadGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusChainHeadGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusSettingsGetRequest* Arena::CreateMaybeMessage< ::ConsensusSettingsGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusSettingsGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusSettingsGetResponse* Arena::CreateMaybeMessage< ::ConsensusSettingsGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusSettingsGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusStateGetRequest* Arena::CreateMaybeMessage< ::ConsensusStateGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusStateGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConsensusStateGetResponse* Arena::CreateMaybeMessage< ::ConsensusStateGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConsensusStateGetResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
