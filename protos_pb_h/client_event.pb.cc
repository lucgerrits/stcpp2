// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_event.proto

#include "client_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_events_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_events_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventSubscription_events_2eproto;
class ClientEventsSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientEventsSubscribeRequest> _instance;
} _ClientEventsSubscribeRequest_default_instance_;
class ClientEventsSubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientEventsSubscribeResponse> _instance;
} _ClientEventsSubscribeResponse_default_instance_;
class ClientEventsUnsubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientEventsUnsubscribeRequest> _instance;
} _ClientEventsUnsubscribeRequest_default_instance_;
class ClientEventsUnsubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientEventsUnsubscribeResponse> _instance;
} _ClientEventsUnsubscribeResponse_default_instance_;
class ClientEventsGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientEventsGetRequest> _instance;
} _ClientEventsGetRequest_default_instance_;
class ClientEventsGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientEventsGetResponse> _instance;
} _ClientEventsGetResponse_default_instance_;
static void InitDefaultsscc_info_ClientEventsGetRequest_client_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientEventsGetRequest_default_instance_;
    new (ptr) ::ClientEventsGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientEventsGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientEventsGetRequest_client_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClientEventsGetRequest_client_5fevent_2eproto}, {
      &scc_info_EventSubscription_events_2eproto.base,}};

static void InitDefaultsscc_info_ClientEventsGetResponse_client_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientEventsGetResponse_default_instance_;
    new (ptr) ::ClientEventsGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientEventsGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientEventsGetResponse_client_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClientEventsGetResponse_client_5fevent_2eproto}, {
      &scc_info_Event_events_2eproto.base,}};

static void InitDefaultsscc_info_ClientEventsSubscribeRequest_client_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientEventsSubscribeRequest_default_instance_;
    new (ptr) ::ClientEventsSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientEventsSubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientEventsSubscribeRequest_client_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClientEventsSubscribeRequest_client_5fevent_2eproto}, {
      &scc_info_EventSubscription_events_2eproto.base,}};

static void InitDefaultsscc_info_ClientEventsSubscribeResponse_client_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientEventsSubscribeResponse_default_instance_;
    new (ptr) ::ClientEventsSubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientEventsSubscribeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientEventsSubscribeResponse_client_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientEventsSubscribeResponse_client_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_ClientEventsUnsubscribeRequest_client_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientEventsUnsubscribeRequest_default_instance_;
    new (ptr) ::ClientEventsUnsubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientEventsUnsubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientEventsUnsubscribeRequest_client_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientEventsUnsubscribeRequest_client_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_ClientEventsUnsubscribeResponse_client_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientEventsUnsubscribeResponse_default_instance_;
    new (ptr) ::ClientEventsUnsubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientEventsUnsubscribeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientEventsUnsubscribeResponse_client_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientEventsUnsubscribeResponse_client_5fevent_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_5fevent_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_5fevent_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_5fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_client_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientEventsSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientEventsSubscribeRequest, subscriptions_),
  PROTOBUF_FIELD_OFFSET(::ClientEventsSubscribeRequest, last_known_block_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientEventsSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientEventsSubscribeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ClientEventsSubscribeResponse, response_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientEventsUnsubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientEventsUnsubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientEventsUnsubscribeResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientEventsGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientEventsGetRequest, subscriptions_),
  PROTOBUF_FIELD_OFFSET(::ClientEventsGetRequest, block_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientEventsGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientEventsGetResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ClientEventsGetResponse, events_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ClientEventsSubscribeRequest)},
  { 7, -1, sizeof(::ClientEventsSubscribeResponse)},
  { 14, -1, sizeof(::ClientEventsUnsubscribeRequest)},
  { 19, -1, sizeof(::ClientEventsUnsubscribeResponse)},
  { 25, -1, sizeof(::ClientEventsGetRequest)},
  { 32, -1, sizeof(::ClientEventsGetResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientEventsSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientEventsSubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientEventsUnsubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientEventsUnsubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientEventsGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientEventsGetResponse_default_instance_),
};

const char descriptor_table_protodef_client_5fevent_2eproto[] =
  "\n\022client_event.proto\032\014events.proto\"g\n\034Cl"
  "ientEventsSubscribeRequest\022)\n\rsubscripti"
  "ons\030\001 \003(\0132\022.EventSubscription\022\034\n\024last_kn"
  "own_block_ids\030\002 \003(\t\"\273\001\n\035ClientEventsSubs"
  "cribeResponse\0225\n\006status\030\001 \001(\0162%.ClientEv"
  "entsSubscribeResponse.Status\022\030\n\020response"
  "_message\030\002 \001(\t\"I\n\006Status\022\020\n\014STATUS_UNSET"
  "\020\000\022\006\n\002OK\020\001\022\022\n\016INVALID_FILTER\020\002\022\021\n\rUNKNOW"
  "N_BLOCK\020\003\" \n\036ClientEventsUnsubscribeRequ"
  "est\"\222\001\n\037ClientEventsUnsubscribeResponse\022"
  "7\n\006status\030\001 \001(\0162\'.ClientEventsUnsubscrib"
  "eResponse.Status\"6\n\006Status\022\020\n\014STATUS_UNS"
  "ET\020\000\022\006\n\002OK\020\001\022\022\n\016INTERNAL_ERROR\020\002\"V\n\026Clie"
  "ntEventsGetRequest\022)\n\rsubscriptions\030\001 \003("
  "\0132\022.EventSubscription\022\021\n\tblock_ids\030\002 \003(\t"
  "\"\301\001\n\027ClientEventsGetResponse\022/\n\006status\030\001"
  " \001(\0162\037.ClientEventsGetResponse.Status\022\026\n"
  "\006events\030\002 \003(\0132\006.Event\"]\n\006Status\022\020\n\014STATU"
  "S_UNSET\020\000\022\006\n\002OK\020\001\022\022\n\016INTERNAL_ERROR\020\002\022\022\n"
  "\016INVALID_FILTER\020\003\022\021\n\rUNKNOWN_BLOCK\020\004B+\n\025"
  "sawtooth.sdk.protobufP\001Z\020client_event_pb"
  "2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_client_5fevent_2eproto_deps[1] = {
  &::descriptor_table_events_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_client_5fevent_2eproto_sccs[6] = {
  &scc_info_ClientEventsGetRequest_client_5fevent_2eproto.base,
  &scc_info_ClientEventsGetResponse_client_5fevent_2eproto.base,
  &scc_info_ClientEventsSubscribeRequest_client_5fevent_2eproto.base,
  &scc_info_ClientEventsSubscribeResponse_client_5fevent_2eproto.base,
  &scc_info_ClientEventsUnsubscribeRequest_client_5fevent_2eproto.base,
  &scc_info_ClientEventsUnsubscribeResponse_client_5fevent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_5fevent_2eproto_once;
static bool descriptor_table_client_5fevent_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fevent_2eproto = {
  &descriptor_table_client_5fevent_2eproto_initialized, descriptor_table_protodef_client_5fevent_2eproto, "client_event.proto", 849,
  &descriptor_table_client_5fevent_2eproto_once, descriptor_table_client_5fevent_2eproto_sccs, descriptor_table_client_5fevent_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_client_5fevent_2eproto::offsets,
  file_level_metadata_client_5fevent_2eproto, 6, file_level_enum_descriptors_client_5fevent_2eproto, file_level_service_descriptors_client_5fevent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_client_5fevent_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_client_5fevent_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientEventsSubscribeResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fevent_2eproto);
  return file_level_enum_descriptors_client_5fevent_2eproto[0];
}
bool ClientEventsSubscribeResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientEventsSubscribeResponse_Status ClientEventsSubscribeResponse::STATUS_UNSET;
constexpr ClientEventsSubscribeResponse_Status ClientEventsSubscribeResponse::OK;
constexpr ClientEventsSubscribeResponse_Status ClientEventsSubscribeResponse::INVALID_FILTER;
constexpr ClientEventsSubscribeResponse_Status ClientEventsSubscribeResponse::UNKNOWN_BLOCK;
constexpr ClientEventsSubscribeResponse_Status ClientEventsSubscribeResponse::Status_MIN;
constexpr ClientEventsSubscribeResponse_Status ClientEventsSubscribeResponse::Status_MAX;
constexpr int ClientEventsSubscribeResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientEventsUnsubscribeResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fevent_2eproto);
  return file_level_enum_descriptors_client_5fevent_2eproto[1];
}
bool ClientEventsUnsubscribeResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientEventsUnsubscribeResponse_Status ClientEventsUnsubscribeResponse::STATUS_UNSET;
constexpr ClientEventsUnsubscribeResponse_Status ClientEventsUnsubscribeResponse::OK;
constexpr ClientEventsUnsubscribeResponse_Status ClientEventsUnsubscribeResponse::INTERNAL_ERROR;
constexpr ClientEventsUnsubscribeResponse_Status ClientEventsUnsubscribeResponse::Status_MIN;
constexpr ClientEventsUnsubscribeResponse_Status ClientEventsUnsubscribeResponse::Status_MAX;
constexpr int ClientEventsUnsubscribeResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientEventsGetResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fevent_2eproto);
  return file_level_enum_descriptors_client_5fevent_2eproto[2];
}
bool ClientEventsGetResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientEventsGetResponse_Status ClientEventsGetResponse::STATUS_UNSET;
constexpr ClientEventsGetResponse_Status ClientEventsGetResponse::OK;
constexpr ClientEventsGetResponse_Status ClientEventsGetResponse::INTERNAL_ERROR;
constexpr ClientEventsGetResponse_Status ClientEventsGetResponse::INVALID_FILTER;
constexpr ClientEventsGetResponse_Status ClientEventsGetResponse::UNKNOWN_BLOCK;
constexpr ClientEventsGetResponse_Status ClientEventsGetResponse::Status_MIN;
constexpr ClientEventsGetResponse_Status ClientEventsGetResponse::Status_MAX;
constexpr int ClientEventsGetResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ClientEventsSubscribeRequest::InitAsDefaultInstance() {
}
class ClientEventsSubscribeRequest::HasBitSetters {
 public:
};

void ClientEventsSubscribeRequest::clear_subscriptions() {
  subscriptions_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientEventsSubscribeRequest::kSubscriptionsFieldNumber;
const int ClientEventsSubscribeRequest::kLastKnownBlockIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientEventsSubscribeRequest::ClientEventsSubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientEventsSubscribeRequest)
}
ClientEventsSubscribeRequest::ClientEventsSubscribeRequest(const ClientEventsSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      subscriptions_(from.subscriptions_),
      last_known_block_ids_(from.last_known_block_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientEventsSubscribeRequest)
}

void ClientEventsSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientEventsSubscribeRequest_client_5fevent_2eproto.base);
}

ClientEventsSubscribeRequest::~ClientEventsSubscribeRequest() {
  // @@protoc_insertion_point(destructor:ClientEventsSubscribeRequest)
  SharedDtor();
}

void ClientEventsSubscribeRequest::SharedDtor() {
}

void ClientEventsSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientEventsSubscribeRequest& ClientEventsSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientEventsSubscribeRequest_client_5fevent_2eproto.base);
  return *internal_default_instance();
}


void ClientEventsSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientEventsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  last_known_block_ids_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientEventsSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .EventSubscription subscriptions = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_subscriptions(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 10) break;
          ptr += 1;
        }
        break;
      }
      // repeated string last_known_block_ids = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_last_known_block_ids(), ptr, ctx, "ClientEventsSubscribeRequest.last_known_block_ids");
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientEventsSubscribeRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientEventsSubscribeRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EventSubscription subscriptions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_subscriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string last_known_block_ids = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_last_known_block_ids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->last_known_block_ids(this->last_known_block_ids_size() - 1).data(),
            static_cast<int>(this->last_known_block_ids(this->last_known_block_ids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientEventsSubscribeRequest.last_known_block_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientEventsSubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientEventsSubscribeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientEventsSubscribeRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientEventsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EventSubscription subscriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscriptions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->subscriptions(static_cast<int>(i)),
      output);
  }

  // repeated string last_known_block_ids = 2;
  for (int i = 0, n = this->last_known_block_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->last_known_block_ids(i).data(), static_cast<int>(this->last_known_block_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientEventsSubscribeRequest.last_known_block_ids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->last_known_block_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientEventsSubscribeRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientEventsSubscribeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientEventsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EventSubscription subscriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscriptions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->subscriptions(static_cast<int>(i)), target);
  }

  // repeated string last_known_block_ids = 2;
  for (int i = 0, n = this->last_known_block_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->last_known_block_ids(i).data(), static_cast<int>(this->last_known_block_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientEventsSubscribeRequest.last_known_block_ids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->last_known_block_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientEventsSubscribeRequest)
  return target;
}

size_t ClientEventsSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientEventsSubscribeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EventSubscription subscriptions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->subscriptions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->subscriptions(static_cast<int>(i)));
    }
  }

  // repeated string last_known_block_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->last_known_block_ids_size());
  for (int i = 0, n = this->last_known_block_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->last_known_block_ids(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientEventsSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientEventsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientEventsSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientEventsSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientEventsSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientEventsSubscribeRequest)
    MergeFrom(*source);
  }
}

void ClientEventsSubscribeRequest::MergeFrom(const ClientEventsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientEventsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
  last_known_block_ids_.MergeFrom(from.last_known_block_ids_);
}

void ClientEventsSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientEventsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientEventsSubscribeRequest::CopyFrom(const ClientEventsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientEventsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEventsSubscribeRequest::IsInitialized() const {
  return true;
}

void ClientEventsSubscribeRequest::Swap(ClientEventsSubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientEventsSubscribeRequest::InternalSwap(ClientEventsSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&subscriptions_)->InternalSwap(CastToBase(&other->subscriptions_));
  last_known_block_ids_.InternalSwap(CastToBase(&other->last_known_block_ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientEventsSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientEventsSubscribeResponse::InitAsDefaultInstance() {
}
class ClientEventsSubscribeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientEventsSubscribeResponse::kStatusFieldNumber;
const int ClientEventsSubscribeResponse::kResponseMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientEventsSubscribeResponse::ClientEventsSubscribeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientEventsSubscribeResponse)
}
ClientEventsSubscribeResponse::ClientEventsSubscribeResponse(const ClientEventsSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.response_message().size() > 0) {
    response_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_message_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ClientEventsSubscribeResponse)
}

void ClientEventsSubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientEventsSubscribeResponse_client_5fevent_2eproto.base);
  response_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

ClientEventsSubscribeResponse::~ClientEventsSubscribeResponse() {
  // @@protoc_insertion_point(destructor:ClientEventsSubscribeResponse)
  SharedDtor();
}

void ClientEventsSubscribeResponse::SharedDtor() {
  response_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientEventsSubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientEventsSubscribeResponse& ClientEventsSubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientEventsSubscribeResponse_client_5fevent_2eproto.base);
  return *internal_default_instance();
}


void ClientEventsSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientEventsSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientEventsSubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientEventsSubscribeResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ClientEventsSubscribeResponse_Status>(val));
        break;
      }
      // string response_message = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_response_message(), ptr, ctx, "ClientEventsSubscribeResponse.response_message");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientEventsSubscribeResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientEventsSubscribeResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ClientEventsSubscribeResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ClientEventsSubscribeResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string response_message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_response_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->response_message().data(), static_cast<int>(this->response_message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientEventsSubscribeResponse.response_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientEventsSubscribeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientEventsSubscribeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientEventsSubscribeResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientEventsSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientEventsSubscribeResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string response_message = 2;
  if (this->response_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->response_message().data(), static_cast<int>(this->response_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientEventsSubscribeResponse.response_message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->response_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientEventsSubscribeResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientEventsSubscribeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientEventsSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientEventsSubscribeResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // string response_message = 2;
  if (this->response_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->response_message().data(), static_cast<int>(this->response_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientEventsSubscribeResponse.response_message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->response_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientEventsSubscribeResponse)
  return target;
}

size_t ClientEventsSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientEventsSubscribeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response_message = 2;
  if (this->response_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->response_message());
  }

  // .ClientEventsSubscribeResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientEventsSubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientEventsSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientEventsSubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientEventsSubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientEventsSubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientEventsSubscribeResponse)
    MergeFrom(*source);
  }
}

void ClientEventsSubscribeResponse::MergeFrom(const ClientEventsSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientEventsSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_message().size() > 0) {

    response_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_message_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ClientEventsSubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientEventsSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientEventsSubscribeResponse::CopyFrom(const ClientEventsSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientEventsSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEventsSubscribeResponse::IsInitialized() const {
  return true;
}

void ClientEventsSubscribeResponse::Swap(ClientEventsSubscribeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientEventsSubscribeResponse::InternalSwap(ClientEventsSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  response_message_.Swap(&other->response_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientEventsSubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientEventsUnsubscribeRequest::InitAsDefaultInstance() {
}
class ClientEventsUnsubscribeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientEventsUnsubscribeRequest::ClientEventsUnsubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientEventsUnsubscribeRequest)
}
ClientEventsUnsubscribeRequest::ClientEventsUnsubscribeRequest(const ClientEventsUnsubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientEventsUnsubscribeRequest)
}

void ClientEventsUnsubscribeRequest::SharedCtor() {
}

ClientEventsUnsubscribeRequest::~ClientEventsUnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:ClientEventsUnsubscribeRequest)
  SharedDtor();
}

void ClientEventsUnsubscribeRequest::SharedDtor() {
}

void ClientEventsUnsubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientEventsUnsubscribeRequest& ClientEventsUnsubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientEventsUnsubscribeRequest_client_5fevent_2eproto.base);
  return *internal_default_instance();
}


void ClientEventsUnsubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientEventsUnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientEventsUnsubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientEventsUnsubscribeRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientEventsUnsubscribeRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ClientEventsUnsubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientEventsUnsubscribeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientEventsUnsubscribeRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientEventsUnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientEventsUnsubscribeRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientEventsUnsubscribeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientEventsUnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientEventsUnsubscribeRequest)
  return target;
}

size_t ClientEventsUnsubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientEventsUnsubscribeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientEventsUnsubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientEventsUnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientEventsUnsubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientEventsUnsubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientEventsUnsubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientEventsUnsubscribeRequest)
    MergeFrom(*source);
  }
}

void ClientEventsUnsubscribeRequest::MergeFrom(const ClientEventsUnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientEventsUnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClientEventsUnsubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientEventsUnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientEventsUnsubscribeRequest::CopyFrom(const ClientEventsUnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientEventsUnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEventsUnsubscribeRequest::IsInitialized() const {
  return true;
}

void ClientEventsUnsubscribeRequest::Swap(ClientEventsUnsubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientEventsUnsubscribeRequest::InternalSwap(ClientEventsUnsubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientEventsUnsubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientEventsUnsubscribeResponse::InitAsDefaultInstance() {
}
class ClientEventsUnsubscribeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientEventsUnsubscribeResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientEventsUnsubscribeResponse::ClientEventsUnsubscribeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientEventsUnsubscribeResponse)
}
ClientEventsUnsubscribeResponse::ClientEventsUnsubscribeResponse(const ClientEventsUnsubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ClientEventsUnsubscribeResponse)
}

void ClientEventsUnsubscribeResponse::SharedCtor() {
  status_ = 0;
}

ClientEventsUnsubscribeResponse::~ClientEventsUnsubscribeResponse() {
  // @@protoc_insertion_point(destructor:ClientEventsUnsubscribeResponse)
  SharedDtor();
}

void ClientEventsUnsubscribeResponse::SharedDtor() {
}

void ClientEventsUnsubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientEventsUnsubscribeResponse& ClientEventsUnsubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientEventsUnsubscribeResponse_client_5fevent_2eproto.base);
  return *internal_default_instance();
}


void ClientEventsUnsubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientEventsUnsubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientEventsUnsubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientEventsUnsubscribeResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ClientEventsUnsubscribeResponse_Status>(val));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientEventsUnsubscribeResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientEventsUnsubscribeResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ClientEventsUnsubscribeResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ClientEventsUnsubscribeResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientEventsUnsubscribeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientEventsUnsubscribeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientEventsUnsubscribeResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientEventsUnsubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientEventsUnsubscribeResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientEventsUnsubscribeResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientEventsUnsubscribeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientEventsUnsubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientEventsUnsubscribeResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientEventsUnsubscribeResponse)
  return target;
}

size_t ClientEventsUnsubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientEventsUnsubscribeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ClientEventsUnsubscribeResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientEventsUnsubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientEventsUnsubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientEventsUnsubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientEventsUnsubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientEventsUnsubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientEventsUnsubscribeResponse)
    MergeFrom(*source);
  }
}

void ClientEventsUnsubscribeResponse::MergeFrom(const ClientEventsUnsubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientEventsUnsubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ClientEventsUnsubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientEventsUnsubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientEventsUnsubscribeResponse::CopyFrom(const ClientEventsUnsubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientEventsUnsubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEventsUnsubscribeResponse::IsInitialized() const {
  return true;
}

void ClientEventsUnsubscribeResponse::Swap(ClientEventsUnsubscribeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientEventsUnsubscribeResponse::InternalSwap(ClientEventsUnsubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientEventsUnsubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientEventsGetRequest::InitAsDefaultInstance() {
}
class ClientEventsGetRequest::HasBitSetters {
 public:
};

void ClientEventsGetRequest::clear_subscriptions() {
  subscriptions_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientEventsGetRequest::kSubscriptionsFieldNumber;
const int ClientEventsGetRequest::kBlockIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientEventsGetRequest::ClientEventsGetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientEventsGetRequest)
}
ClientEventsGetRequest::ClientEventsGetRequest(const ClientEventsGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      subscriptions_(from.subscriptions_),
      block_ids_(from.block_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientEventsGetRequest)
}

void ClientEventsGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientEventsGetRequest_client_5fevent_2eproto.base);
}

ClientEventsGetRequest::~ClientEventsGetRequest() {
  // @@protoc_insertion_point(destructor:ClientEventsGetRequest)
  SharedDtor();
}

void ClientEventsGetRequest::SharedDtor() {
}

void ClientEventsGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientEventsGetRequest& ClientEventsGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientEventsGetRequest_client_5fevent_2eproto.base);
  return *internal_default_instance();
}


void ClientEventsGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientEventsGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  block_ids_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientEventsGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .EventSubscription subscriptions = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_subscriptions(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 10) break;
          ptr += 1;
        }
        break;
      }
      // repeated string block_ids = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_block_ids(), ptr, ctx, "ClientEventsGetRequest.block_ids");
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientEventsGetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientEventsGetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EventSubscription subscriptions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_subscriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string block_ids = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_block_ids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->block_ids(this->block_ids_size() - 1).data(),
            static_cast<int>(this->block_ids(this->block_ids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClientEventsGetRequest.block_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientEventsGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientEventsGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientEventsGetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientEventsGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EventSubscription subscriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscriptions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->subscriptions(static_cast<int>(i)),
      output);
  }

  // repeated string block_ids = 2;
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->block_ids(i).data(), static_cast<int>(this->block_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientEventsGetRequest.block_ids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->block_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientEventsGetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientEventsGetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientEventsGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EventSubscription subscriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscriptions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->subscriptions(static_cast<int>(i)), target);
  }

  // repeated string block_ids = 2;
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->block_ids(i).data(), static_cast<int>(this->block_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientEventsGetRequest.block_ids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->block_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientEventsGetRequest)
  return target;
}

size_t ClientEventsGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientEventsGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EventSubscription subscriptions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->subscriptions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->subscriptions(static_cast<int>(i)));
    }
  }

  // repeated string block_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->block_ids_size());
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->block_ids(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientEventsGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientEventsGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientEventsGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientEventsGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientEventsGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientEventsGetRequest)
    MergeFrom(*source);
  }
}

void ClientEventsGetRequest::MergeFrom(const ClientEventsGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientEventsGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
  block_ids_.MergeFrom(from.block_ids_);
}

void ClientEventsGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientEventsGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientEventsGetRequest::CopyFrom(const ClientEventsGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientEventsGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEventsGetRequest::IsInitialized() const {
  return true;
}

void ClientEventsGetRequest::Swap(ClientEventsGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientEventsGetRequest::InternalSwap(ClientEventsGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&subscriptions_)->InternalSwap(CastToBase(&other->subscriptions_));
  block_ids_.InternalSwap(CastToBase(&other->block_ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientEventsGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientEventsGetResponse::InitAsDefaultInstance() {
}
class ClientEventsGetResponse::HasBitSetters {
 public:
};

void ClientEventsGetResponse::clear_events() {
  events_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientEventsGetResponse::kStatusFieldNumber;
const int ClientEventsGetResponse::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientEventsGetResponse::ClientEventsGetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientEventsGetResponse)
}
ClientEventsGetResponse::ClientEventsGetResponse(const ClientEventsGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ClientEventsGetResponse)
}

void ClientEventsGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientEventsGetResponse_client_5fevent_2eproto.base);
  status_ = 0;
}

ClientEventsGetResponse::~ClientEventsGetResponse() {
  // @@protoc_insertion_point(destructor:ClientEventsGetResponse)
  SharedDtor();
}

void ClientEventsGetResponse::SharedDtor() {
}

void ClientEventsGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientEventsGetResponse& ClientEventsGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientEventsGetResponse_client_5fevent_2eproto.base);
  return *internal_default_instance();
}


void ClientEventsGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientEventsGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientEventsGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientEventsGetResponse.Status status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        set_status(static_cast<::ClientEventsGetResponse_Status>(val));
        break;
      }
      // repeated .Event events = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_events(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 18) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientEventsGetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientEventsGetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ClientEventsGetResponse.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ClientEventsGetResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Event events = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientEventsGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientEventsGetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientEventsGetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientEventsGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientEventsGetResponse.Status status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .Event events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->events(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientEventsGetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientEventsGetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientEventsGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientEventsGetResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .Event events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->events(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientEventsGetResponse)
  return target;
}

size_t ClientEventsGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientEventsGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Event events = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // .ClientEventsGetResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientEventsGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientEventsGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientEventsGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientEventsGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientEventsGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientEventsGetResponse)
    MergeFrom(*source);
  }
}

void ClientEventsGetResponse::MergeFrom(const ClientEventsGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientEventsGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ClientEventsGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientEventsGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientEventsGetResponse::CopyFrom(const ClientEventsGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientEventsGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEventsGetResponse::IsInitialized() const {
  return true;
}

void ClientEventsGetResponse::Swap(ClientEventsGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientEventsGetResponse::InternalSwap(ClientEventsGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientEventsGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ClientEventsSubscribeRequest* Arena::CreateMaybeMessage< ::ClientEventsSubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientEventsSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientEventsSubscribeResponse* Arena::CreateMaybeMessage< ::ClientEventsSubscribeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ClientEventsSubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientEventsUnsubscribeRequest* Arena::CreateMaybeMessage< ::ClientEventsUnsubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientEventsUnsubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientEventsUnsubscribeResponse* Arena::CreateMaybeMessage< ::ClientEventsUnsubscribeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ClientEventsUnsubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientEventsGetRequest* Arena::CreateMaybeMessage< ::ClientEventsGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientEventsGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientEventsGetResponse* Arena::CreateMaybeMessage< ::ClientEventsGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ClientEventsGetResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
