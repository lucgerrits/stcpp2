// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_peers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fpeers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fpeers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fpeers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fpeers_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fpeers_2eproto;
class ClientPeersGetRequest;
class ClientPeersGetRequestDefaultTypeInternal;
extern ClientPeersGetRequestDefaultTypeInternal _ClientPeersGetRequest_default_instance_;
class ClientPeersGetResponse;
class ClientPeersGetResponseDefaultTypeInternal;
extern ClientPeersGetResponseDefaultTypeInternal _ClientPeersGetResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientPeersGetRequest* Arena::CreateMaybeMessage<::ClientPeersGetRequest>(Arena*);
template<> ::ClientPeersGetResponse* Arena::CreateMaybeMessage<::ClientPeersGetResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ClientPeersGetResponse_Status : int {
  ClientPeersGetResponse_Status_STATUS_UNSET = 0,
  ClientPeersGetResponse_Status_OK = 1,
  ClientPeersGetResponse_Status_ERROR = 2,
  ClientPeersGetResponse_Status_ClientPeersGetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientPeersGetResponse_Status_ClientPeersGetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientPeersGetResponse_Status_IsValid(int value);
constexpr ClientPeersGetResponse_Status ClientPeersGetResponse_Status_Status_MIN = ClientPeersGetResponse_Status_STATUS_UNSET;
constexpr ClientPeersGetResponse_Status ClientPeersGetResponse_Status_Status_MAX = ClientPeersGetResponse_Status_ERROR;
constexpr int ClientPeersGetResponse_Status_Status_ARRAYSIZE = ClientPeersGetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientPeersGetResponse_Status_descriptor();
template<typename T>
inline const std::string& ClientPeersGetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientPeersGetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientPeersGetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientPeersGetResponse_Status_descriptor(), enum_t_value);
}
inline bool ClientPeersGetResponse_Status_Parse(
    const std::string& name, ClientPeersGetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientPeersGetResponse_Status>(
    ClientPeersGetResponse_Status_descriptor(), name, value);
}
// ===================================================================

class ClientPeersGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientPeersGetRequest) */ {
 public:
  ClientPeersGetRequest();
  virtual ~ClientPeersGetRequest();

  ClientPeersGetRequest(const ClientPeersGetRequest& from);
  ClientPeersGetRequest(ClientPeersGetRequest&& from) noexcept
    : ClientPeersGetRequest() {
    *this = ::std::move(from);
  }

  inline ClientPeersGetRequest& operator=(const ClientPeersGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPeersGetRequest& operator=(ClientPeersGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientPeersGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientPeersGetRequest* internal_default_instance() {
    return reinterpret_cast<const ClientPeersGetRequest*>(
               &_ClientPeersGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientPeersGetRequest* other);
  friend void swap(ClientPeersGetRequest& a, ClientPeersGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientPeersGetRequest* New() const final {
    return CreateMaybeMessage<ClientPeersGetRequest>(nullptr);
  }

  ClientPeersGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientPeersGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientPeersGetRequest& from);
  void MergeFrom(const ClientPeersGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPeersGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientPeersGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fpeers_2eproto);
    return ::descriptor_table_client_5fpeers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientPeersGetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fpeers_2eproto;
};
// -------------------------------------------------------------------

class ClientPeersGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientPeersGetResponse) */ {
 public:
  ClientPeersGetResponse();
  virtual ~ClientPeersGetResponse();

  ClientPeersGetResponse(const ClientPeersGetResponse& from);
  ClientPeersGetResponse(ClientPeersGetResponse&& from) noexcept
    : ClientPeersGetResponse() {
    *this = ::std::move(from);
  }

  inline ClientPeersGetResponse& operator=(const ClientPeersGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPeersGetResponse& operator=(ClientPeersGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientPeersGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientPeersGetResponse* internal_default_instance() {
    return reinterpret_cast<const ClientPeersGetResponse*>(
               &_ClientPeersGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientPeersGetResponse* other);
  friend void swap(ClientPeersGetResponse& a, ClientPeersGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientPeersGetResponse* New() const final {
    return CreateMaybeMessage<ClientPeersGetResponse>(nullptr);
  }

  ClientPeersGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientPeersGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientPeersGetResponse& from);
  void MergeFrom(const ClientPeersGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPeersGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientPeersGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fpeers_2eproto);
    return ::descriptor_table_client_5fpeers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientPeersGetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    ClientPeersGetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    ClientPeersGetResponse_Status_OK;
  static constexpr Status ERROR =
    ClientPeersGetResponse_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return ClientPeersGetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientPeersGetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientPeersGetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientPeersGetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClientPeersGetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientPeersGetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ClientPeersGetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string peers = 2;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 2;
  const std::string& peers(int index) const;
  std::string* mutable_peers(int index);
  void set_peers(int index, const std::string& value);
  void set_peers(int index, std::string&& value);
  void set_peers(int index, const char* value);
  void set_peers(int index, const char* value, size_t size);
  std::string* add_peers();
  void add_peers(const std::string& value);
  void add_peers(std::string&& value);
  void add_peers(const char* value);
  void add_peers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& peers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_peers();

  // .ClientPeersGetResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ClientPeersGetResponse_Status status() const;
  void set_status(::ClientPeersGetResponse_Status value);

  // @@protoc_insertion_point(class_scope:ClientPeersGetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> peers_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fpeers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientPeersGetRequest

// -------------------------------------------------------------------

// ClientPeersGetResponse

// .ClientPeersGetResponse.Status status = 1;
inline void ClientPeersGetResponse::clear_status() {
  status_ = 0;
}
inline ::ClientPeersGetResponse_Status ClientPeersGetResponse::status() const {
  // @@protoc_insertion_point(field_get:ClientPeersGetResponse.status)
  return static_cast< ::ClientPeersGetResponse_Status >(status_);
}
inline void ClientPeersGetResponse::set_status(::ClientPeersGetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ClientPeersGetResponse.status)
}

// repeated string peers = 2;
inline int ClientPeersGetResponse::peers_size() const {
  return peers_.size();
}
inline void ClientPeersGetResponse::clear_peers() {
  peers_.Clear();
}
inline const std::string& ClientPeersGetResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:ClientPeersGetResponse.peers)
  return peers_.Get(index);
}
inline std::string* ClientPeersGetResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:ClientPeersGetResponse.peers)
  return peers_.Mutable(index);
}
inline void ClientPeersGetResponse::set_peers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientPeersGetResponse.peers)
  peers_.Mutable(index)->assign(value);
}
inline void ClientPeersGetResponse::set_peers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientPeersGetResponse.peers)
  peers_.Mutable(index)->assign(std::move(value));
}
inline void ClientPeersGetResponse::set_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientPeersGetResponse.peers)
}
inline void ClientPeersGetResponse::set_peers(int index, const char* value, size_t size) {
  peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientPeersGetResponse.peers)
}
inline std::string* ClientPeersGetResponse::add_peers() {
  // @@protoc_insertion_point(field_add_mutable:ClientPeersGetResponse.peers)
  return peers_.Add();
}
inline void ClientPeersGetResponse::add_peers(const std::string& value) {
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientPeersGetResponse.peers)
}
inline void ClientPeersGetResponse::add_peers(std::string&& value) {
  peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientPeersGetResponse.peers)
}
inline void ClientPeersGetResponse::add_peers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientPeersGetResponse.peers)
}
inline void ClientPeersGetResponse::add_peers(const char* value, size_t size) {
  peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientPeersGetResponse.peers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientPeersGetResponse::peers() const {
  // @@protoc_insertion_point(field_list:ClientPeersGetResponse.peers)
  return peers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientPeersGetResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:ClientPeersGetResponse.peers)
  return &peers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClientPeersGetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientPeersGetResponse_Status>() {
  return ::ClientPeersGetResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fpeers_2eproto
