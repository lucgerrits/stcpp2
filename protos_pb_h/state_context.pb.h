// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_context.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_state_5fcontext_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_state_5fcontext_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "events.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_state_5fcontext_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_state_5fcontext_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_5fcontext_2eproto;
class TpEventAddRequest;
class TpEventAddRequestDefaultTypeInternal;
extern TpEventAddRequestDefaultTypeInternal _TpEventAddRequest_default_instance_;
class TpEventAddResponse;
class TpEventAddResponseDefaultTypeInternal;
extern TpEventAddResponseDefaultTypeInternal _TpEventAddResponse_default_instance_;
class TpReceiptAddDataRequest;
class TpReceiptAddDataRequestDefaultTypeInternal;
extern TpReceiptAddDataRequestDefaultTypeInternal _TpReceiptAddDataRequest_default_instance_;
class TpReceiptAddDataResponse;
class TpReceiptAddDataResponseDefaultTypeInternal;
extern TpReceiptAddDataResponseDefaultTypeInternal _TpReceiptAddDataResponse_default_instance_;
class TpStateDeleteRequest;
class TpStateDeleteRequestDefaultTypeInternal;
extern TpStateDeleteRequestDefaultTypeInternal _TpStateDeleteRequest_default_instance_;
class TpStateDeleteResponse;
class TpStateDeleteResponseDefaultTypeInternal;
extern TpStateDeleteResponseDefaultTypeInternal _TpStateDeleteResponse_default_instance_;
class TpStateEntry;
class TpStateEntryDefaultTypeInternal;
extern TpStateEntryDefaultTypeInternal _TpStateEntry_default_instance_;
class TpStateGetRequest;
class TpStateGetRequestDefaultTypeInternal;
extern TpStateGetRequestDefaultTypeInternal _TpStateGetRequest_default_instance_;
class TpStateGetResponse;
class TpStateGetResponseDefaultTypeInternal;
extern TpStateGetResponseDefaultTypeInternal _TpStateGetResponse_default_instance_;
class TpStateSetRequest;
class TpStateSetRequestDefaultTypeInternal;
extern TpStateSetRequestDefaultTypeInternal _TpStateSetRequest_default_instance_;
class TpStateSetResponse;
class TpStateSetResponseDefaultTypeInternal;
extern TpStateSetResponseDefaultTypeInternal _TpStateSetResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TpEventAddRequest* Arena::CreateMaybeMessage<::TpEventAddRequest>(Arena*);
template<> ::TpEventAddResponse* Arena::CreateMaybeMessage<::TpEventAddResponse>(Arena*);
template<> ::TpReceiptAddDataRequest* Arena::CreateMaybeMessage<::TpReceiptAddDataRequest>(Arena*);
template<> ::TpReceiptAddDataResponse* Arena::CreateMaybeMessage<::TpReceiptAddDataResponse>(Arena*);
template<> ::TpStateDeleteRequest* Arena::CreateMaybeMessage<::TpStateDeleteRequest>(Arena*);
template<> ::TpStateDeleteResponse* Arena::CreateMaybeMessage<::TpStateDeleteResponse>(Arena*);
template<> ::TpStateEntry* Arena::CreateMaybeMessage<::TpStateEntry>(Arena*);
template<> ::TpStateGetRequest* Arena::CreateMaybeMessage<::TpStateGetRequest>(Arena*);
template<> ::TpStateGetResponse* Arena::CreateMaybeMessage<::TpStateGetResponse>(Arena*);
template<> ::TpStateSetRequest* Arena::CreateMaybeMessage<::TpStateSetRequest>(Arena*);
template<> ::TpStateSetResponse* Arena::CreateMaybeMessage<::TpStateSetResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TpStateGetResponse_Status : int {
  TpStateGetResponse_Status_STATUS_UNSET = 0,
  TpStateGetResponse_Status_OK = 1,
  TpStateGetResponse_Status_AUTHORIZATION_ERROR = 2,
  TpStateGetResponse_Status_TpStateGetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TpStateGetResponse_Status_TpStateGetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TpStateGetResponse_Status_IsValid(int value);
constexpr TpStateGetResponse_Status TpStateGetResponse_Status_Status_MIN = TpStateGetResponse_Status_STATUS_UNSET;
constexpr TpStateGetResponse_Status TpStateGetResponse_Status_Status_MAX = TpStateGetResponse_Status_AUTHORIZATION_ERROR;
constexpr int TpStateGetResponse_Status_Status_ARRAYSIZE = TpStateGetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TpStateGetResponse_Status_descriptor();
template<typename T>
inline const std::string& TpStateGetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TpStateGetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TpStateGetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TpStateGetResponse_Status_descriptor(), enum_t_value);
}
inline bool TpStateGetResponse_Status_Parse(
    const std::string& name, TpStateGetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TpStateGetResponse_Status>(
    TpStateGetResponse_Status_descriptor(), name, value);
}
enum TpStateSetResponse_Status : int {
  TpStateSetResponse_Status_STATUS_UNSET = 0,
  TpStateSetResponse_Status_OK = 1,
  TpStateSetResponse_Status_AUTHORIZATION_ERROR = 2,
  TpStateSetResponse_Status_TpStateSetResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TpStateSetResponse_Status_TpStateSetResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TpStateSetResponse_Status_IsValid(int value);
constexpr TpStateSetResponse_Status TpStateSetResponse_Status_Status_MIN = TpStateSetResponse_Status_STATUS_UNSET;
constexpr TpStateSetResponse_Status TpStateSetResponse_Status_Status_MAX = TpStateSetResponse_Status_AUTHORIZATION_ERROR;
constexpr int TpStateSetResponse_Status_Status_ARRAYSIZE = TpStateSetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TpStateSetResponse_Status_descriptor();
template<typename T>
inline const std::string& TpStateSetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TpStateSetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TpStateSetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TpStateSetResponse_Status_descriptor(), enum_t_value);
}
inline bool TpStateSetResponse_Status_Parse(
    const std::string& name, TpStateSetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TpStateSetResponse_Status>(
    TpStateSetResponse_Status_descriptor(), name, value);
}
enum TpStateDeleteResponse_Status : int {
  TpStateDeleteResponse_Status_STATUS_UNSET = 0,
  TpStateDeleteResponse_Status_OK = 1,
  TpStateDeleteResponse_Status_AUTHORIZATION_ERROR = 2,
  TpStateDeleteResponse_Status_TpStateDeleteResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TpStateDeleteResponse_Status_TpStateDeleteResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TpStateDeleteResponse_Status_IsValid(int value);
constexpr TpStateDeleteResponse_Status TpStateDeleteResponse_Status_Status_MIN = TpStateDeleteResponse_Status_STATUS_UNSET;
constexpr TpStateDeleteResponse_Status TpStateDeleteResponse_Status_Status_MAX = TpStateDeleteResponse_Status_AUTHORIZATION_ERROR;
constexpr int TpStateDeleteResponse_Status_Status_ARRAYSIZE = TpStateDeleteResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TpStateDeleteResponse_Status_descriptor();
template<typename T>
inline const std::string& TpStateDeleteResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TpStateDeleteResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TpStateDeleteResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TpStateDeleteResponse_Status_descriptor(), enum_t_value);
}
inline bool TpStateDeleteResponse_Status_Parse(
    const std::string& name, TpStateDeleteResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TpStateDeleteResponse_Status>(
    TpStateDeleteResponse_Status_descriptor(), name, value);
}
enum TpReceiptAddDataResponse_Status : int {
  TpReceiptAddDataResponse_Status_STATUS_UNSET = 0,
  TpReceiptAddDataResponse_Status_OK = 1,
  TpReceiptAddDataResponse_Status_ERROR = 2,
  TpReceiptAddDataResponse_Status_TpReceiptAddDataResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TpReceiptAddDataResponse_Status_TpReceiptAddDataResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TpReceiptAddDataResponse_Status_IsValid(int value);
constexpr TpReceiptAddDataResponse_Status TpReceiptAddDataResponse_Status_Status_MIN = TpReceiptAddDataResponse_Status_STATUS_UNSET;
constexpr TpReceiptAddDataResponse_Status TpReceiptAddDataResponse_Status_Status_MAX = TpReceiptAddDataResponse_Status_ERROR;
constexpr int TpReceiptAddDataResponse_Status_Status_ARRAYSIZE = TpReceiptAddDataResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TpReceiptAddDataResponse_Status_descriptor();
template<typename T>
inline const std::string& TpReceiptAddDataResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TpReceiptAddDataResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TpReceiptAddDataResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TpReceiptAddDataResponse_Status_descriptor(), enum_t_value);
}
inline bool TpReceiptAddDataResponse_Status_Parse(
    const std::string& name, TpReceiptAddDataResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TpReceiptAddDataResponse_Status>(
    TpReceiptAddDataResponse_Status_descriptor(), name, value);
}
enum TpEventAddResponse_Status : int {
  TpEventAddResponse_Status_STATUS_UNSET = 0,
  TpEventAddResponse_Status_OK = 1,
  TpEventAddResponse_Status_ERROR = 2,
  TpEventAddResponse_Status_TpEventAddResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TpEventAddResponse_Status_TpEventAddResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TpEventAddResponse_Status_IsValid(int value);
constexpr TpEventAddResponse_Status TpEventAddResponse_Status_Status_MIN = TpEventAddResponse_Status_STATUS_UNSET;
constexpr TpEventAddResponse_Status TpEventAddResponse_Status_Status_MAX = TpEventAddResponse_Status_ERROR;
constexpr int TpEventAddResponse_Status_Status_ARRAYSIZE = TpEventAddResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TpEventAddResponse_Status_descriptor();
template<typename T>
inline const std::string& TpEventAddResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TpEventAddResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TpEventAddResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TpEventAddResponse_Status_descriptor(), enum_t_value);
}
inline bool TpEventAddResponse_Status_Parse(
    const std::string& name, TpEventAddResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TpEventAddResponse_Status>(
    TpEventAddResponse_Status_descriptor(), name, value);
}
// ===================================================================

class TpStateEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpStateEntry) */ {
 public:
  TpStateEntry();
  virtual ~TpStateEntry();

  TpStateEntry(const TpStateEntry& from);
  TpStateEntry(TpStateEntry&& from) noexcept
    : TpStateEntry() {
    *this = ::std::move(from);
  }

  inline TpStateEntry& operator=(const TpStateEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpStateEntry& operator=(TpStateEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpStateEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpStateEntry* internal_default_instance() {
    return reinterpret_cast<const TpStateEntry*>(
               &_TpStateEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TpStateEntry* other);
  friend void swap(TpStateEntry& a, TpStateEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpStateEntry* New() const final {
    return CreateMaybeMessage<TpStateEntry>(nullptr);
  }

  TpStateEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpStateEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpStateEntry& from);
  void MergeFrom(const TpStateEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpStateEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpStateEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fcontext_2eproto);
    return ::descriptor_table_state_5fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:TpStateEntry)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class TpStateGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpStateGetRequest) */ {
 public:
  TpStateGetRequest();
  virtual ~TpStateGetRequest();

  TpStateGetRequest(const TpStateGetRequest& from);
  TpStateGetRequest(TpStateGetRequest&& from) noexcept
    : TpStateGetRequest() {
    *this = ::std::move(from);
  }

  inline TpStateGetRequest& operator=(const TpStateGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpStateGetRequest& operator=(TpStateGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpStateGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpStateGetRequest* internal_default_instance() {
    return reinterpret_cast<const TpStateGetRequest*>(
               &_TpStateGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TpStateGetRequest* other);
  friend void swap(TpStateGetRequest& a, TpStateGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpStateGetRequest* New() const final {
    return CreateMaybeMessage<TpStateGetRequest>(nullptr);
  }

  TpStateGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpStateGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpStateGetRequest& from);
  void MergeFrom(const TpStateGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpStateGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpStateGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fcontext_2eproto);
    return ::descriptor_table_state_5fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string addresses = 2;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 2;
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();

  // string context_id = 1;
  void clear_context_id();
  static const int kContextIdFieldNumber = 1;
  const std::string& context_id() const;
  void set_context_id(const std::string& value);
  void set_context_id(std::string&& value);
  void set_context_id(const char* value);
  void set_context_id(const char* value, size_t size);
  std::string* mutable_context_id();
  std::string* release_context_id();
  void set_allocated_context_id(std::string* context_id);

  // @@protoc_insertion_point(class_scope:TpStateGetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class TpStateGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpStateGetResponse) */ {
 public:
  TpStateGetResponse();
  virtual ~TpStateGetResponse();

  TpStateGetResponse(const TpStateGetResponse& from);
  TpStateGetResponse(TpStateGetResponse&& from) noexcept
    : TpStateGetResponse() {
    *this = ::std::move(from);
  }

  inline TpStateGetResponse& operator=(const TpStateGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpStateGetResponse& operator=(TpStateGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpStateGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpStateGetResponse* internal_default_instance() {
    return reinterpret_cast<const TpStateGetResponse*>(
               &_TpStateGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TpStateGetResponse* other);
  friend void swap(TpStateGetResponse& a, TpStateGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpStateGetResponse* New() const final {
    return CreateMaybeMessage<TpStateGetResponse>(nullptr);
  }

  TpStateGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpStateGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpStateGetResponse& from);
  void MergeFrom(const TpStateGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpStateGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpStateGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fcontext_2eproto);
    return ::descriptor_table_state_5fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TpStateGetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    TpStateGetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    TpStateGetResponse_Status_OK;
  static constexpr Status AUTHORIZATION_ERROR =
    TpStateGetResponse_Status_AUTHORIZATION_ERROR;
  static inline bool Status_IsValid(int value) {
    return TpStateGetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TpStateGetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TpStateGetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TpStateGetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TpStateGetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TpStateGetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return TpStateGetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .TpStateEntry entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  ::TpStateEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TpStateEntry >*
      mutable_entries();
  const ::TpStateEntry& entries(int index) const;
  ::TpStateEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TpStateEntry >&
      entries() const;

  // .TpStateGetResponse.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::TpStateGetResponse_Status status() const;
  void set_status(::TpStateGetResponse_Status value);

  // @@protoc_insertion_point(class_scope:TpStateGetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TpStateEntry > entries_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class TpStateSetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpStateSetRequest) */ {
 public:
  TpStateSetRequest();
  virtual ~TpStateSetRequest();

  TpStateSetRequest(const TpStateSetRequest& from);
  TpStateSetRequest(TpStateSetRequest&& from) noexcept
    : TpStateSetRequest() {
    *this = ::std::move(from);
  }

  inline TpStateSetRequest& operator=(const TpStateSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpStateSetRequest& operator=(TpStateSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpStateSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpStateSetRequest* internal_default_instance() {
    return reinterpret_cast<const TpStateSetRequest*>(
               &_TpStateSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TpStateSetRequest* other);
  friend void swap(TpStateSetRequest& a, TpStateSetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpStateSetRequest* New() const final {
    return CreateMaybeMessage<TpStateSetRequest>(nullptr);
  }

  TpStateSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpStateSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpStateSetRequest& from);
  void MergeFrom(const TpStateSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpStateSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpStateSetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fcontext_2eproto);
    return ::descriptor_table_state_5fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TpStateEntry entries = 2;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 2;
  ::TpStateEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TpStateEntry >*
      mutable_entries();
  const ::TpStateEntry& entries(int index) const;
  ::TpStateEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TpStateEntry >&
      entries() const;

  // string context_id = 1;
  void clear_context_id();
  static const int kContextIdFieldNumber = 1;
  const std::string& context_id() const;
  void set_context_id(const std::string& value);
  void set_context_id(std::string&& value);
  void set_context_id(const char* value);
  void set_context_id(const char* value, size_t size);
  std::string* mutable_context_id();
  std::string* release_context_id();
  void set_allocated_context_id(std::string* context_id);

  // @@protoc_insertion_point(class_scope:TpStateSetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TpStateEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class TpStateSetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpStateSetResponse) */ {
 public:
  TpStateSetResponse();
  virtual ~TpStateSetResponse();

  TpStateSetResponse(const TpStateSetResponse& from);
  TpStateSetResponse(TpStateSetResponse&& from) noexcept
    : TpStateSetResponse() {
    *this = ::std::move(from);
  }

  inline TpStateSetResponse& operator=(const TpStateSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpStateSetResponse& operator=(TpStateSetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpStateSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpStateSetResponse* internal_default_instance() {
    return reinterpret_cast<const TpStateSetResponse*>(
               &_TpStateSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TpStateSetResponse* other);
  friend void swap(TpStateSetResponse& a, TpStateSetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpStateSetResponse* New() const final {
    return CreateMaybeMessage<TpStateSetResponse>(nullptr);
  }

  TpStateSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpStateSetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpStateSetResponse& from);
  void MergeFrom(const TpStateSetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpStateSetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpStateSetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fcontext_2eproto);
    return ::descriptor_table_state_5fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TpStateSetResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    TpStateSetResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    TpStateSetResponse_Status_OK;
  static constexpr Status AUTHORIZATION_ERROR =
    TpStateSetResponse_Status_AUTHORIZATION_ERROR;
  static inline bool Status_IsValid(int value) {
    return TpStateSetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TpStateSetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TpStateSetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TpStateSetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TpStateSetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TpStateSetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return TpStateSetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string addresses = 1;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 1;
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();

  // .TpStateSetResponse.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::TpStateSetResponse_Status status() const;
  void set_status(::TpStateSetResponse_Status value);

  // @@protoc_insertion_point(class_scope:TpStateSetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class TpStateDeleteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpStateDeleteRequest) */ {
 public:
  TpStateDeleteRequest();
  virtual ~TpStateDeleteRequest();

  TpStateDeleteRequest(const TpStateDeleteRequest& from);
  TpStateDeleteRequest(TpStateDeleteRequest&& from) noexcept
    : TpStateDeleteRequest() {
    *this = ::std::move(from);
  }

  inline TpStateDeleteRequest& operator=(const TpStateDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpStateDeleteRequest& operator=(TpStateDeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpStateDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpStateDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const TpStateDeleteRequest*>(
               &_TpStateDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TpStateDeleteRequest* other);
  friend void swap(TpStateDeleteRequest& a, TpStateDeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpStateDeleteRequest* New() const final {
    return CreateMaybeMessage<TpStateDeleteRequest>(nullptr);
  }

  TpStateDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpStateDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpStateDeleteRequest& from);
  void MergeFrom(const TpStateDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpStateDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpStateDeleteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fcontext_2eproto);
    return ::descriptor_table_state_5fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string addresses = 2;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 2;
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();

  // string context_id = 1;
  void clear_context_id();
  static const int kContextIdFieldNumber = 1;
  const std::string& context_id() const;
  void set_context_id(const std::string& value);
  void set_context_id(std::string&& value);
  void set_context_id(const char* value);
  void set_context_id(const char* value, size_t size);
  std::string* mutable_context_id();
  std::string* release_context_id();
  void set_allocated_context_id(std::string* context_id);

  // @@protoc_insertion_point(class_scope:TpStateDeleteRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class TpStateDeleteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpStateDeleteResponse) */ {
 public:
  TpStateDeleteResponse();
  virtual ~TpStateDeleteResponse();

  TpStateDeleteResponse(const TpStateDeleteResponse& from);
  TpStateDeleteResponse(TpStateDeleteResponse&& from) noexcept
    : TpStateDeleteResponse() {
    *this = ::std::move(from);
  }

  inline TpStateDeleteResponse& operator=(const TpStateDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpStateDeleteResponse& operator=(TpStateDeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpStateDeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpStateDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const TpStateDeleteResponse*>(
               &_TpStateDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TpStateDeleteResponse* other);
  friend void swap(TpStateDeleteResponse& a, TpStateDeleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpStateDeleteResponse* New() const final {
    return CreateMaybeMessage<TpStateDeleteResponse>(nullptr);
  }

  TpStateDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpStateDeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpStateDeleteResponse& from);
  void MergeFrom(const TpStateDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpStateDeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpStateDeleteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fcontext_2eproto);
    return ::descriptor_table_state_5fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TpStateDeleteResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    TpStateDeleteResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    TpStateDeleteResponse_Status_OK;
  static constexpr Status AUTHORIZATION_ERROR =
    TpStateDeleteResponse_Status_AUTHORIZATION_ERROR;
  static inline bool Status_IsValid(int value) {
    return TpStateDeleteResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TpStateDeleteResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TpStateDeleteResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TpStateDeleteResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TpStateDeleteResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TpStateDeleteResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return TpStateDeleteResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string addresses = 1;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 1;
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();

  // .TpStateDeleteResponse.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::TpStateDeleteResponse_Status status() const;
  void set_status(::TpStateDeleteResponse_Status value);

  // @@protoc_insertion_point(class_scope:TpStateDeleteResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class TpReceiptAddDataRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpReceiptAddDataRequest) */ {
 public:
  TpReceiptAddDataRequest();
  virtual ~TpReceiptAddDataRequest();

  TpReceiptAddDataRequest(const TpReceiptAddDataRequest& from);
  TpReceiptAddDataRequest(TpReceiptAddDataRequest&& from) noexcept
    : TpReceiptAddDataRequest() {
    *this = ::std::move(from);
  }

  inline TpReceiptAddDataRequest& operator=(const TpReceiptAddDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpReceiptAddDataRequest& operator=(TpReceiptAddDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpReceiptAddDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpReceiptAddDataRequest* internal_default_instance() {
    return reinterpret_cast<const TpReceiptAddDataRequest*>(
               &_TpReceiptAddDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TpReceiptAddDataRequest* other);
  friend void swap(TpReceiptAddDataRequest& a, TpReceiptAddDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpReceiptAddDataRequest* New() const final {
    return CreateMaybeMessage<TpReceiptAddDataRequest>(nullptr);
  }

  TpReceiptAddDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpReceiptAddDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpReceiptAddDataRequest& from);
  void MergeFrom(const TpReceiptAddDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpReceiptAddDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpReceiptAddDataRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fcontext_2eproto);
    return ::descriptor_table_state_5fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string context_id = 1;
  void clear_context_id();
  static const int kContextIdFieldNumber = 1;
  const std::string& context_id() const;
  void set_context_id(const std::string& value);
  void set_context_id(std::string&& value);
  void set_context_id(const char* value);
  void set_context_id(const char* value, size_t size);
  std::string* mutable_context_id();
  std::string* release_context_id();
  void set_allocated_context_id(std::string* context_id);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:TpReceiptAddDataRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class TpReceiptAddDataResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpReceiptAddDataResponse) */ {
 public:
  TpReceiptAddDataResponse();
  virtual ~TpReceiptAddDataResponse();

  TpReceiptAddDataResponse(const TpReceiptAddDataResponse& from);
  TpReceiptAddDataResponse(TpReceiptAddDataResponse&& from) noexcept
    : TpReceiptAddDataResponse() {
    *this = ::std::move(from);
  }

  inline TpReceiptAddDataResponse& operator=(const TpReceiptAddDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpReceiptAddDataResponse& operator=(TpReceiptAddDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpReceiptAddDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpReceiptAddDataResponse* internal_default_instance() {
    return reinterpret_cast<const TpReceiptAddDataResponse*>(
               &_TpReceiptAddDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TpReceiptAddDataResponse* other);
  friend void swap(TpReceiptAddDataResponse& a, TpReceiptAddDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpReceiptAddDataResponse* New() const final {
    return CreateMaybeMessage<TpReceiptAddDataResponse>(nullptr);
  }

  TpReceiptAddDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpReceiptAddDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpReceiptAddDataResponse& from);
  void MergeFrom(const TpReceiptAddDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpReceiptAddDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpReceiptAddDataResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fcontext_2eproto);
    return ::descriptor_table_state_5fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TpReceiptAddDataResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    TpReceiptAddDataResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    TpReceiptAddDataResponse_Status_OK;
  static constexpr Status ERROR =
    TpReceiptAddDataResponse_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return TpReceiptAddDataResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TpReceiptAddDataResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TpReceiptAddDataResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TpReceiptAddDataResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TpReceiptAddDataResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TpReceiptAddDataResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return TpReceiptAddDataResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .TpReceiptAddDataResponse.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::TpReceiptAddDataResponse_Status status() const;
  void set_status(::TpReceiptAddDataResponse_Status value);

  // @@protoc_insertion_point(class_scope:TpReceiptAddDataResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class TpEventAddRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpEventAddRequest) */ {
 public:
  TpEventAddRequest();
  virtual ~TpEventAddRequest();

  TpEventAddRequest(const TpEventAddRequest& from);
  TpEventAddRequest(TpEventAddRequest&& from) noexcept
    : TpEventAddRequest() {
    *this = ::std::move(from);
  }

  inline TpEventAddRequest& operator=(const TpEventAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpEventAddRequest& operator=(TpEventAddRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpEventAddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpEventAddRequest* internal_default_instance() {
    return reinterpret_cast<const TpEventAddRequest*>(
               &_TpEventAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(TpEventAddRequest* other);
  friend void swap(TpEventAddRequest& a, TpEventAddRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpEventAddRequest* New() const final {
    return CreateMaybeMessage<TpEventAddRequest>(nullptr);
  }

  TpEventAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpEventAddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpEventAddRequest& from);
  void MergeFrom(const TpEventAddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpEventAddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpEventAddRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fcontext_2eproto);
    return ::descriptor_table_state_5fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string context_id = 1;
  void clear_context_id();
  static const int kContextIdFieldNumber = 1;
  const std::string& context_id() const;
  void set_context_id(const std::string& value);
  void set_context_id(std::string&& value);
  void set_context_id(const char* value);
  void set_context_id(const char* value, size_t size);
  std::string* mutable_context_id();
  std::string* release_context_id();
  void set_allocated_context_id(std::string* context_id);

  // .Event event = 2;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 2;
  const ::Event& event() const;
  ::Event* release_event();
  ::Event* mutable_event();
  void set_allocated_event(::Event* event);

  // @@protoc_insertion_point(class_scope:TpEventAddRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_id_;
  ::Event* event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class TpEventAddResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TpEventAddResponse) */ {
 public:
  TpEventAddResponse();
  virtual ~TpEventAddResponse();

  TpEventAddResponse(const TpEventAddResponse& from);
  TpEventAddResponse(TpEventAddResponse&& from) noexcept
    : TpEventAddResponse() {
    *this = ::std::move(from);
  }

  inline TpEventAddResponse& operator=(const TpEventAddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpEventAddResponse& operator=(TpEventAddResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TpEventAddResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpEventAddResponse* internal_default_instance() {
    return reinterpret_cast<const TpEventAddResponse*>(
               &_TpEventAddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TpEventAddResponse* other);
  friend void swap(TpEventAddResponse& a, TpEventAddResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpEventAddResponse* New() const final {
    return CreateMaybeMessage<TpEventAddResponse>(nullptr);
  }

  TpEventAddResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpEventAddResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TpEventAddResponse& from);
  void MergeFrom(const TpEventAddResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpEventAddResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TpEventAddResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fcontext_2eproto);
    return ::descriptor_table_state_5fcontext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TpEventAddResponse_Status Status;
  static constexpr Status STATUS_UNSET =
    TpEventAddResponse_Status_STATUS_UNSET;
  static constexpr Status OK =
    TpEventAddResponse_Status_OK;
  static constexpr Status ERROR =
    TpEventAddResponse_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return TpEventAddResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TpEventAddResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TpEventAddResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TpEventAddResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TpEventAddResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TpEventAddResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return TpEventAddResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .TpEventAddResponse.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::TpEventAddResponse_Status status() const;
  void set_status(::TpEventAddResponse_Status value);

  // @@protoc_insertion_point(class_scope:TpEventAddResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fcontext_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TpStateEntry

// string address = 1;
inline void TpStateEntry::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpStateEntry::address() const {
  // @@protoc_insertion_point(field_get:TpStateEntry.address)
  return address_.GetNoArena();
}
inline void TpStateEntry::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpStateEntry.address)
}
inline void TpStateEntry::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpStateEntry.address)
}
inline void TpStateEntry::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpStateEntry.address)
}
inline void TpStateEntry::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpStateEntry.address)
}
inline std::string* TpStateEntry::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:TpStateEntry.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpStateEntry::release_address() {
  // @@protoc_insertion_point(field_release:TpStateEntry.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpStateEntry::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:TpStateEntry.address)
}

// bytes data = 2;
inline void TpStateEntry::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpStateEntry::data() const {
  // @@protoc_insertion_point(field_get:TpStateEntry.data)
  return data_.GetNoArena();
}
inline void TpStateEntry::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpStateEntry.data)
}
inline void TpStateEntry::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpStateEntry.data)
}
inline void TpStateEntry::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpStateEntry.data)
}
inline void TpStateEntry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpStateEntry.data)
}
inline std::string* TpStateEntry::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:TpStateEntry.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpStateEntry::release_data() {
  // @@protoc_insertion_point(field_release:TpStateEntry.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpStateEntry::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:TpStateEntry.data)
}

// -------------------------------------------------------------------

// TpStateGetRequest

// string context_id = 1;
inline void TpStateGetRequest::clear_context_id() {
  context_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpStateGetRequest::context_id() const {
  // @@protoc_insertion_point(field_get:TpStateGetRequest.context_id)
  return context_id_.GetNoArena();
}
inline void TpStateGetRequest::set_context_id(const std::string& value) {
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpStateGetRequest.context_id)
}
inline void TpStateGetRequest::set_context_id(std::string&& value) {
  
  context_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpStateGetRequest.context_id)
}
inline void TpStateGetRequest::set_context_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpStateGetRequest.context_id)
}
inline void TpStateGetRequest::set_context_id(const char* value, size_t size) {
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpStateGetRequest.context_id)
}
inline std::string* TpStateGetRequest::mutable_context_id() {
  
  // @@protoc_insertion_point(field_mutable:TpStateGetRequest.context_id)
  return context_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpStateGetRequest::release_context_id() {
  // @@protoc_insertion_point(field_release:TpStateGetRequest.context_id)
  
  return context_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpStateGetRequest::set_allocated_context_id(std::string* context_id) {
  if (context_id != nullptr) {
    
  } else {
    
  }
  context_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context_id);
  // @@protoc_insertion_point(field_set_allocated:TpStateGetRequest.context_id)
}

// repeated string addresses = 2;
inline int TpStateGetRequest::addresses_size() const {
  return addresses_.size();
}
inline void TpStateGetRequest::clear_addresses() {
  addresses_.Clear();
}
inline const std::string& TpStateGetRequest::addresses(int index) const {
  // @@protoc_insertion_point(field_get:TpStateGetRequest.addresses)
  return addresses_.Get(index);
}
inline std::string* TpStateGetRequest::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:TpStateGetRequest.addresses)
  return addresses_.Mutable(index);
}
inline void TpStateGetRequest::set_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TpStateGetRequest.addresses)
  addresses_.Mutable(index)->assign(value);
}
inline void TpStateGetRequest::set_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TpStateGetRequest.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
inline void TpStateGetRequest::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TpStateGetRequest.addresses)
}
inline void TpStateGetRequest::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TpStateGetRequest.addresses)
}
inline std::string* TpStateGetRequest::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:TpStateGetRequest.addresses)
  return addresses_.Add();
}
inline void TpStateGetRequest::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TpStateGetRequest.addresses)
}
inline void TpStateGetRequest::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TpStateGetRequest.addresses)
}
inline void TpStateGetRequest::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TpStateGetRequest.addresses)
}
inline void TpStateGetRequest::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TpStateGetRequest.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TpStateGetRequest::addresses() const {
  // @@protoc_insertion_point(field_list:TpStateGetRequest.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TpStateGetRequest::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:TpStateGetRequest.addresses)
  return &addresses_;
}

// -------------------------------------------------------------------

// TpStateGetResponse

// repeated .TpStateEntry entries = 1;
inline int TpStateGetResponse::entries_size() const {
  return entries_.size();
}
inline void TpStateGetResponse::clear_entries() {
  entries_.Clear();
}
inline ::TpStateEntry* TpStateGetResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TpStateGetResponse.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TpStateEntry >*
TpStateGetResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TpStateGetResponse.entries)
  return &entries_;
}
inline const ::TpStateEntry& TpStateGetResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:TpStateGetResponse.entries)
  return entries_.Get(index);
}
inline ::TpStateEntry* TpStateGetResponse::add_entries() {
  // @@protoc_insertion_point(field_add:TpStateGetResponse.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TpStateEntry >&
TpStateGetResponse::entries() const {
  // @@protoc_insertion_point(field_list:TpStateGetResponse.entries)
  return entries_;
}

// .TpStateGetResponse.Status status = 2;
inline void TpStateGetResponse::clear_status() {
  status_ = 0;
}
inline ::TpStateGetResponse_Status TpStateGetResponse::status() const {
  // @@protoc_insertion_point(field_get:TpStateGetResponse.status)
  return static_cast< ::TpStateGetResponse_Status >(status_);
}
inline void TpStateGetResponse::set_status(::TpStateGetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TpStateGetResponse.status)
}

// -------------------------------------------------------------------

// TpStateSetRequest

// string context_id = 1;
inline void TpStateSetRequest::clear_context_id() {
  context_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpStateSetRequest::context_id() const {
  // @@protoc_insertion_point(field_get:TpStateSetRequest.context_id)
  return context_id_.GetNoArena();
}
inline void TpStateSetRequest::set_context_id(const std::string& value) {
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpStateSetRequest.context_id)
}
inline void TpStateSetRequest::set_context_id(std::string&& value) {
  
  context_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpStateSetRequest.context_id)
}
inline void TpStateSetRequest::set_context_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpStateSetRequest.context_id)
}
inline void TpStateSetRequest::set_context_id(const char* value, size_t size) {
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpStateSetRequest.context_id)
}
inline std::string* TpStateSetRequest::mutable_context_id() {
  
  // @@protoc_insertion_point(field_mutable:TpStateSetRequest.context_id)
  return context_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpStateSetRequest::release_context_id() {
  // @@protoc_insertion_point(field_release:TpStateSetRequest.context_id)
  
  return context_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpStateSetRequest::set_allocated_context_id(std::string* context_id) {
  if (context_id != nullptr) {
    
  } else {
    
  }
  context_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context_id);
  // @@protoc_insertion_point(field_set_allocated:TpStateSetRequest.context_id)
}

// repeated .TpStateEntry entries = 2;
inline int TpStateSetRequest::entries_size() const {
  return entries_.size();
}
inline void TpStateSetRequest::clear_entries() {
  entries_.Clear();
}
inline ::TpStateEntry* TpStateSetRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TpStateSetRequest.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TpStateEntry >*
TpStateSetRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TpStateSetRequest.entries)
  return &entries_;
}
inline const ::TpStateEntry& TpStateSetRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:TpStateSetRequest.entries)
  return entries_.Get(index);
}
inline ::TpStateEntry* TpStateSetRequest::add_entries() {
  // @@protoc_insertion_point(field_add:TpStateSetRequest.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TpStateEntry >&
TpStateSetRequest::entries() const {
  // @@protoc_insertion_point(field_list:TpStateSetRequest.entries)
  return entries_;
}

// -------------------------------------------------------------------

// TpStateSetResponse

// repeated string addresses = 1;
inline int TpStateSetResponse::addresses_size() const {
  return addresses_.size();
}
inline void TpStateSetResponse::clear_addresses() {
  addresses_.Clear();
}
inline const std::string& TpStateSetResponse::addresses(int index) const {
  // @@protoc_insertion_point(field_get:TpStateSetResponse.addresses)
  return addresses_.Get(index);
}
inline std::string* TpStateSetResponse::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:TpStateSetResponse.addresses)
  return addresses_.Mutable(index);
}
inline void TpStateSetResponse::set_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TpStateSetResponse.addresses)
  addresses_.Mutable(index)->assign(value);
}
inline void TpStateSetResponse::set_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TpStateSetResponse.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
inline void TpStateSetResponse::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TpStateSetResponse.addresses)
}
inline void TpStateSetResponse::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TpStateSetResponse.addresses)
}
inline std::string* TpStateSetResponse::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:TpStateSetResponse.addresses)
  return addresses_.Add();
}
inline void TpStateSetResponse::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TpStateSetResponse.addresses)
}
inline void TpStateSetResponse::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TpStateSetResponse.addresses)
}
inline void TpStateSetResponse::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TpStateSetResponse.addresses)
}
inline void TpStateSetResponse::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TpStateSetResponse.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TpStateSetResponse::addresses() const {
  // @@protoc_insertion_point(field_list:TpStateSetResponse.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TpStateSetResponse::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:TpStateSetResponse.addresses)
  return &addresses_;
}

// .TpStateSetResponse.Status status = 2;
inline void TpStateSetResponse::clear_status() {
  status_ = 0;
}
inline ::TpStateSetResponse_Status TpStateSetResponse::status() const {
  // @@protoc_insertion_point(field_get:TpStateSetResponse.status)
  return static_cast< ::TpStateSetResponse_Status >(status_);
}
inline void TpStateSetResponse::set_status(::TpStateSetResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TpStateSetResponse.status)
}

// -------------------------------------------------------------------

// TpStateDeleteRequest

// string context_id = 1;
inline void TpStateDeleteRequest::clear_context_id() {
  context_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpStateDeleteRequest::context_id() const {
  // @@protoc_insertion_point(field_get:TpStateDeleteRequest.context_id)
  return context_id_.GetNoArena();
}
inline void TpStateDeleteRequest::set_context_id(const std::string& value) {
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpStateDeleteRequest.context_id)
}
inline void TpStateDeleteRequest::set_context_id(std::string&& value) {
  
  context_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpStateDeleteRequest.context_id)
}
inline void TpStateDeleteRequest::set_context_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpStateDeleteRequest.context_id)
}
inline void TpStateDeleteRequest::set_context_id(const char* value, size_t size) {
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpStateDeleteRequest.context_id)
}
inline std::string* TpStateDeleteRequest::mutable_context_id() {
  
  // @@protoc_insertion_point(field_mutable:TpStateDeleteRequest.context_id)
  return context_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpStateDeleteRequest::release_context_id() {
  // @@protoc_insertion_point(field_release:TpStateDeleteRequest.context_id)
  
  return context_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpStateDeleteRequest::set_allocated_context_id(std::string* context_id) {
  if (context_id != nullptr) {
    
  } else {
    
  }
  context_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context_id);
  // @@protoc_insertion_point(field_set_allocated:TpStateDeleteRequest.context_id)
}

// repeated string addresses = 2;
inline int TpStateDeleteRequest::addresses_size() const {
  return addresses_.size();
}
inline void TpStateDeleteRequest::clear_addresses() {
  addresses_.Clear();
}
inline const std::string& TpStateDeleteRequest::addresses(int index) const {
  // @@protoc_insertion_point(field_get:TpStateDeleteRequest.addresses)
  return addresses_.Get(index);
}
inline std::string* TpStateDeleteRequest::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:TpStateDeleteRequest.addresses)
  return addresses_.Mutable(index);
}
inline void TpStateDeleteRequest::set_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TpStateDeleteRequest.addresses)
  addresses_.Mutable(index)->assign(value);
}
inline void TpStateDeleteRequest::set_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TpStateDeleteRequest.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
inline void TpStateDeleteRequest::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TpStateDeleteRequest.addresses)
}
inline void TpStateDeleteRequest::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TpStateDeleteRequest.addresses)
}
inline std::string* TpStateDeleteRequest::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:TpStateDeleteRequest.addresses)
  return addresses_.Add();
}
inline void TpStateDeleteRequest::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TpStateDeleteRequest.addresses)
}
inline void TpStateDeleteRequest::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TpStateDeleteRequest.addresses)
}
inline void TpStateDeleteRequest::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TpStateDeleteRequest.addresses)
}
inline void TpStateDeleteRequest::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TpStateDeleteRequest.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TpStateDeleteRequest::addresses() const {
  // @@protoc_insertion_point(field_list:TpStateDeleteRequest.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TpStateDeleteRequest::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:TpStateDeleteRequest.addresses)
  return &addresses_;
}

// -------------------------------------------------------------------

// TpStateDeleteResponse

// repeated string addresses = 1;
inline int TpStateDeleteResponse::addresses_size() const {
  return addresses_.size();
}
inline void TpStateDeleteResponse::clear_addresses() {
  addresses_.Clear();
}
inline const std::string& TpStateDeleteResponse::addresses(int index) const {
  // @@protoc_insertion_point(field_get:TpStateDeleteResponse.addresses)
  return addresses_.Get(index);
}
inline std::string* TpStateDeleteResponse::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:TpStateDeleteResponse.addresses)
  return addresses_.Mutable(index);
}
inline void TpStateDeleteResponse::set_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TpStateDeleteResponse.addresses)
  addresses_.Mutable(index)->assign(value);
}
inline void TpStateDeleteResponse::set_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TpStateDeleteResponse.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
inline void TpStateDeleteResponse::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TpStateDeleteResponse.addresses)
}
inline void TpStateDeleteResponse::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TpStateDeleteResponse.addresses)
}
inline std::string* TpStateDeleteResponse::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:TpStateDeleteResponse.addresses)
  return addresses_.Add();
}
inline void TpStateDeleteResponse::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TpStateDeleteResponse.addresses)
}
inline void TpStateDeleteResponse::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TpStateDeleteResponse.addresses)
}
inline void TpStateDeleteResponse::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TpStateDeleteResponse.addresses)
}
inline void TpStateDeleteResponse::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TpStateDeleteResponse.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TpStateDeleteResponse::addresses() const {
  // @@protoc_insertion_point(field_list:TpStateDeleteResponse.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TpStateDeleteResponse::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:TpStateDeleteResponse.addresses)
  return &addresses_;
}

// .TpStateDeleteResponse.Status status = 2;
inline void TpStateDeleteResponse::clear_status() {
  status_ = 0;
}
inline ::TpStateDeleteResponse_Status TpStateDeleteResponse::status() const {
  // @@protoc_insertion_point(field_get:TpStateDeleteResponse.status)
  return static_cast< ::TpStateDeleteResponse_Status >(status_);
}
inline void TpStateDeleteResponse::set_status(::TpStateDeleteResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TpStateDeleteResponse.status)
}

// -------------------------------------------------------------------

// TpReceiptAddDataRequest

// string context_id = 1;
inline void TpReceiptAddDataRequest::clear_context_id() {
  context_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpReceiptAddDataRequest::context_id() const {
  // @@protoc_insertion_point(field_get:TpReceiptAddDataRequest.context_id)
  return context_id_.GetNoArena();
}
inline void TpReceiptAddDataRequest::set_context_id(const std::string& value) {
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpReceiptAddDataRequest.context_id)
}
inline void TpReceiptAddDataRequest::set_context_id(std::string&& value) {
  
  context_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpReceiptAddDataRequest.context_id)
}
inline void TpReceiptAddDataRequest::set_context_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpReceiptAddDataRequest.context_id)
}
inline void TpReceiptAddDataRequest::set_context_id(const char* value, size_t size) {
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpReceiptAddDataRequest.context_id)
}
inline std::string* TpReceiptAddDataRequest::mutable_context_id() {
  
  // @@protoc_insertion_point(field_mutable:TpReceiptAddDataRequest.context_id)
  return context_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpReceiptAddDataRequest::release_context_id() {
  // @@protoc_insertion_point(field_release:TpReceiptAddDataRequest.context_id)
  
  return context_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpReceiptAddDataRequest::set_allocated_context_id(std::string* context_id) {
  if (context_id != nullptr) {
    
  } else {
    
  }
  context_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context_id);
  // @@protoc_insertion_point(field_set_allocated:TpReceiptAddDataRequest.context_id)
}

// bytes data = 3;
inline void TpReceiptAddDataRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpReceiptAddDataRequest::data() const {
  // @@protoc_insertion_point(field_get:TpReceiptAddDataRequest.data)
  return data_.GetNoArena();
}
inline void TpReceiptAddDataRequest::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpReceiptAddDataRequest.data)
}
inline void TpReceiptAddDataRequest::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpReceiptAddDataRequest.data)
}
inline void TpReceiptAddDataRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpReceiptAddDataRequest.data)
}
inline void TpReceiptAddDataRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpReceiptAddDataRequest.data)
}
inline std::string* TpReceiptAddDataRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:TpReceiptAddDataRequest.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpReceiptAddDataRequest::release_data() {
  // @@protoc_insertion_point(field_release:TpReceiptAddDataRequest.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpReceiptAddDataRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:TpReceiptAddDataRequest.data)
}

// -------------------------------------------------------------------

// TpReceiptAddDataResponse

// .TpReceiptAddDataResponse.Status status = 2;
inline void TpReceiptAddDataResponse::clear_status() {
  status_ = 0;
}
inline ::TpReceiptAddDataResponse_Status TpReceiptAddDataResponse::status() const {
  // @@protoc_insertion_point(field_get:TpReceiptAddDataResponse.status)
  return static_cast< ::TpReceiptAddDataResponse_Status >(status_);
}
inline void TpReceiptAddDataResponse::set_status(::TpReceiptAddDataResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TpReceiptAddDataResponse.status)
}

// -------------------------------------------------------------------

// TpEventAddRequest

// string context_id = 1;
inline void TpEventAddRequest::clear_context_id() {
  context_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TpEventAddRequest::context_id() const {
  // @@protoc_insertion_point(field_get:TpEventAddRequest.context_id)
  return context_id_.GetNoArena();
}
inline void TpEventAddRequest::set_context_id(const std::string& value) {
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TpEventAddRequest.context_id)
}
inline void TpEventAddRequest::set_context_id(std::string&& value) {
  
  context_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TpEventAddRequest.context_id)
}
inline void TpEventAddRequest::set_context_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TpEventAddRequest.context_id)
}
inline void TpEventAddRequest::set_context_id(const char* value, size_t size) {
  
  context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TpEventAddRequest.context_id)
}
inline std::string* TpEventAddRequest::mutable_context_id() {
  
  // @@protoc_insertion_point(field_mutable:TpEventAddRequest.context_id)
  return context_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TpEventAddRequest::release_context_id() {
  // @@protoc_insertion_point(field_release:TpEventAddRequest.context_id)
  
  return context_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TpEventAddRequest::set_allocated_context_id(std::string* context_id) {
  if (context_id != nullptr) {
    
  } else {
    
  }
  context_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context_id);
  // @@protoc_insertion_point(field_set_allocated:TpEventAddRequest.context_id)
}

// .Event event = 2;
inline bool TpEventAddRequest::has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline const ::Event& TpEventAddRequest::event() const {
  const ::Event* p = event_;
  // @@protoc_insertion_point(field_get:TpEventAddRequest.event)
  return p != nullptr ? *p : *reinterpret_cast<const ::Event*>(
      &::_Event_default_instance_);
}
inline ::Event* TpEventAddRequest::release_event() {
  // @@protoc_insertion_point(field_release:TpEventAddRequest.event)
  
  ::Event* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::Event* TpEventAddRequest::mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::Event>(GetArenaNoVirtual());
    event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TpEventAddRequest.event)
  return event_;
}
inline void TpEventAddRequest::set_allocated_event(::Event* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:TpEventAddRequest.event)
}

// -------------------------------------------------------------------

// TpEventAddResponse

// .TpEventAddResponse.Status status = 2;
inline void TpEventAddResponse::clear_status() {
  status_ = 0;
}
inline ::TpEventAddResponse_Status TpEventAddResponse::status() const {
  // @@protoc_insertion_point(field_get:TpEventAddResponse.status)
  return static_cast< ::TpEventAddResponse_Status >(status_);
}
inline void TpEventAddResponse::set_status(::TpEventAddResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TpEventAddResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TpStateGetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TpStateGetResponse_Status>() {
  return ::TpStateGetResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::TpStateSetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TpStateSetResponse_Status>() {
  return ::TpStateSetResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::TpStateDeleteResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TpStateDeleteResponse_Status>() {
  return ::TpStateDeleteResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::TpReceiptAddDataResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TpReceiptAddDataResponse_Status>() {
  return ::TpReceiptAddDataResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::TpEventAddResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TpEventAddResponse_Status>() {
  return ::TpEventAddResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_state_5fcontext_2eproto
